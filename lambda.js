(() => {
    "use strict"; var n = [function (n, e, t) {
        var a = this && this.__importDefault || function (n) { return n && n.__esModule ? n : { default: n } }; Object.defineProperty(e, "__esModule", { value: !0 }), e.handler = void 0; const i = t(1), o = t(2), d = t(3), r = t(4), s = t(5), p = a(t(6)), l = t(8), c = t(9), I = t(10), m = a(t(11)), u = a(t(12)), g = a(t(18)), A = a(t(19)), $ = a(t(20)); e.handler = (0, m.default)((async n => {
            var e, t, a, o, d, r, m, y, _, C, b, k, f, T, h, S, D; s.logger.info(`fetch contacts: events:: ${JSON.stringify(n)}`); try {
                const v = n.input.payload, M = n.input.jobId, w = v.enterpriseId, x = null !== (e = null == v ? void 0 : v.fileKey) && void 0 !== e ? e : "", L = n.input.type, N = null !== (t = null == v ? void 0 : v.integrationId) && void 0 !== t ? t : "", U = null !== (a = null == v ? void 0 : v.listId) && void 0 !== a ? a : "", B = null !== (o = null == v ? void 0 : v.contactGroupId) && void 0 !== o ? o : "", F = null !== (d = null == v ? void 0 : v.listname) && void 0 !== d ? d : "", E = null !== (r = null == v ? void 0 : v.isDynamic) && void 0 !== r && r, R = null !== (m = null == v ? void 0 : v.fetchQuery) && void 0 !== m ? m : "", G = null !== (y = n.input.mode) && void 0 !== y ? y : l.MODE.TEST; let O = { nextToken: null, items: [], isCompleted: !1, integrationId: N, nextUrl: null }; if (L === l.JobType.CONTACTS || L === l.JobType.CONTACT_LIST || L === l.JobType.DELETE_CONTACTS ? (s.logger.info(`Fetched contacts for enterprise ${w}`), O = await (0, $.default)({ fileKey: x, enterpriseId: w, limit: null !== (_ = n.limit) && void 0 !== _ ? _ : 100, nextToken: n.nextToken, type: n.input.type, mode: G })) : L === l.JobType.DYNAMICS_CONTACT ? (s.logger.info(`Fetched contacts from Dynamics for enterprise ${w}`), O = await (0, A.default)({ enterpriseId: w, mode: G, integrationId: N, nextUrl: n.nextToken })) : L === l.JobType.DYNAMICS_CONTACT_LIST && (s.logger.info(`Fetched contacts group from Dynamics for enterprise ${w}`), O = E ? await (0, u.default)({ enterpriseId: w, mode: G, integrationId: N, listId: U, contactGroupId: B, nextUrl: n.nextToken, listname: F, fetchQuery: R, nextToken: n.nextToken, limit: null !== (C = n.limit) && void 0 !== C ? C : 100 }) : await (0, g.default)({ enterpriseId: w, mode: G, integrationId: N, listId: U, contactGroupId: B, nextUrl: n.nextToken, listname: F })), s.logger.info(`paginatedData isCompleted: ${O.isCompleted}`), n.results) {
                    const { data: e } = await p.default.query({
                        query: i.gql`
          ${I.getJob}
        `, variables: { jobId: M, enterpriseId: w, mode: G }
                    }), t = n.results.filter((n => n.success)), a = n.results.filter((n => !n.success)), o = a.map((n => { var e, t, a, i, o; return null !== (o = null === (i = null === (a = null === (t = null === (e = n.data) || void 0 === e ? void 0 : e.response) || void 0 === t ? void 0 : t.errors) || void 0 === a ? void 0 : a[0]) || void 0 === i ? void 0 : i.message) && void 0 !== o ? o : "Unknown error" })), d = o.reduce(((n, e) => (n[e] = (n[e] || 0) + 1, n)), {}), r = Object.keys(d).sort(((n, e) => d[e] - d[n])).slice(0, 5); s.logger.info(`Number of failure reasons: ${o.length}`), s.logger.info(`Number of success: ${t.length}`), s.logger.info(`Number of failed: ${a.length}`); const l = await p.default.mutate({
                        mutation: i.gql`
          ${c.updateJob}
        `, variables: { input: { jobId: M, enterpriseId: w, mode: G, result: JSON.stringify({ ...JSON.parse(null !== (b = e.getJob.result) && void 0 !== b ? b : "{}"), success: t.length + (null !== (f = JSON.parse(null !== (k = e.getJob.result) && void 0 !== k ? k : "{}").success) && void 0 !== f ? f : 0), failed: a.length + (null !== (h = JSON.parse(null !== (T = e.getJob.result) && void 0 !== T ? T : "{}").failed) && void 0 !== h ? h : 0) }), failureReasons: [...null !== (S = e.getJob.failureReasons) && void 0 !== S ? S : [], ...r] } }
                    }); s.logger.info(`updateJobs result response: ${JSON.stringify(l)}`)
                } if (O.isCompleted) {
                    s.logger.info(`Completed fetching contacts for enterprise ${w}`); const n = L === l.JobType.DELETE_CONTACTS ? "Delete contacts have been deleted successfully" : `${{ [l.JobType.CAMPAIGNS]: "Campaigns", [l.JobType.CONTACTS]: "Contacts", [l.JobType.CONTACT_LIST]: "Contact List", [l.JobType.DYNAMICS_CONTACT]: "Dynamics Contact", [l.JobType.DYNAMICS_CONTACT_LIST]: "Dynamics Contact List", [l.JobType.FLOWS]: "Flows" }[L] || L} has been uploaded successfully`, e = await p.default.mutate({
                        mutation: i.gql`
          ${c.updateJob}
        `, variables: { input: { jobId: M, enterpriseId: w, mode: G, status: l.JobStatus.SUCCESS, read: !1, description: n } }
                    }); s.logger.info(`updateJobs response: ${JSON.stringify(e)}`)
                } return { ...n, items: O.items.map((e => { var t, a, i, o; return { __typename: n.input.type, enterpriseId: w, channel: null !== (t = e.channel) && void 0 !== t ? t : l.CHANNEL.WHATSAPP, channelId: null !== (a = e.channelId) && void 0 !== a ? a : e.phone, variables: e, mode: G, parent: null !== (i = e.parent) && void 0 !== i ? i : l.SAAS.WHATSAPP, parentId: null !== (o = e.parentId) && void 0 !== o ? o : e.phone } })), nextToken: null !== (D = O.nextToken) && void 0 !== D ? D : O.nextUrl, isCompleted: O.isCompleted }
            } catch (v) { throw s.logger.error(`error occurred while fetching contacts : ${JSON.stringify(v)}`), v }
        })).use((0, r.captureLambdaHandler)(s.tracer)).use((0, o.injectLambdaContext)(s.logger, { logEvent: !0, clearState: !0 })).use((0, d.logMetrics)(s.metrics))
    }, n => { n.exports = require("@apollo/client") }, n => { n.exports = require("@aws-lambda-powertools/logger") }, n => { n.exports = require("@aws-lambda-powertools/metrics") }, n => { n.exports = require("@aws-lambda-powertools/tracer") }, (n, e, t) => { var a; Object.defineProperty(e, "__esModule", { value: !0 }), e.metrics = e.logger = e.tracer = void 0; const i = t(2), o = t(3), d = new (t(4).Tracer)({ serviceName: process.env.AWS_LAMBDA_FUNCTION_NAME }); e.tracer = d; const r = new i.Logger({ serviceName: process.env.AWS_LAMBDA_FUNCTION_NAME, logLevel: null !== (a = process.env.LOG_LEVEL) && void 0 !== a ? a : "info" }); e.logger = r; const s = new o.Metrics({ namespace: process.env.ENV, serviceName: process.env.AWS_LAMBDA_FUNCTION_NAME }); e.metrics = s }, (n, e, t) => { Object.defineProperty(e, "__esModule", { value: !0 }); const a = t(1), i = t(7), o = t(5), d = new i.RetryLink({ delay: { initial: 200, max: 1e3, jitter: !0 }, attempts: { max: 5, retryIf: (n, e) => { var t, a, i, d, r, s, p; return o.logger.warn(`In middleware request after error: ${null === (t = null == n ? void 0 : n.cause) || void 0 === t ? void 0 : t.code} in operation: ${JSON.stringify(e)}`), ("ECONNRESET" === (null === (a = null == n ? void 0 : n.cause) || void 0 === a ? void 0 : a.code) || "ECONNREFUSED" === (null === (i = null == n ? void 0 : n.cause) || void 0 === i ? void 0 : i.code) || "ECONNABORTED" === (null === (d = null == n ? void 0 : n.cause) || void 0 === d ? void 0 : d.code) || "ENOTFOUND" === (null === (r = null == n ? void 0 : n.cause) || void 0 === r ? void 0 : r.code) || "UND_ERR_SOCKET" === (null === (s = null == n ? void 0 : n.cause) || void 0 === s ? void 0 : s.code) || "ETIMEDOUT" === (null === (p = null == n ? void 0 : n.cause) || void 0 === p ? void 0 : p.code)) && (o.logger.warn("Retrying request after error"), !0) } } }), r = new a.HttpLink({ uri: process.env.API_HALO_GRAPHQLAPIENDPOINTOUTPUT, headers: { "x-api-key": process.env.API_HALO_GRAPHQLAPIKEYOUTPUT, "Accept-Encoding": "gzip" } }), s = new a.ApolloClient({ link: (0, a.from)([d, r]), cache: new a.InMemoryCache, defaultOptions: { query: { fetchPolicy: "no-cache", errorPolicy: "all" } } }); e.default = s }, n => { n.exports = require("@apollo/client/link/retry") }, (n, e) => { var t, a, i, o, d, r, s, p, l, c, I, m, u, g, A, $, y, _, C, b, k, f, T, h, S, D, v, M, w, x, L, N, U, B, F, E, R, G, O, W, P, q, V, K, H, J, z, Z, j, Y, Q, X, nn, en, tn, an, on, dn, rn, sn, pn, ln, cn, In, mn, un, gn, An, $n, yn, _n, Cn, bn, kn, fn, Tn, hn, Sn, Dn, vn; Object.defineProperty(e, "__esModule", { value: !0 }), e.SearchableCampaignAuditTrailAggregateField = e.SearchableCampaignAuditTrailSortableFields = e.SearchableCampaignContactGroupAggregateField = e.SearchableCampaignContactGroupSortableFields = e.ImportExportType = e.OperationType = e.Operation = e.LEX_BUILD = e.TableType = e.SearchableMissedUtteranceAggregateField = e.SearchableMissedUtteranceSortableFields = e.SearchableEventLabelAggregateField = e.SearchableEventLabelSortableFields = e.EventLabelType = e.SearchableCustomerAggregateField = e.SearchableCustomerSortableFields = e.SearchableCampaignMessageAggregateField = e.SearchableCampaignMessageSortableFields = e.SearchableCampaignAggregateField = e.SearchableCampaignSortableFields = e.ModelSortDirection = e.SearchableBroadcastMessageAggregateField = e.SearchableAggregateType = e.SearchableSortDirection = e.SearchableBroadcastMessageSortableFields = e.BotStatus = e.ERROR_TYPE = e.HEALTH_STATUS = e.FEDERATED_ROLE = e.SESSION_INITIATED_BY = e.WA_FLOW_STATUS = e.ASSIGNMENT = e.CampaignStatus = e.ResponseSyncStatus = e.BroadcastMessageStatus = e.BroadcastStatus = e.LinkedAppStatus = e.CampaignMessageStatus = e.TemplateTypes = e.WA_TEMPLATE_STATUS = e.TemplateCategory = e.SAAS = e.JobType = e.JobStatus = e.CATEGORY = e.AVAILABILITY = e.CHANNEL = e.ScheduleNodeStatus = e.ModelAttributeTypes = e.MODE = void 0, e.SearchableDatabaseValuesAggregateField = e.SearchableDatabaseValuesSortableFields = e.SearchableIntentAggregateField = e.SearchableIntentSortableFields = e.SearchableUserAggregateField = e.SearchableUserSortableFields = e.SearchableSessionAggregateField = e.SearchableSessionSortableFields = e.SearchableBroadcastAggregateField = e.SearchableBroadcastSortableFields = e.SearchableLinkedAppCollectionAggregateField = e.SearchableLinkedAppCollectionSortableFields = e.SearchableLinkedAppCatalogueAggregateField = e.SearchableLinkedAppCatalogueSortableFields = e.SearchableCollectionCatalogueAggregateField = e.SearchableCollectionCatalogueSortableFields = e.SearchableCollectionAggregateField = e.SearchableCollectionSortableFields = e.SearchableCatalogueAggregateField = e.SearchableCatalogueSortableFields = e.SearchableLinkedAppMessageAggregateField = e.SearchableLinkedAppMessageSortableFields = e.SearchableHealthTableAggregateField = e.SearchableHealthTableSortableFields = e.SearchableCustomerContactGroupAggregateField = e.SearchableCustomerContactGroupSortableFields = e.SearchableContactGroupAggregateField = e.SearchableContactGroupSortableFields = e.SearchableCampaignApproverAggregateField = e.SearchableCampaignApproverSortableFields = void 0, function (n) { n.LIVE = "LIVE", n.TEST = "TEST" }(t || (e.MODE = t = {})), function (n) { n.binary = "binary", n.binarySet = "binarySet", n.bool = "bool", n.list = "list", n.map = "map", n.number = "number", n.numberSet = "numberSet", n.string = "string", n.stringSet = "stringSet", n._null = "_null" }(a || (e.ModelAttributeTypes = a = {})), function (n) { n.PENDING = "PENDING", n.EXECUTED = "EXECUTED" }(i || (e.ScheduleNodeStatus = i = {})), function (n) { n.WEB = "WEB", n.WHATSAPP = "WHATSAPP", n.FACEBOOK = "FACEBOOK", n.INSTAGRAM = "INSTAGRAM", n.GBM = "GBM" }(o || (e.CHANNEL = o = {})), function (n) { n.AVAILABLE = "AVAILABLE", n.BUSY = "BUSY", n.AWAY = "AWAY", n.OFFLINE = "OFFLINE" }(d || (e.AVAILABILITY = d = {})), function (n) { n.DASHBOARD = "DASHBOARD", n.CUSTOMER_HUB = "CUSTOMER_HUB", n.CONVERSATIONS = "CONVERSATIONS", n.ANALYTICS = "ANALYTICS", n.BUILDER = "BUILDER", n.CAMPAIGN_MANAGER = "CAMPAIGN_MANAGER", n.SYSTEM = "SYSTEM", n.JOB = "JOB", n.OBA = "OBA", n.LINKED_APP = "LINKED_APP" }(r || (e.CATEGORY = r = {})), function (n) { n.SUCCESS = "SUCCESS", n.FAILED = "FAILED", n.ABORTED = "ABORTED", n.IN_PROGRESS = "IN_PROGRESS" }(s || (e.JobStatus = s = {})), function (n) { n.CONTACTS = "CONTACTS", n.DELETE_CONTACTS = "DELETE_CONTACTS", n.FLOWS = "FLOWS", n.CAMPAIGNS = "CAMPAIGNS", n.CONTACT_LIST = "CONTACT_LIST", n.DYNAMICS_CONTACT_LIST = "DYNAMICS_CONTACT_LIST", n.DYNAMICS_CONTACT = "DYNAMICS_CONTACT" }(p || (e.JobType = p = {})), function (n) { n.SHOPIFY = "SHOPIFY", n.WOOCOMMERCE = "WOOCOMMERCE", n.MAGENTO = "MAGENTO", n.SALESFORCE = "SALESFORCE", n.HUBSPOT = "HUBSPOT", n.MS_DYNAMICS_CRM = "MS_DYNAMICS_CRM", n.WHATSAPP = "WHATSAPP", n.GOOGLE_CALENDAR = "GOOGLE_CALENDAR", n.ICAL = "ICAL", n.GOOGLE_SHEETS = "GOOGLE_SHEETS" }(l || (e.SAAS = l = {})), function (n) { n.MARKETING = "MARKETING", n.UTILITY = "UTILITY", n.AUTHENTICATION = "AUTHENTICATION" }(c || (e.TemplateCategory = c = {})), function (n) { n.APPROVED = "APPROVED", n.PENDING = "PENDING", n.DISABLED = "DISABLED", n.PAUSED = "PAUSED", n.REJECTED = "REJECTED", n.IN_REVIEW = "IN_REVIEW" }(I || (e.WA_TEMPLATE_STATUS = I = {})), function (n) { n.AUTHENTICATION = "AUTHENTICATION", n.CATALOG = "CATALOG", n.MPM = "MPM", n.LTO = "LTO", n.CAROUSEL = "CAROUSEL", n.COUPON = "COUPON", n.MARKETING = "MARKETING", n.UTILITY = "UTILITY" }(m || (e.TemplateTypes = m = {})), function (n) { n.SCHEDULED = "SCHEDULED", n.ACTIVE = "ACTIVE", n.PAUSED = "PAUSED", n.ABORTED = "ABORTED", n.SENT = "SENT", n.DELIVERED = "DELIVERED", n.READ = "READ", n.RESPONDED = "RESPONDED", n.RETRY = "RETRY", n.ERROR = "ERROR" }(u || (e.CampaignMessageStatus = u = {})), function (n) { n.ACTIVE = "ACTIVE", n.INVITED = "INVITED", n.REINVITE = "REINVITE", n.SYNCHRONIZING = "SYNCHRONIZING", n.DISCONNECTED = "DISCONNECTED", n.INACTIVE = "INACTIVE" }(g || (e.LinkedAppStatus = g = {})), function (n) { n.SCHEDULED = "SCHEDULED", n.ACTIVE = "ACTIVE", n.PAUSED = "PAUSED", n.ABORTED = "ABORTED", n.COMPLETED = "COMPLETED" }(A || (e.BroadcastStatus = A = {})), function (n) { n.SCHEDULED = "SCHEDULED", n.ACTIVE = "ACTIVE", n.PAUSED = "PAUSED", n.ABORTED = "ABORTED", n.SENT = "SENT", n.DELIVERED = "DELIVERED", n.READ = "READ", n.RESPONDED = "RESPONDED", n.ERROR = "ERROR" }($ || (e.BroadcastMessageStatus = $ = {})), function (n) { n.PENDING = "PENDING", n.SUCCESS = "SUCCESS", n.FAILED = "FAILED" }(y || (e.ResponseSyncStatus = y = {})), function (n) { n.SCHEDULED = "SCHEDULED", n.IN_PROGRESS = "IN_PROGRESS", n.PAUSED = "PAUSED", n.ABORTED = "ABORTED", n.COMPLETED = "COMPLETED", n.IN_REVIEW = "IN_REVIEW", n.APPROVED = "APPROVED", n.REJECTED = "REJECTED" }(_ || (e.CampaignStatus = _ = {})), function (n) { n.BOT = "BOT", n.AGENT = "AGENT", n.CUSTOMER = "CUSTOMER", n.ACTION = "ACTION", n.FEDERATED_LIVE = "FEDERATED_LIVE", n.LINKED_APP = "LINKED_APP" }(C || (e.ASSIGNMENT = C = {})), function (n) { n.DRAFT = "DRAFT", n.PUBLISHED = "PUBLISHED", n.DEPRECATED = "DEPRECATED", n.BLOCKED = "BLOCKED", n.THROTTLED = "THROTTLED" }(b || (e.WA_FLOW_STATUS = b = {})), function (n) { n.CUSTOMER = "CUSTOMER", n.AGENT = "AGENT", n.CAMPAIGN = "CAMPAIGN", n.AI = "AI", n.WEBHOOK = "WEBHOOK", n.SAAS_TRIGGER = "SAAS_TRIGGER" }(k || (e.SESSION_INITIATED_BY = k = {})), function (n) { n.USER = "USER", n.AGENT = "AGENT" }(f || (e.FEDERATED_ROLE = f = {})), function (n) { n.OPEN = "OPEN", n.CLOSED = "CLOSED" }(T || (e.HEALTH_STATUS = T = {})), function (n) { n.WHATSAPP_CLOUD_API = "WHATSAPP_CLOUD_API", n.INFRASTRUCTURE = "INFRASTRUCTURE", n.APPLICATION = "APPLICATION", n.FEDERATED_AND_LINKED_APPS = "FEDERATED_AND_LINKED_APPS" }(h || (e.ERROR_TYPE = h = {})), function (n) { n.SUCCESS = "SUCCESS", n.FAILURE = "FAILURE", n.TRAINING = "TRAINING" }(S || (e.BotStatus = S = {})), function (n) { n.enterpriseId = "enterpriseId", n.broadcastMessageId = "broadcastMessageId", n.linkedAppId = "linkedAppId", n.customerId = "customerId", n.scheduleTime = "scheduleTime", n.broadcastId = "broadcastId", n.waMessageId = "waMessageId", n.meta = "meta", n.timeToRespond = "timeToRespond", n.isCatalogue = "isCatalogue", n.catalogItems = "catalogItems", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(D || (e.SearchableBroadcastMessageSortableFields = D = {})), function (n) { n.asc = "asc", n.desc = "desc" }(v || (e.SearchableSortDirection = v = {})), function (n) { n.terms = "terms", n.avg = "avg", n.min = "min", n.max = "max", n.sum = "sum" }(M || (e.SearchableAggregateType = M = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.broadcastMessageId = "broadcastMessageId", n.linkedAppId = "linkedAppId", n.customerId = "customerId", n.scheduleTime = "scheduleTime", n.broadcastId = "broadcastId", n.waMessageId = "waMessageId", n.status = "status", n.meta = "meta", n.timeToRespond = "timeToRespond", n.isCatalogue = "isCatalogue", n.catalogItems = "catalogItems", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(w || (e.SearchableBroadcastMessageAggregateField = w = {})), function (n) { n.ASC = "ASC", n.DESC = "DESC" }(x || (e.ModelSortDirection = x = {})), function (n) { n.enterpriseId = "enterpriseId", n.campaignId = "campaignId", n.name = "name", n.type = "type", n.createdById = "createdById", n.segment = "segment", n.flowId = "flowId", n.integrationId = "integrationId", n.scheduleTime = "scheduleTime", n.variables = "variables", n.lastResponseSyncTime = "lastResponseSyncTime", n.advancedConfig = "advancedConfig", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(L || (e.SearchableCampaignSortableFields = L = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.campaignId = "campaignId", n.name = "name", n.type = "type", n.createdById = "createdById", n.segment = "segment", n.flowId = "flowId", n.integrationId = "integrationId", n.scheduleTime = "scheduleTime", n.variables = "variables", n.lastResponseSyncTime = "lastResponseSyncTime", n.responseSyncStatus = "responseSyncStatus", n.status = "status", n.advancedConfig = "advancedConfig", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(N || (e.SearchableCampaignAggregateField = N = {})), function (n) { n.enterpriseId = "enterpriseId", n.campaignMessageId = "campaignMessageId", n.scheduleTime = "scheduleTime", n.campaignId = "campaignId", n.integrationId = "integrationId", n.createdAt = "createdAt", n.updatedAt = "updatedAt", n.sessionId = "sessionId", n.customerId = "customerId", n.isForApproval = "isForApproval", n.meta = "meta", n.timeToRespond = "timeToRespond", n.retryCount = "retryCount" }(U || (e.SearchableCampaignMessageSortableFields = U = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.campaignMessageId = "campaignMessageId", n.scheduleTime = "scheduleTime", n.campaignId = "campaignId", n.integrationId = "integrationId", n.createdAt = "createdAt", n.updatedAt = "updatedAt", n.sessionId = "sessionId", n.customerId = "customerId", n.status = "status", n.isForApproval = "isForApproval", n.meta = "meta", n.channel = "channel", n.timeToRespond = "timeToRespond", n.retryCount = "retryCount" }(B || (e.SearchableCampaignMessageAggregateField = B = {})), function (n) { n.enterpriseId = "enterpriseId", n.customerId = "customerId", n.name = "name", n.email = "email", n.firstName = "firstName", n.lastName = "lastName", n.variables = "variables", n.tags = "tags", n.parentId = "parentId", n.createdAt = "createdAt", n.updatedAt = "updatedAt", n.blacklisted = "blacklisted", n.blacklistReason = "blacklistReason", n.blacklistedAt = "blacklistedAt" }(F || (e.SearchableCustomerSortableFields = F = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.customerId = "customerId", n.name = "name", n.email = "email", n.firstName = "firstName", n.lastName = "lastName", n.variables = "variables", n.tags = "tags", n.parent = "parent", n.parentId = "parentId", n.createdAt = "createdAt", n.updatedAt = "updatedAt", n.blacklisted = "blacklisted", n.blacklistReason = "blacklistReason", n.blacklistedAt = "blacklistedAt" }(E || (e.SearchableCustomerAggregateField = E = {})), function (n) { n.DATA_POINT = "DATA_POINT", n.BUSINESS_GOAL = "BUSINESS_GOAL", n.QUESTION = "QUESTION" }(R || (e.EventLabelType = R = {})), function (n) { n.enterpriseId = "enterpriseId", n.labelId = "labelId", n.createdAt = "createdAt", n.updatedAt = "updatedAt", n.conversationId = "conversationId", n.sessionId = "sessionId", n.interactionId = "interactionId", n.flowId = "flowId", n.nodeId = "nodeId", n.campaignId = "campaignId", n.customerId = "customerId", n.workspaceId = "workspaceId", n.label = "label", n.value = "value", n.previousLabel = "previousLabel", n.previousValue = "previousValue" }(G || (e.SearchableEventLabelSortableFields = G = {})), function (n) { n.enterpriseId = "enterpriseId", n.labelId = "labelId", n.mode = "mode", n.createdAt = "createdAt", n.updatedAt = "updatedAt", n.conversationId = "conversationId", n.sessionId = "sessionId", n.interactionId = "interactionId", n.flowId = "flowId", n.nodeId = "nodeId", n.campaignId = "campaignId", n.customerId = "customerId", n.workspaceId = "workspaceId", n.type = "type", n.label = "label", n.value = "value", n.previousLabel = "previousLabel", n.previousValue = "previousValue" }(O || (e.SearchableEventLabelAggregateField = O = {})), function (n) { n.enterpriseId = "enterpriseId", n.missedUtteranceId = "missedUtteranceId", n.utterance = "utterance", n.confidence = "confidence", n.workspaceId = "workspaceId", n.updatedAt = "updatedAt", n.nodeId = "nodeId", n.createdAt = "createdAt" }(W || (e.SearchableMissedUtteranceSortableFields = W = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.missedUtteranceId = "missedUtteranceId", n.utterance = "utterance", n.confidence = "confidence", n.channel = "channel", n.workspaceId = "workspaceId", n.updatedAt = "updatedAt", n.nodeId = "nodeId", n.createdAt = "createdAt" }(P || (e.SearchableMissedUtteranceAggregateField = P = {})), function (n) { n.CONTACTS = "CONTACTS", n.DATABASE = "DATABASE", n.CUSTOMER_HUB = "CUSTOMER_HUB", n.LINKED_APPS = "LINKED_APPS", n.CATALOGUES = "CATALOGUES", n.COLLECTIONS = "COLLECTIONS", n.LINKED_APP_CATALOGUES = "LINKED_APP_CATALOGUES", n.LINKED_APP_COLLECTIONS = "LINKED_APP_COLLECTIONS", n.CAMPAIGNS = "CAMPAIGNS", n.CAMPAIGN_MESSAGES = "CAMPAIGN_MESSAGES", n.LINKED_APP_CAMPAIGNS = "LINKED_APP_CAMPAIGNS" }(q || (e.TableType = q = {})), function (n) { n.BUILD = "BUILD", n.PUBLISH = "PUBLISH", n.UTTERANCES = "UTTERANCES" }(V || (e.LEX_BUILD = V = {})), function (n) { n.EXPORT = "EXPORT", n.IMPORT = "IMPORT", n.PUBLISH_PREVIEW = "PUBLISH_PREVIEW", n.PUBLISH = "PUBLISH", n.DUPLICATE = "DUPLICATE" }(K || (e.Operation = K = {})), function (n) { n.TEMPLATE = "TEMPLATE", n.FILE = "FILE" }(H || (e.OperationType = H = {})), function (n) { n.WORKSPACE = "WORKSPACE", n.FLOW = "FLOW", n.INTERACTION = "INTERACTION" }(J || (e.ImportExportType = J = {})), function (n) { n.enterpriseId = "enterpriseId", n.campaignId = "campaignId", n.contactGroupId = "contactGroupId", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(z || (e.SearchableCampaignContactGroupSortableFields = z = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.campaignId = "campaignId", n.contactGroupId = "contactGroupId", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(Z || (e.SearchableCampaignContactGroupAggregateField = Z = {})), function (n) { n.enterpriseId = "enterpriseId", n.auditTrailId = "auditTrailId", n.campaignId = "campaignId", n.approverId = "approverId", n.senderId = "senderId", n.note = "note", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(j || (e.SearchableCampaignAuditTrailSortableFields = j = {})), function (n) { n.enterpriseId = "enterpriseId", n.auditTrailId = "auditTrailId", n.campaignId = "campaignId", n.approverId = "approverId", n.senderId = "senderId", n.mode = "mode", n.status = "status", n.note = "note", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(Y || (e.SearchableCampaignAuditTrailAggregateField = Y = {})), function (n) { n.enterpriseId = "enterpriseId", n.campaignId = "campaignId", n.approverId = "approverId", n.number = "number", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(Q || (e.SearchableCampaignApproverSortableFields = Q = {})), function (n) { n.enterpriseId = "enterpriseId", n.campaignId = "campaignId", n.approverId = "approverId", n.number = "number", n.mode = "mode", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(X || (e.SearchableCampaignApproverAggregateField = X = {})), function (n) { n.enterpriseId = "enterpriseId", n.contactGroupId = "contactGroupId", n.name = "name", n.updatedAt = "updatedAt", n.dynamic = "dynamic", n.linkedAppId = "linkedAppId", n.createdAt = "createdAt" }(nn || (e.SearchableContactGroupSortableFields = nn = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.contactGroupId = "contactGroupId", n.name = "name", n.updatedAt = "updatedAt", n.dynamic = "dynamic", n.linkedAppId = "linkedAppId", n.createdAt = "createdAt" }(en || (e.SearchableContactGroupAggregateField = en = {})), function (n) { n.enterpriseId = "enterpriseId", n.customerId = "customerId", n.contactGroupId = "contactGroupId", n.updatedAt = "updatedAt", n.createdAt = "createdAt" }(tn || (e.SearchableCustomerContactGroupSortableFields = tn = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.customerId = "customerId", n.contactGroupId = "contactGroupId", n.updatedAt = "updatedAt", n.createdAt = "createdAt" }(an || (e.SearchableCustomerContactGroupAggregateField = an = {})), function (n) { n.enterpriseId = "enterpriseId", n.healthTableId = "healthTableId", n.title = "title", n.read = "read", n.count = "count", n.nodeId = "nodeId", n.userId = "userId", n.description = "description", n.functionOrigin = "functionOrigin", n.subType = "subType", n.updatedAt = "updatedAt", n.createdAt = "createdAt", n.link = "link", n.config = "config", n.checkFlag = "checkFlag" }(on || (e.SearchableHealthTableSortableFields = on = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.healthTableId = "healthTableId", n.title = "title", n.read = "read", n.count = "count", n.status = "status", n.nodeId = "nodeId", n.userId = "userId", n.description = "description", n.functionOrigin = "functionOrigin", n.type = "type", n.subType = "subType", n.channel = "channel", n.updatedAt = "updatedAt", n.createdAt = "createdAt", n.link = "link", n.config = "config", n.checkFlag = "checkFlag" }(dn || (e.SearchableHealthTableAggregateField = dn = {})), function (n) { n.enterpriseId = "enterpriseId", n.waMessageId = "waMessageId", n.message = "message", n.updatedAt = "updatedAt", n.createdAt = "createdAt", n.linkedAppId = "linkedAppId", n.customerId = "customerId" }(rn || (e.SearchableLinkedAppMessageSortableFields = rn = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.waMessageId = "waMessageId", n.message = "message", n.updatedAt = "updatedAt", n.createdAt = "createdAt", n.linkedAppId = "linkedAppId", n.customerId = "customerId" }(sn || (e.SearchableLinkedAppMessageAggregateField = sn = {})), function (n) { n.enterpriseId = "enterpriseId", n.catalogueId = "catalogueId", n.images = "images", n.name = "name", n.description = "description", n.price = "price", n.link = "link", n.itemCode = "itemCode", n.hide = "hide", n.countryOfOrigin = "countryOfOrigin", n.otherAttributes = "otherAttributes", n.updatedAt = "updatedAt", n.integrationId = "integrationId", n.retailerId = "retailerId", n.metaCatalogueId = "metaCatalogueId", n.createdAt = "createdAt" }(pn || (e.SearchableCatalogueSortableFields = pn = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.catalogueId = "catalogueId", n.images = "images", n.name = "name", n.description = "description", n.price = "price", n.link = "link", n.itemCode = "itemCode", n.hide = "hide", n.countryOfOrigin = "countryOfOrigin", n.otherAttributes = "otherAttributes", n.updatedAt = "updatedAt", n.integrationId = "integrationId", n.retailerId = "retailerId", n.metaCatalogueId = "metaCatalogueId", n.createdAt = "createdAt" }(ln || (e.SearchableCatalogueAggregateField = ln = {})), function (n) { n.enterpriseId = "enterpriseId", n.collectionId = "collectionId", n.title = "title", n.status = "status", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(cn || (e.SearchableCollectionSortableFields = cn = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.collectionId = "collectionId", n.title = "title", n.status = "status", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(In || (e.SearchableCollectionAggregateField = In = {})), function (n) { n.enterpriseId = "enterpriseId", n.collectionId = "collectionId", n.catalogueId = "catalogueId", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(mn || (e.SearchableCollectionCatalogueSortableFields = mn = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.collectionId = "collectionId", n.catalogueId = "catalogueId", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(un || (e.SearchableCollectionCatalogueAggregateField = un = {})), function (n) { n.enterpriseId = "enterpriseId", n.waLinkedAppCatalogueId = "waLinkedAppCatalogueId", n.hide = "hide", n.linkedAppId = "linkedAppId", n.catalogueId = "catalogueId", n.status = "status", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(gn || (e.SearchableLinkedAppCatalogueSortableFields = gn = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.waLinkedAppCatalogueId = "waLinkedAppCatalogueId", n.hide = "hide", n.linkedAppId = "linkedAppId", n.catalogueId = "catalogueId", n.status = "status", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(An || (e.SearchableLinkedAppCatalogueAggregateField = An = {})), function (n) { n.enterpriseId = "enterpriseId", n.waLinkedAppCollectionId = "waLinkedAppCollectionId", n.linkedAppId = "linkedAppId", n.collectionId = "collectionId", n.status = "status", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }($n || (e.SearchableLinkedAppCollectionSortableFields = $n = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.waLinkedAppCollectionId = "waLinkedAppCollectionId", n.linkedAppId = "linkedAppId", n.collectionId = "collectionId", n.status = "status", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(yn || (e.SearchableLinkedAppCollectionAggregateField = yn = {})), function (n) { n.enterpriseId = "enterpriseId", n.broadcastId = "broadcastId", n.name = "name", n.scheduleTime = "scheduleTime", n.senderReceiver = "senderReceiver", n.advancedConfig = "advancedConfig", n.message = "message", n.asset = "asset", n.isCatalogue = "isCatalogue", n.catalogItems = "catalogItems", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(_n || (e.SearchableBroadcastSortableFields = _n = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.broadcastId = "broadcastId", n.name = "name", n.scheduleTime = "scheduleTime", n.status = "status", n.senderReceiver = "senderReceiver", n.advancedConfig = "advancedConfig", n.message = "message", n.asset = "asset", n.isCatalogue = "isCatalogue", n.catalogItems = "catalogItems", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(Cn || (e.SearchableBroadcastAggregateField = Cn = {})), function (n) { n.enterpriseId = "enterpriseId", n.sessionId = "sessionId", n.customerId = "customerId", n.workspaceId = "workspaceId", n.flowId = "flowId", n.integrationId = "integrationId", n.updatedAt = "updatedAt", n.createdAt = "createdAt", n.tags = "tags", n.currentNodeId = "currentNodeId", n.nextNodeId = "nextNodeId", n.variables = "variables", n.agentId = "agentId", n.preview = "preview", n.nodeId = "nodeId", n.validationCount = "validationCount", n.campaignMessageId = "campaignMessageId", n.active = "active", n.federatedLiveToCustomerId = "federatedLiveToCustomerId", n.healthTableId = "healthTableId", n.metaConversationId = "metaConversationId", n.referrer = "referrer", n.referrerType = "referrerType" }(bn || (e.SearchableSessionSortableFields = bn = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.sessionId = "sessionId", n.customerId = "customerId", n.workspaceId = "workspaceId", n.flowId = "flowId", n.integrationId = "integrationId", n.channel = "channel", n.updatedAt = "updatedAt", n.createdAt = "createdAt", n.assignment = "assignment", n.tags = "tags", n.currentNodeId = "currentNodeId", n.nextNodeId = "nextNodeId", n.variables = "variables", n.agentId = "agentId", n.preview = "preview", n.nodeId = "nodeId", n.validationCount = "validationCount", n.campaignMessageId = "campaignMessageId", n.active = "active", n.initiatedBy = "initiatedBy", n.federatedLiveToCustomerId = "federatedLiveToCustomerId", n.federatedRole = "federatedRole", n.healthTableId = "healthTableId", n.metaConversationId = "metaConversationId", n.referrer = "referrer", n.referrerType = "referrerType" }(kn || (e.SearchableSessionAggregateField = kn = {})), function (n) { n.enterpriseId = "enterpriseId", n.userId = "userId", n.email = "email", n.name = "name", n.number = "number", n.lName = "lName", n.avatarUrl = "avatarUrl", n.roleId = "roleId", n.lastSignIn = "lastSignIn", n.active = "active", n.browserToken = "browserToken", n.isLoggedIn = "isLoggedIn", n.updatedAt = "updatedAt", n.profileDetails = "profileDetails", n.notificationConfig = "notificationConfig", n.inviterUserIdClerk = "inviterUserIdClerk", n.clerkUserId = "clerkUserId", n.createdAt = "createdAt" }(fn || (e.SearchableUserSortableFields = fn = {})), function (n) { n.enterpriseId = "enterpriseId", n.userId = "userId", n.email = "email", n.name = "name", n.number = "number", n.lName = "lName", n.avatarUrl = "avatarUrl", n.roleId = "roleId", n.lastSignIn = "lastSignIn", n.active = "active", n.availability = "availability", n.browserToken = "browserToken", n.isLoggedIn = "isLoggedIn", n.updatedAt = "updatedAt", n.profileDetails = "profileDetails", n.notificationConfig = "notificationConfig", n.inviterUserIdClerk = "inviterUserIdClerk", n.clerkUserId = "clerkUserId", n.createdAt = "createdAt" }(Tn || (e.SearchableUserAggregateField = Tn = {})), function (n) { n.enterpriseId = "enterpriseId", n.intentId = "intentId", n.name = "name", n.utterance = "utterance", n.workspaceId = "workspaceId", n.lexIntentId = "lexIntentId", n.nodeId = "nodeId", n.updatedAt = "updatedAt", n.slots = "slots", n.createdAt = "createdAt" }(hn || (e.SearchableIntentSortableFields = hn = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.intentId = "intentId", n.name = "name", n.utterance = "utterance", n.workspaceId = "workspaceId", n.lexIntentId = "lexIntentId", n.nodeId = "nodeId", n.updatedAt = "updatedAt", n.slots = "slots", n.createdAt = "createdAt" }(Sn || (e.SearchableIntentAggregateField = Sn = {})), function (n) { n.enterpriseId = "enterpriseId", n.databaseValuesId = "databaseValuesId", n.value = "value", n.databaseSchemaId = "databaseSchemaId", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(Dn || (e.SearchableDatabaseValuesSortableFields = Dn = {})), function (n) { n.enterpriseId = "enterpriseId", n.mode = "mode", n.databaseValuesId = "databaseValuesId", n.value = "value", n.databaseSchemaId = "databaseSchemaId", n.createdAt = "createdAt", n.updatedAt = "updatedAt" }(vn || (e.SearchableDatabaseValuesAggregateField = vn = {})) }, (n, e) => { Object.defineProperty(e, "__esModule", { value: !0 }), e.updateFlowTemplate = e.createFlowTemplate = e.deleteTemplates = e.updateTemplates = e.createTemplates = e.deleteMetaCatalogue = e.updateMetaCatalogue = e.createMetaCatalogue = e.deleteWhatsappFlows = e.updateWhatsappFlows = e.createWhatsappFlows = e.deleteIntegration = e.updateIntegration = e.createIntegration = e.deleteTableViews = e.updateTableViews = e.createTableViews = e.deleteEnterprise = e.updateEnterprise = e.createEnterprise = e.deleteOrganization = e.updateOrganization = e.createOrganization = e.deleteCustomerContactGroup = e.updateCustomerContactGroup = e.createCustomerContactGroup = e.deleteContactGroup = e.updateContactGroup = e.createContactGroup = e.deleteProfile = e.updateProfile = e.createProfile = e.deleteCustomer = e.updateCustomer = e.createCustomer = e.deleteCampaignApprover = e.updateCampaignApprover = e.createCampaignApprover = e.deleteCampaignAuditTrail = e.updateCampaignAuditTrail = e.createCampaignAuditTrail = e.deleteCampaignContactGroup = e.updateCampaignContactGroup = e.createCampaignContactGroup = e.deleteCampaignMessage = e.updateCampaignMessage = e.createCampaignMessage = e.deleteCampaign = e.updateCampaign = e.createCampaign = void 0, e.createBroadcastMessage = e.deleteBroadcast = e.updateBroadcast = e.createBroadcast = e.deleteLinkedAppCollection = e.updateLinkedAppCollection = e.createLinkedAppCollection = e.deleteLinkedAppCatalogue = e.updateLinkedAppCatalogue = e.createLinkedAppCatalogue = e.deleteCollectionCatalogue = e.updateCollectionCatalogue = e.createCollectionCatalogue = e.deleteCollection = e.updateCollection = e.createCollection = e.deleteCatalogue = e.updateCatalogue = e.createCatalogue = e.deleteLinkedAppMessage = e.updateLinkedAppMessage = e.createLinkedAppMessage = e.deleteLinkedAppCustomer = e.updateLinkedAppCustomer = e.createLinkedAppCustomer = e.deleteLinkedApp = e.updateLinkedApp = e.createLinkedApp = e.deleteScheduleNode = e.updateScheduleNode = e.createScheduleNode = e.deleteNode = e.updateNode = e.createNode = e.deleteInteraction = e.updateInteraction = e.createInteraction = e.deleteFlow = e.updateFlow = e.createFlow = e.deleteHealthTable = e.updateHealthTable = e.createHealthTable = e.deleteAnalyticsDashboard = e.updateAnalyticsDashboard = e.createAnalyticsDashboard = e.deleteEventLabel = e.updateEventLabel = e.createEventLabel = e.deleteFlowTemplate = void 0, e.deleteDatabaseSchema = e.updateDatabaseSchema = e.createDatabaseSchema = e.deleteEntity = e.updateEntity = e.createEntity = e.deleteIntent = e.updateIntent = e.createIntent = e.deleteOutwardWebhook = e.updateOutwardWebhook = e.createOutwardWebhook = e.deleteApiGateWay = e.updateApiGateWay = e.createApiGateWay = e.deleteApi = e.updateApi = e.createApi = e.deleteWorkspace = e.updateWorkspace = e.createWorkspace = e.deleteJob = e.updateJob = e.createJob = e.deleteNotification = e.updateNotification = e.createNotification = e.deleteModule = e.updateModule = e.createModule = e.deletePermission = e.updatePermission = e.createPermission = e.deleteRole = e.updateRole = e.createRole = e.deleteUser = e.updateUser = e.createUser = e.deleteConversationInfo = e.updateConversationInfo = e.createConversationInfo = e.deleteConversation = e.updateConversation = e.createConversation = e.deleteSession = e.updateSession = e.createSession = e.deleteBroadcastMessage = e.updateBroadcastMessage = void 0, e.campaignResponse = e.checkIntentName = e.suggestedIntents = e.createGbmBot = e.addContactGroup = e.bulkUpload = e.importExport = e.createOrUpdatePermission = e.workspaceBuild = e.deleteNodeTransaction = e.createNodeTransaction = e.deleteEnterpriseRole = e.campaignSync = e.deleteTrigger = e.updateTrigger = e.createTrigger = e.deleteSaasTrigger = e.updateSaasTrigger = e.createSaasTrigger = e.deleteMissedUtterance = e.updateMissedUtterance = e.createMissedUtterance = e.deleteCloudFunctions = e.updateCloudFunctions = e.createCloudFunctions = e.deleteFileManagerFiles = e.updateFileManagerFiles = e.createFileManagerFiles = e.deleteDatabaseValues = e.updateDatabaseValues = e.createDatabaseValues = void 0, e.createCampaign = "\n  mutation CreateCampaign(\n    $input: CreateCampaignInput!\n    $condition: ModelCampaignConditionInput\n  ) {\n    createCampaign(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      campaignId\n      name\n      type\n      createdById\n      createdBy {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      segment\n      contactGroup {\n        nextToken\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      integrationId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      scheduleTime\n      variables\n      lastResponseSyncTime\n      responseSyncStatus\n      status\n      advancedConfig\n      campaignMessages {\n        nextToken\n        __typename\n      }\n      campaignApproverList {\n        nextToken\n        __typename\n      }\n      campaignAuditTrail {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateCampaign = "\n  mutation UpdateCampaign(\n    $input: UpdateCampaignInput!\n    $condition: ModelCampaignConditionInput\n  ) {\n    updateCampaign(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      campaignId\n      name\n      type\n      createdById\n      createdBy {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      segment\n      contactGroup {\n        nextToken\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      integrationId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      scheduleTime\n      variables\n      lastResponseSyncTime\n      responseSyncStatus\n      status\n      advancedConfig\n      campaignMessages {\n        nextToken\n        __typename\n      }\n      campaignApproverList {\n        nextToken\n        __typename\n      }\n      campaignAuditTrail {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteCampaign = "\n  mutation DeleteCampaign(\n    $input: DeleteCampaignInput!\n    $condition: ModelCampaignConditionInput\n  ) {\n    deleteCampaign(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      campaignId\n      name\n      type\n      createdById\n      createdBy {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      segment\n      contactGroup {\n        nextToken\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      integrationId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      scheduleTime\n      variables\n      lastResponseSyncTime\n      responseSyncStatus\n      status\n      advancedConfig\n      campaignMessages {\n        nextToken\n        __typename\n      }\n      campaignApproverList {\n        nextToken\n        __typename\n      }\n      campaignAuditTrail {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createCampaignMessage = "\n  mutation CreateCampaignMessage(\n    $input: CreateCampaignMessageInput!\n    $condition: ModelCampaignMessageConditionInput\n  ) {\n    createCampaignMessage(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      campaignMessageId\n      scheduleTime\n      campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      integrationId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      createdAt\n      updatedAt\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      status\n      isForApproval\n      meta\n      channel\n      timeToRespond\n      retryCount\n      __typename\n    }\n  }\n", e.updateCampaignMessage = "\n  mutation UpdateCampaignMessage(\n    $input: UpdateCampaignMessageInput!\n    $condition: ModelCampaignMessageConditionInput\n  ) {\n    updateCampaignMessage(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      campaignMessageId\n      scheduleTime\n      campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      integrationId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      createdAt\n      updatedAt\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      status\n      isForApproval\n      meta\n      channel\n      timeToRespond\n      retryCount\n      __typename\n    }\n  }\n", e.deleteCampaignMessage = "\n  mutation DeleteCampaignMessage(\n    $input: DeleteCampaignMessageInput!\n    $condition: ModelCampaignMessageConditionInput\n  ) {\n    deleteCampaignMessage(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      campaignMessageId\n      scheduleTime\n      campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      integrationId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      createdAt\n      updatedAt\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      status\n      isForApproval\n      meta\n      channel\n      timeToRespond\n      retryCount\n      __typename\n    }\n  }\n", e.createCampaignContactGroup = "\n  mutation CreateCampaignContactGroup(\n    $input: CreateCampaignContactGroupInput!\n    $condition: ModelCampaignContactGroupConditionInput\n  ) {\n    createCampaignContactGroup(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateCampaignContactGroup = "\n  mutation UpdateCampaignContactGroup(\n    $input: UpdateCampaignContactGroupInput!\n    $condition: ModelCampaignContactGroupConditionInput\n  ) {\n    updateCampaignContactGroup(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteCampaignContactGroup = "\n  mutation DeleteCampaignContactGroup(\n    $input: DeleteCampaignContactGroupInput!\n    $condition: ModelCampaignContactGroupConditionInput\n  ) {\n    deleteCampaignContactGroup(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createCampaignAuditTrail = "\n  mutation CreateCampaignAuditTrail(\n    $input: CreateCampaignAuditTrailInput!\n    $condition: ModelCampaignAuditTrailConditionInput\n  ) {\n    createCampaignAuditTrail(input: $input, condition: $condition) {\n      enterpriseId\n      auditTrailId\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      approverId\n      senderId\n      mode\n      sender {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      approver {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      status\n      note\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateCampaignAuditTrail = "\n  mutation UpdateCampaignAuditTrail(\n    $input: UpdateCampaignAuditTrailInput!\n    $condition: ModelCampaignAuditTrailConditionInput\n  ) {\n    updateCampaignAuditTrail(input: $input, condition: $condition) {\n      enterpriseId\n      auditTrailId\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      approverId\n      senderId\n      mode\n      sender {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      approver {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      status\n      note\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteCampaignAuditTrail = "\n  mutation DeleteCampaignAuditTrail(\n    $input: DeleteCampaignAuditTrailInput!\n    $condition: ModelCampaignAuditTrailConditionInput\n  ) {\n    deleteCampaignAuditTrail(input: $input, condition: $condition) {\n      enterpriseId\n      auditTrailId\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      approverId\n      senderId\n      mode\n      sender {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      approver {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      status\n      note\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createCampaignApprover = "\n  mutation CreateCampaignApprover(\n    $input: CreateCampaignApproverInput!\n    $condition: ModelCampaignApproverConditionInput\n  ) {\n    createCampaignApprover(input: $input, condition: $condition) {\n      enterpriseId\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      approverId\n      approver {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      number\n      mode\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateCampaignApprover = "\n  mutation UpdateCampaignApprover(\n    $input: UpdateCampaignApproverInput!\n    $condition: ModelCampaignApproverConditionInput\n  ) {\n    updateCampaignApprover(input: $input, condition: $condition) {\n      enterpriseId\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      approverId\n      approver {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      number\n      mode\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteCampaignApprover = "\n  mutation DeleteCampaignApprover(\n    $input: DeleteCampaignApproverInput!\n    $condition: ModelCampaignApproverConditionInput\n  ) {\n    deleteCampaignApprover(input: $input, condition: $condition) {\n      enterpriseId\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      approverId\n      approver {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      number\n      mode\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createCustomer = "\n  mutation CreateCustomer(\n    $input: CreateCustomerInput!\n    $condition: ModelCustomerConditionInput\n  ) {\n    createCustomer(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      customerId\n      name\n      email\n      firstName\n      lastName\n      variables\n      profile {\n        nextToken\n        __typename\n      }\n      tags\n      contactGroup {\n        nextToken\n        __typename\n      }\n      parent\n      parentId\n      sessionsByDate {\n        nextToken\n        __typename\n      }\n      conversationByDate {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      campaignMessage {\n        nextToken\n        __typename\n      }\n      federatedSessions {\n        nextToken\n        __typename\n      }\n      linkedApps {\n        nextToken\n        __typename\n      }\n      broadcastMessage {\n        nextToken\n        __typename\n      }\n      blacklisted\n      blacklistReason\n      blacklistedAt\n      __typename\n    }\n  }\n", e.updateCustomer = "\n  mutation UpdateCustomer(\n    $input: UpdateCustomerInput!\n    $condition: ModelCustomerConditionInput\n  ) {\n    updateCustomer(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      customerId\n      name\n      email\n      firstName\n      lastName\n      variables\n      profile {\n        nextToken\n        __typename\n      }\n      tags\n      contactGroup {\n        nextToken\n        __typename\n      }\n      parent\n      parentId\n      sessionsByDate {\n        nextToken\n        __typename\n      }\n      conversationByDate {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      campaignMessage {\n        nextToken\n        __typename\n      }\n      federatedSessions {\n        nextToken\n        __typename\n      }\n      linkedApps {\n        nextToken\n        __typename\n      }\n      broadcastMessage {\n        nextToken\n        __typename\n      }\n      blacklisted\n      blacklistReason\n      blacklistedAt\n      __typename\n    }\n  }\n", e.deleteCustomer = "\n  mutation DeleteCustomer(\n    $input: DeleteCustomerInput!\n    $condition: ModelCustomerConditionInput\n  ) {\n    deleteCustomer(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      customerId\n      name\n      email\n      firstName\n      lastName\n      variables\n      profile {\n        nextToken\n        __typename\n      }\n      tags\n      contactGroup {\n        nextToken\n        __typename\n      }\n      parent\n      parentId\n      sessionsByDate {\n        nextToken\n        __typename\n      }\n      conversationByDate {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      campaignMessage {\n        nextToken\n        __typename\n      }\n      federatedSessions {\n        nextToken\n        __typename\n      }\n      linkedApps {\n        nextToken\n        __typename\n      }\n      broadcastMessage {\n        nextToken\n        __typename\n      }\n      blacklisted\n      blacklistReason\n      blacklistedAt\n      __typename\n    }\n  }\n", e.createProfile = "\n  mutation CreateProfile(\n    $input: CreateProfileInput!\n    $condition: ModelProfileConditionInput\n  ) {\n    createProfile(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      profileId\n      maskedProfileId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      channel\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateProfile = "\n  mutation UpdateProfile(\n    $input: UpdateProfileInput!\n    $condition: ModelProfileConditionInput\n  ) {\n    updateProfile(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      profileId\n      maskedProfileId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      channel\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteProfile = "\n  mutation DeleteProfile(\n    $input: DeleteProfileInput!\n    $condition: ModelProfileConditionInput\n  ) {\n    deleteProfile(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      profileId\n      maskedProfileId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      channel\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createContactGroup = "\n  mutation CreateContactGroup(\n    $input: CreateContactGroupInput!\n    $condition: ModelContactGroupConditionInput\n  ) {\n    createContactGroup(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      contactGroupId\n      name\n      campaign {\n        nextToken\n        __typename\n      }\n      contact {\n        nextToken\n        __typename\n      }\n      updatedAt\n      dynamic\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      createdAt\n      __typename\n    }\n  }\n", e.updateContactGroup = "\n  mutation UpdateContactGroup(\n    $input: UpdateContactGroupInput!\n    $condition: ModelContactGroupConditionInput\n  ) {\n    updateContactGroup(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      contactGroupId\n      name\n      campaign {\n        nextToken\n        __typename\n      }\n      contact {\n        nextToken\n        __typename\n      }\n      updatedAt\n      dynamic\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      createdAt\n      __typename\n    }\n  }\n", e.deleteContactGroup = "\n  mutation DeleteContactGroup(\n    $input: DeleteContactGroupInput!\n    $condition: ModelContactGroupConditionInput\n  ) {\n    deleteContactGroup(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      contactGroupId\n      name\n      campaign {\n        nextToken\n        __typename\n      }\n      contact {\n        nextToken\n        __typename\n      }\n      updatedAt\n      dynamic\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      createdAt\n      __typename\n    }\n  }\n", e.createCustomerContactGroup = "\n  mutation CreateCustomerContactGroup(\n    $input: CreateCustomerContactGroupInput!\n    $condition: ModelCustomerContactGroupConditionInput\n  ) {\n    createCustomerContactGroup(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.updateCustomerContactGroup = "\n  mutation UpdateCustomerContactGroup(\n    $input: UpdateCustomerContactGroupInput!\n    $condition: ModelCustomerContactGroupConditionInput\n  ) {\n    updateCustomerContactGroup(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.deleteCustomerContactGroup = "\n  mutation DeleteCustomerContactGroup(\n    $input: DeleteCustomerContactGroupInput!\n    $condition: ModelCustomerContactGroupConditionInput\n  ) {\n    deleteCustomerContactGroup(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.createOrganization = "\n  mutation CreateOrganization(\n    $input: CreateOrganizationInput!\n    $condition: ModelOrganizationConditionInput\n  ) {\n    createOrganization(input: $input, condition: $condition) {\n      organizationId\n      brandId\n      brandName\n      name\n      orgUnits {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateOrganization = "\n  mutation UpdateOrganization(\n    $input: UpdateOrganizationInput!\n    $condition: ModelOrganizationConditionInput\n  ) {\n    updateOrganization(input: $input, condition: $condition) {\n      organizationId\n      brandId\n      brandName\n      name\n      orgUnits {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteOrganization = "\n  mutation DeleteOrganization(\n    $input: DeleteOrganizationInput!\n    $condition: ModelOrganizationConditionInput\n  ) {\n    deleteOrganization(input: $input, condition: $condition) {\n      organizationId\n      brandId\n      brandName\n      name\n      orgUnits {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createEnterprise = "\n  mutation CreateEnterprise(\n    $input: CreateEnterpriseInput!\n    $condition: ModelEnterpriseConditionInput\n  ) {\n    createEnterprise(input: $input, condition: $condition) {\n      enterpriseId\n      name\n      variables\n      onboarding\n      contactAttributes\n      brandId\n      organizationId\n      organization {\n        organizationId\n        brandId\n        brandName\n        name\n        createdAt\n        updatedAt\n        __typename\n      }\n      isActive\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateEnterprise = "\n  mutation UpdateEnterprise(\n    $input: UpdateEnterpriseInput!\n    $condition: ModelEnterpriseConditionInput\n  ) {\n    updateEnterprise(input: $input, condition: $condition) {\n      enterpriseId\n      name\n      variables\n      onboarding\n      contactAttributes\n      brandId\n      organizationId\n      organization {\n        organizationId\n        brandId\n        brandName\n        name\n        createdAt\n        updatedAt\n        __typename\n      }\n      isActive\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteEnterprise = "\n  mutation DeleteEnterprise(\n    $input: DeleteEnterpriseInput!\n    $condition: ModelEnterpriseConditionInput\n  ) {\n    deleteEnterprise(input: $input, condition: $condition) {\n      enterpriseId\n      name\n      variables\n      onboarding\n      contactAttributes\n      brandId\n      organizationId\n      organization {\n        organizationId\n        brandId\n        brandName\n        name\n        createdAt\n        updatedAt\n        __typename\n      }\n      isActive\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createTableViews = "\n  mutation CreateTableViews(\n    $input: CreateTableViewsInput!\n    $condition: ModelTableViewsConditionInput\n  ) {\n    createTableViews(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      tableViewsId\n      name\n      type\n      databaseKey\n      viewConfig\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.updateTableViews = "\n  mutation UpdateTableViews(\n    $input: UpdateTableViewsInput!\n    $condition: ModelTableViewsConditionInput\n  ) {\n    updateTableViews(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      tableViewsId\n      name\n      type\n      databaseKey\n      viewConfig\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.deleteTableViews = "\n  mutation DeleteTableViews(\n    $input: DeleteTableViewsInput!\n    $condition: ModelTableViewsConditionInput\n  ) {\n    deleteTableViews(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      tableViewsId\n      name\n      type\n      databaseKey\n      viewConfig\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.createIntegration = "\n  mutation CreateIntegration(\n    $input: CreateIntegrationInput!\n    $condition: ModelIntegrationConditionInput\n  ) {\n    createIntegration(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      integrationId\n      name\n      number\n      logo\n      details\n      config\n      channel\n      saas\n      primary\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      templates {\n        nextToken\n        __typename\n      }\n      whatsappFlows {\n        nextToken\n        __typename\n      }\n      campaigns {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignMessages {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      metaCatalogueId\n      metaCatalogue {\n        enterpriseId\n        mode\n        integrationId\n        metaCatalogueId\n        name\n        isCartEnabled\n        isCatalogVisible\n        createdAt\n        updatedAt\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateIntegration = "\n  mutation UpdateIntegration(\n    $input: UpdateIntegrationInput!\n    $condition: ModelIntegrationConditionInput\n  ) {\n    updateIntegration(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      integrationId\n      name\n      number\n      logo\n      details\n      config\n      channel\n      saas\n      primary\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      templates {\n        nextToken\n        __typename\n      }\n      whatsappFlows {\n        nextToken\n        __typename\n      }\n      campaigns {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignMessages {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      metaCatalogueId\n      metaCatalogue {\n        enterpriseId\n        mode\n        integrationId\n        metaCatalogueId\n        name\n        isCartEnabled\n        isCatalogVisible\n        createdAt\n        updatedAt\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteIntegration = "\n  mutation DeleteIntegration(\n    $input: DeleteIntegrationInput!\n    $condition: ModelIntegrationConditionInput\n  ) {\n    deleteIntegration(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      integrationId\n      name\n      number\n      logo\n      details\n      config\n      channel\n      saas\n      primary\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      templates {\n        nextToken\n        __typename\n      }\n      whatsappFlows {\n        nextToken\n        __typename\n      }\n      campaigns {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignMessages {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      metaCatalogueId\n      metaCatalogue {\n        enterpriseId\n        mode\n        integrationId\n        metaCatalogueId\n        name\n        isCartEnabled\n        isCatalogVisible\n        createdAt\n        updatedAt\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createWhatsappFlows = "\n  mutation CreateWhatsappFlows(\n    $input: CreateWhatsappFlowsInput!\n    $condition: ModelWhatsappFlowsConditionInput\n  ) {\n    createWhatsappFlows(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      whatsappFlowId\n      name\n      status\n      config\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateWhatsappFlows = "\n  mutation UpdateWhatsappFlows(\n    $input: UpdateWhatsappFlowsInput!\n    $condition: ModelWhatsappFlowsConditionInput\n  ) {\n    updateWhatsappFlows(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      whatsappFlowId\n      name\n      status\n      config\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteWhatsappFlows = "\n  mutation DeleteWhatsappFlows(\n    $input: DeleteWhatsappFlowsInput!\n    $condition: ModelWhatsappFlowsConditionInput\n  ) {\n    deleteWhatsappFlows(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      whatsappFlowId\n      name\n      status\n      config\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createMetaCatalogue = "\n  mutation CreateMetaCatalogue(\n    $input: CreateMetaCatalogueInput!\n    $condition: ModelMetaCatalogueConditionInput\n  ) {\n    createMetaCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      integrationId\n      metaCatalogueId\n      name\n      isCartEnabled\n      isCatalogVisible\n      catalogues {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateMetaCatalogue = "\n  mutation UpdateMetaCatalogue(\n    $input: UpdateMetaCatalogueInput!\n    $condition: ModelMetaCatalogueConditionInput\n  ) {\n    updateMetaCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      integrationId\n      metaCatalogueId\n      name\n      isCartEnabled\n      isCatalogVisible\n      catalogues {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteMetaCatalogue = "\n  mutation DeleteMetaCatalogue(\n    $input: DeleteMetaCatalogueInput!\n    $condition: ModelMetaCatalogueConditionInput\n  ) {\n    deleteMetaCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      integrationId\n      metaCatalogueId\n      name\n      isCartEnabled\n      isCatalogVisible\n      catalogues {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createTemplates = "\n  mutation CreateTemplates(\n    $input: CreateTemplatesInput!\n    $condition: ModelTemplatesConditionInput\n  ) {\n    createTemplates(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      templatesId\n      channel\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      title\n      category\n      description\n      descriptionHtml\n      status\n      templateId\n      namespaceId\n      config\n      language\n      statusMessage\n      reSubmit\n      phoneNo\n      templateType\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateTemplates = "\n  mutation UpdateTemplates(\n    $input: UpdateTemplatesInput!\n    $condition: ModelTemplatesConditionInput\n  ) {\n    updateTemplates(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      templatesId\n      channel\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      title\n      category\n      description\n      descriptionHtml\n      status\n      templateId\n      namespaceId\n      config\n      language\n      statusMessage\n      reSubmit\n      phoneNo\n      templateType\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteTemplates = "\n  mutation DeleteTemplates(\n    $input: DeleteTemplatesInput!\n    $condition: ModelTemplatesConditionInput\n  ) {\n    deleteTemplates(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      templatesId\n      channel\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      title\n      category\n      description\n      descriptionHtml\n      status\n      templateId\n      namespaceId\n      config\n      language\n      statusMessage\n      reSubmit\n      phoneNo\n      templateType\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createFlowTemplate = "\n  mutation CreateFlowTemplate(\n    $input: CreateFlowTemplateInput!\n    $condition: ModelFlowTemplateConditionInput\n  ) {\n    createFlowTemplate(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      flowTemplateId\n      templateName\n      industry\n      templateIcon\n      businessGoal\n      channels\n      templateDescription\n      templateData\n      isPrivate\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateFlowTemplate = "\n  mutation UpdateFlowTemplate(\n    $input: UpdateFlowTemplateInput!\n    $condition: ModelFlowTemplateConditionInput\n  ) {\n    updateFlowTemplate(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      flowTemplateId\n      templateName\n      industry\n      templateIcon\n      businessGoal\n      channels\n      templateDescription\n      templateData\n      isPrivate\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteFlowTemplate = "\n  mutation DeleteFlowTemplate(\n    $input: DeleteFlowTemplateInput!\n    $condition: ModelFlowTemplateConditionInput\n  ) {\n    deleteFlowTemplate(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      flowTemplateId\n      templateName\n      industry\n      templateIcon\n      businessGoal\n      channels\n      templateDescription\n      templateData\n      isPrivate\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createEventLabel = "\n  mutation CreateEventLabel(\n    $input: CreateEventLabelInput!\n    $condition: ModelEventLabelConditionInput\n  ) {\n    createEventLabel(input: $input, condition: $condition) {\n      enterpriseId\n      labelId\n      mode\n      createdAt\n      updatedAt\n      conversationId\n      sessionId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      interactionId\n      flowId\n      nodeId\n      campaignId\n      customerId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      workspaceId\n      type\n      label\n      value\n      previousLabel\n      previousValue\n      __typename\n    }\n  }\n", e.updateEventLabel = "\n  mutation UpdateEventLabel(\n    $input: UpdateEventLabelInput!\n    $condition: ModelEventLabelConditionInput\n  ) {\n    updateEventLabel(input: $input, condition: $condition) {\n      enterpriseId\n      labelId\n      mode\n      createdAt\n      updatedAt\n      conversationId\n      sessionId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      interactionId\n      flowId\n      nodeId\n      campaignId\n      customerId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      workspaceId\n      type\n      label\n      value\n      previousLabel\n      previousValue\n      __typename\n    }\n  }\n", e.deleteEventLabel = "\n  mutation DeleteEventLabel(\n    $input: DeleteEventLabelInput!\n    $condition: ModelEventLabelConditionInput\n  ) {\n    deleteEventLabel(input: $input, condition: $condition) {\n      enterpriseId\n      labelId\n      mode\n      createdAt\n      updatedAt\n      conversationId\n      sessionId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      interactionId\n      flowId\n      nodeId\n      campaignId\n      customerId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      workspaceId\n      type\n      label\n      value\n      previousLabel\n      previousValue\n      __typename\n    }\n  }\n", e.createAnalyticsDashboard = "\n  mutation CreateAnalyticsDashboard(\n    $input: CreateAnalyticsDashboardInput!\n    $condition: ModelAnalyticsDashboardConditionInput\n  ) {\n    createAnalyticsDashboard(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      analyticsDashboardId\n      name\n      config\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateAnalyticsDashboard = "\n  mutation UpdateAnalyticsDashboard(\n    $input: UpdateAnalyticsDashboardInput!\n    $condition: ModelAnalyticsDashboardConditionInput\n  ) {\n    updateAnalyticsDashboard(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      analyticsDashboardId\n      name\n      config\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteAnalyticsDashboard = "\n  mutation DeleteAnalyticsDashboard(\n    $input: DeleteAnalyticsDashboardInput!\n    $condition: ModelAnalyticsDashboardConditionInput\n  ) {\n    deleteAnalyticsDashboard(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      analyticsDashboardId\n      name\n      config\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createHealthTable = "\n  mutation CreateHealthTable(\n    $input: CreateHealthTableInput!\n    $condition: ModelHealthTableConditionInput\n  ) {\n    createHealthTable(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      healthTableId\n      title\n      read\n      count\n      status\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      session {\n        nextToken\n        __typename\n      }\n      nodeId\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      description\n      functionOrigin\n      type\n      subType\n      channel\n      updatedAt\n      createdAt\n      link\n      config\n      checkFlag\n      __typename\n    }\n  }\n", e.updateHealthTable = "\n  mutation UpdateHealthTable(\n    $input: UpdateHealthTableInput!\n    $condition: ModelHealthTableConditionInput\n  ) {\n    updateHealthTable(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      healthTableId\n      title\n      read\n      count\n      status\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      session {\n        nextToken\n        __typename\n      }\n      nodeId\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      description\n      functionOrigin\n      type\n      subType\n      channel\n      updatedAt\n      createdAt\n      link\n      config\n      checkFlag\n      __typename\n    }\n  }\n", e.deleteHealthTable = "\n  mutation DeleteHealthTable(\n    $input: DeleteHealthTableInput!\n    $condition: ModelHealthTableConditionInput\n  ) {\n    deleteHealthTable(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      healthTableId\n      title\n      read\n      count\n      status\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      session {\n        nextToken\n        __typename\n      }\n      nodeId\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      description\n      functionOrigin\n      type\n      subType\n      channel\n      updatedAt\n      createdAt\n      link\n      config\n      checkFlag\n      __typename\n    }\n  }\n", e.createFlow = "\n  mutation CreateFlow(\n    $input: CreateFlowInput!\n    $condition: ModelFlowConditionInput\n  ) {\n    createFlow(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      flowId\n      name\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      interaction {\n        nextToken\n        __typename\n      }\n      integration {\n        nextToken\n        __typename\n      }\n      start {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      startId\n      fallback {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      fallbackId\n      idle {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      idleId\n      campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      isImported\n      status\n      settings\n      flowTemplate {\n        enterpriseId\n        mode\n        flowTemplateId\n        templateName\n        industry\n        templateIcon\n        businessGoal\n        channels\n        templateDescription\n        templateData\n        isPrivate\n        flowId\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowTemplateId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateFlow = "\n  mutation UpdateFlow(\n    $input: UpdateFlowInput!\n    $condition: ModelFlowConditionInput\n  ) {\n    updateFlow(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      flowId\n      name\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      interaction {\n        nextToken\n        __typename\n      }\n      integration {\n        nextToken\n        __typename\n      }\n      start {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      startId\n      fallback {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      fallbackId\n      idle {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      idleId\n      campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      isImported\n      status\n      settings\n      flowTemplate {\n        enterpriseId\n        mode\n        flowTemplateId\n        templateName\n        industry\n        templateIcon\n        businessGoal\n        channels\n        templateDescription\n        templateData\n        isPrivate\n        flowId\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowTemplateId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteFlow = "\n  mutation DeleteFlow(\n    $input: DeleteFlowInput!\n    $condition: ModelFlowConditionInput\n  ) {\n    deleteFlow(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      flowId\n      name\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      interaction {\n        nextToken\n        __typename\n      }\n      integration {\n        nextToken\n        __typename\n      }\n      start {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      startId\n      fallback {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      fallbackId\n      idle {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      idleId\n      campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      isImported\n      status\n      settings\n      flowTemplate {\n        enterpriseId\n        mode\n        flowTemplateId\n        templateName\n        industry\n        templateIcon\n        businessGoal\n        channels\n        templateDescription\n        templateData\n        isPrivate\n        flowId\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowTemplateId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createInteraction = "\n  mutation CreateInteraction(\n    $input: CreateInteractionInput!\n    $condition: ModelInteractionConditionInput\n  ) {\n    createInteraction(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      interactionId\n      name\n      nodes {\n        nextToken\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateInteraction = "\n  mutation UpdateInteraction(\n    $input: UpdateInteractionInput!\n    $condition: ModelInteractionConditionInput\n  ) {\n    updateInteraction(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      interactionId\n      name\n      nodes {\n        nextToken\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteInteraction = "\n  mutation DeleteInteraction(\n    $input: DeleteInteractionInput!\n    $condition: ModelInteractionConditionInput\n  ) {\n    deleteInteraction(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      interactionId\n      name\n      nodes {\n        nextToken\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createNode = "\n  mutation CreateNode(\n    $input: CreateNodeInput!\n    $condition: ModelNodeConditionInput\n  ) {\n    createNode(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      nodeId\n      type\n      config\n      interaction {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      interactionId\n      nextId\n      previousId\n      intentId\n      scheduleNode {\n        nextToken\n        __typename\n      }\n      healthTable {\n        nextToken\n        __typename\n      }\n      noError\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateNode = "\n  mutation UpdateNode(\n    $input: UpdateNodeInput!\n    $condition: ModelNodeConditionInput\n  ) {\n    updateNode(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      nodeId\n      type\n      config\n      interaction {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      interactionId\n      nextId\n      previousId\n      intentId\n      scheduleNode {\n        nextToken\n        __typename\n      }\n      healthTable {\n        nextToken\n        __typename\n      }\n      noError\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteNode = "\n  mutation DeleteNode(\n    $input: DeleteNodeInput!\n    $condition: ModelNodeConditionInput\n  ) {\n    deleteNode(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      nodeId\n      type\n      config\n      interaction {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      interactionId\n      nextId\n      previousId\n      intentId\n      scheduleNode {\n        nextToken\n        __typename\n      }\n      healthTable {\n        nextToken\n        __typename\n      }\n      noError\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createScheduleNode = "\n  mutation CreateScheduleNode(\n    $input: CreateScheduleNodeInput!\n    $condition: ModelScheduleNodeConditionInput\n  ) {\n    createScheduleNode(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      scheduleNodeId\n      status\n      time\n      updatedAt\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nodeId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      createdAt\n      __typename\n    }\n  }\n", e.updateScheduleNode = "\n  mutation UpdateScheduleNode(\n    $input: UpdateScheduleNodeInput!\n    $condition: ModelScheduleNodeConditionInput\n  ) {\n    updateScheduleNode(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      scheduleNodeId\n      status\n      time\n      updatedAt\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nodeId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      createdAt\n      __typename\n    }\n  }\n", e.deleteScheduleNode = "\n  mutation DeleteScheduleNode(\n    $input: DeleteScheduleNodeInput!\n    $condition: ModelScheduleNodeConditionInput\n  ) {\n    deleteScheduleNode(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      scheduleNodeId\n      status\n      time\n      updatedAt\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nodeId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      createdAt\n      __typename\n    }\n  }\n", e.createLinkedApp = "\n  mutation CreateLinkedApp(\n    $input: CreateLinkedAppInput!\n    $condition: ModelLinkedAppConditionInput\n  ) {\n    createLinkedApp(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      linkedAppId\n      name\n      role\n      email\n      lastSyncTime\n      status\n      qrCode\n      details\n      config\n      customers {\n        nextToken\n        __typename\n      }\n      collection {\n        nextToken\n        __typename\n      }\n      catalogue {\n        nextToken\n        __typename\n      }\n      broadcastMessage {\n        nextToken\n        __typename\n      }\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      isBusinessAccount\n      isCartEnabled\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateLinkedApp = "\n  mutation UpdateLinkedApp(\n    $input: UpdateLinkedAppInput!\n    $condition: ModelLinkedAppConditionInput\n  ) {\n    updateLinkedApp(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      linkedAppId\n      name\n      role\n      email\n      lastSyncTime\n      status\n      qrCode\n      details\n      config\n      customers {\n        nextToken\n        __typename\n      }\n      collection {\n        nextToken\n        __typename\n      }\n      catalogue {\n        nextToken\n        __typename\n      }\n      broadcastMessage {\n        nextToken\n        __typename\n      }\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      isBusinessAccount\n      isCartEnabled\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteLinkedApp = "\n  mutation DeleteLinkedApp(\n    $input: DeleteLinkedAppInput!\n    $condition: ModelLinkedAppConditionInput\n  ) {\n    deleteLinkedApp(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      linkedAppId\n      name\n      role\n      email\n      lastSyncTime\n      status\n      qrCode\n      details\n      config\n      customers {\n        nextToken\n        __typename\n      }\n      collection {\n        nextToken\n        __typename\n      }\n      catalogue {\n        nextToken\n        __typename\n      }\n      broadcastMessage {\n        nextToken\n        __typename\n      }\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      isBusinessAccount\n      isCartEnabled\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createLinkedAppCustomer = "\n  mutation CreateLinkedAppCustomer(\n    $input: CreateLinkedAppCustomerInput!\n    $condition: ModelLinkedAppCustomerConditionInput\n  ) {\n    createLinkedAppCustomer(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      customerDetails\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      updatedAt\n      messages {\n        nextToken\n        __typename\n      }\n      createdAt\n      __typename\n    }\n  }\n", e.updateLinkedAppCustomer = "\n  mutation UpdateLinkedAppCustomer(\n    $input: UpdateLinkedAppCustomerInput!\n    $condition: ModelLinkedAppCustomerConditionInput\n  ) {\n    updateLinkedAppCustomer(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      customerDetails\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      updatedAt\n      messages {\n        nextToken\n        __typename\n      }\n      createdAt\n      __typename\n    }\n  }\n", e.deleteLinkedAppCustomer = "\n  mutation DeleteLinkedAppCustomer(\n    $input: DeleteLinkedAppCustomerInput!\n    $condition: ModelLinkedAppCustomerConditionInput\n  ) {\n    deleteLinkedAppCustomer(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      customerDetails\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      updatedAt\n      messages {\n        nextToken\n        __typename\n      }\n      createdAt\n      __typename\n    }\n  }\n", e.createLinkedAppMessage = "\n  mutation CreateLinkedAppMessage(\n    $input: CreateLinkedAppMessageInput!\n    $condition: ModelLinkedAppMessageConditionInput\n  ) {\n    createLinkedAppMessage(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      waMessageId\n      message\n      updatedAt\n      createdAt\n      linkedAppCustomer {\n        enterpriseId\n        mode\n        customerDetails\n        customerId\n        linkedAppId\n        updatedAt\n        createdAt\n        __typename\n      }\n      linkedAppId\n      customerId\n      __typename\n    }\n  }\n", e.updateLinkedAppMessage = "\n  mutation UpdateLinkedAppMessage(\n    $input: UpdateLinkedAppMessageInput!\n    $condition: ModelLinkedAppMessageConditionInput\n  ) {\n    updateLinkedAppMessage(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      waMessageId\n      message\n      updatedAt\n      createdAt\n      linkedAppCustomer {\n        enterpriseId\n        mode\n        customerDetails\n        customerId\n        linkedAppId\n        updatedAt\n        createdAt\n        __typename\n      }\n      linkedAppId\n      customerId\n      __typename\n    }\n  }\n", e.deleteLinkedAppMessage = "\n  mutation DeleteLinkedAppMessage(\n    $input: DeleteLinkedAppMessageInput!\n    $condition: ModelLinkedAppMessageConditionInput\n  ) {\n    deleteLinkedAppMessage(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      waMessageId\n      message\n      updatedAt\n      createdAt\n      linkedAppCustomer {\n        enterpriseId\n        mode\n        customerDetails\n        customerId\n        linkedAppId\n        updatedAt\n        createdAt\n        __typename\n      }\n      linkedAppId\n      customerId\n      __typename\n    }\n  }\n", e.createCatalogue = "\n  mutation CreateCatalogue(\n    $input: CreateCatalogueInput!\n    $condition: ModelCatalogueConditionInput\n  ) {\n    createCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      catalogueId\n      images\n      name\n      description\n      price\n      link\n      itemCode\n      hide\n      countryOfOrigin\n      otherAttributes\n      updatedAt\n      integrationId\n      retailerId\n      metaCatalogue {\n        enterpriseId\n        mode\n        integrationId\n        metaCatalogueId\n        name\n        isCartEnabled\n        isCatalogVisible\n        createdAt\n        updatedAt\n        __typename\n      }\n      metaCatalogueId\n      collection {\n        nextToken\n        __typename\n      }\n      linkedApp {\n        nextToken\n        __typename\n      }\n      createdAt\n      __typename\n    }\n  }\n", e.updateCatalogue = "\n  mutation UpdateCatalogue(\n    $input: UpdateCatalogueInput!\n    $condition: ModelCatalogueConditionInput\n  ) {\n    updateCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      catalogueId\n      images\n      name\n      description\n      price\n      link\n      itemCode\n      hide\n      countryOfOrigin\n      otherAttributes\n      updatedAt\n      integrationId\n      retailerId\n      metaCatalogue {\n        enterpriseId\n        mode\n        integrationId\n        metaCatalogueId\n        name\n        isCartEnabled\n        isCatalogVisible\n        createdAt\n        updatedAt\n        __typename\n      }\n      metaCatalogueId\n      collection {\n        nextToken\n        __typename\n      }\n      linkedApp {\n        nextToken\n        __typename\n      }\n      createdAt\n      __typename\n    }\n  }\n", e.deleteCatalogue = "\n  mutation DeleteCatalogue(\n    $input: DeleteCatalogueInput!\n    $condition: ModelCatalogueConditionInput\n  ) {\n    deleteCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      catalogueId\n      images\n      name\n      description\n      price\n      link\n      itemCode\n      hide\n      countryOfOrigin\n      otherAttributes\n      updatedAt\n      integrationId\n      retailerId\n      metaCatalogue {\n        enterpriseId\n        mode\n        integrationId\n        metaCatalogueId\n        name\n        isCartEnabled\n        isCatalogVisible\n        createdAt\n        updatedAt\n        __typename\n      }\n      metaCatalogueId\n      collection {\n        nextToken\n        __typename\n      }\n      linkedApp {\n        nextToken\n        __typename\n      }\n      createdAt\n      __typename\n    }\n  }\n", e.createCollection = "\n  mutation CreateCollection(\n    $input: CreateCollectionInput!\n    $condition: ModelCollectionConditionInput\n  ) {\n    createCollection(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      collectionId\n      title\n      status\n      catalogue {\n        nextToken\n        __typename\n      }\n      linkedApp {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateCollection = "\n  mutation UpdateCollection(\n    $input: UpdateCollectionInput!\n    $condition: ModelCollectionConditionInput\n  ) {\n    updateCollection(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      collectionId\n      title\n      status\n      catalogue {\n        nextToken\n        __typename\n      }\n      linkedApp {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteCollection = "\n  mutation DeleteCollection(\n    $input: DeleteCollectionInput!\n    $condition: ModelCollectionConditionInput\n  ) {\n    deleteCollection(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      collectionId\n      title\n      status\n      catalogue {\n        nextToken\n        __typename\n      }\n      linkedApp {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createCollectionCatalogue = "\n  mutation CreateCollectionCatalogue(\n    $input: CreateCollectionCatalogueInput!\n    $condition: ModelCollectionCatalogueConditionInput\n  ) {\n    createCollectionCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      collection {\n        enterpriseId\n        mode\n        collectionId\n        title\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      collectionId\n      catalogue {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      catalogueId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateCollectionCatalogue = "\n  mutation UpdateCollectionCatalogue(\n    $input: UpdateCollectionCatalogueInput!\n    $condition: ModelCollectionCatalogueConditionInput\n  ) {\n    updateCollectionCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      collection {\n        enterpriseId\n        mode\n        collectionId\n        title\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      collectionId\n      catalogue {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      catalogueId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteCollectionCatalogue = "\n  mutation DeleteCollectionCatalogue(\n    $input: DeleteCollectionCatalogueInput!\n    $condition: ModelCollectionCatalogueConditionInput\n  ) {\n    deleteCollectionCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      collection {\n        enterpriseId\n        mode\n        collectionId\n        title\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      collectionId\n      catalogue {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      catalogueId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createLinkedAppCatalogue = "\n  mutation CreateLinkedAppCatalogue(\n    $input: CreateLinkedAppCatalogueInput!\n    $condition: ModelLinkedAppCatalogueConditionInput\n  ) {\n    createLinkedAppCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      waLinkedAppCatalogueId\n      hide\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      catalogue {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      catalogueId\n      status\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateLinkedAppCatalogue = "\n  mutation UpdateLinkedAppCatalogue(\n    $input: UpdateLinkedAppCatalogueInput!\n    $condition: ModelLinkedAppCatalogueConditionInput\n  ) {\n    updateLinkedAppCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      waLinkedAppCatalogueId\n      hide\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      catalogue {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      catalogueId\n      status\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteLinkedAppCatalogue = "\n  mutation DeleteLinkedAppCatalogue(\n    $input: DeleteLinkedAppCatalogueInput!\n    $condition: ModelLinkedAppCatalogueConditionInput\n  ) {\n    deleteLinkedAppCatalogue(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      waLinkedAppCatalogueId\n      hide\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      catalogue {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      catalogueId\n      status\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createLinkedAppCollection = "\n  mutation CreateLinkedAppCollection(\n    $input: CreateLinkedAppCollectionInput!\n    $condition: ModelLinkedAppCollectionConditionInput\n  ) {\n    createLinkedAppCollection(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      waLinkedAppCollectionId\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      collection {\n        enterpriseId\n        mode\n        collectionId\n        title\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      collectionId\n      status\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateLinkedAppCollection = "\n  mutation UpdateLinkedAppCollection(\n    $input: UpdateLinkedAppCollectionInput!\n    $condition: ModelLinkedAppCollectionConditionInput\n  ) {\n    updateLinkedAppCollection(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      waLinkedAppCollectionId\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      collection {\n        enterpriseId\n        mode\n        collectionId\n        title\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      collectionId\n      status\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteLinkedAppCollection = "\n  mutation DeleteLinkedAppCollection(\n    $input: DeleteLinkedAppCollectionInput!\n    $condition: ModelLinkedAppCollectionConditionInput\n  ) {\n    deleteLinkedAppCollection(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      waLinkedAppCollectionId\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      collection {\n        enterpriseId\n        mode\n        collectionId\n        title\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      collectionId\n      status\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createBroadcast = "\n  mutation CreateBroadcast(\n    $input: CreateBroadcastInput!\n    $condition: ModelBroadcastConditionInput\n  ) {\n    createBroadcast(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      broadcastId\n      name\n      scheduleTime\n      status\n      senderReceiver\n      advancedConfig\n      message\n      asset\n      isCatalogue\n      catalogItems\n      broadcastMessages {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateBroadcast = "\n  mutation UpdateBroadcast(\n    $input: UpdateBroadcastInput!\n    $condition: ModelBroadcastConditionInput\n  ) {\n    updateBroadcast(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      broadcastId\n      name\n      scheduleTime\n      status\n      senderReceiver\n      advancedConfig\n      message\n      asset\n      isCatalogue\n      catalogItems\n      broadcastMessages {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteBroadcast = "\n  mutation DeleteBroadcast(\n    $input: DeleteBroadcastInput!\n    $condition: ModelBroadcastConditionInput\n  ) {\n    deleteBroadcast(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      broadcastId\n      name\n      scheduleTime\n      status\n      senderReceiver\n      advancedConfig\n      message\n      asset\n      isCatalogue\n      catalogItems\n      broadcastMessages {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createBroadcastMessage = "\n  mutation CreateBroadcastMessage(\n    $input: CreateBroadcastMessageInput!\n    $condition: ModelBroadcastMessageConditionInput\n  ) {\n    createBroadcastMessage(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      broadcastMessageId\n      from {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      to {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      scheduleTime\n      broadcast {\n        enterpriseId\n        mode\n        broadcastId\n        name\n        scheduleTime\n        status\n        senderReceiver\n        advancedConfig\n        message\n        asset\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      broadcastId\n      reference {\n        enterpriseId\n        mode\n        waMessageId\n        message\n        updatedAt\n        createdAt\n        linkedAppId\n        customerId\n        __typename\n      }\n      waMessageId\n      status\n      meta\n      timeToRespond\n      isCatalogue\n      catalogItems\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateBroadcastMessage = "\n  mutation UpdateBroadcastMessage(\n    $input: UpdateBroadcastMessageInput!\n    $condition: ModelBroadcastMessageConditionInput\n  ) {\n    updateBroadcastMessage(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      broadcastMessageId\n      from {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      to {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      scheduleTime\n      broadcast {\n        enterpriseId\n        mode\n        broadcastId\n        name\n        scheduleTime\n        status\n        senderReceiver\n        advancedConfig\n        message\n        asset\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      broadcastId\n      reference {\n        enterpriseId\n        mode\n        waMessageId\n        message\n        updatedAt\n        createdAt\n        linkedAppId\n        customerId\n        __typename\n      }\n      waMessageId\n      status\n      meta\n      timeToRespond\n      isCatalogue\n      catalogItems\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteBroadcastMessage = "\n  mutation DeleteBroadcastMessage(\n    $input: DeleteBroadcastMessageInput!\n    $condition: ModelBroadcastMessageConditionInput\n  ) {\n    deleteBroadcastMessage(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      broadcastMessageId\n      from {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      to {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      scheduleTime\n      broadcast {\n        enterpriseId\n        mode\n        broadcastId\n        name\n        scheduleTime\n        status\n        senderReceiver\n        advancedConfig\n        message\n        asset\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      broadcastId\n      reference {\n        enterpriseId\n        mode\n        waMessageId\n        message\n        updatedAt\n        createdAt\n        linkedAppId\n        customerId\n        __typename\n      }\n      waMessageId\n      status\n      meta\n      timeToRespond\n      isCatalogue\n      catalogItems\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createSession = "\n  mutation CreateSession(\n    $input: CreateSessionInput!\n    $condition: ModelSessionConditionInput\n  ) {\n    createSession(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      workspaceId\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      channel\n      updatedAt\n      conversationByDate {\n        nextToken\n        __typename\n      }\n      createdAt\n      assignment\n      tags\n      currentNodeId\n      currentNode {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextNodeId\n      nextNode {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      variables\n      agent {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      agentId\n      preview\n      nodeId\n      validationCount\n      campaignMessage {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      campaignMessageId\n      active\n      initiatedBy\n      federatedLiveToCustomerId\n      federatedLiveToCustomer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      federatedRole\n      scheduleNode {\n        nextToken\n        __typename\n      }\n      healthTable {\n        enterpriseId\n        mode\n        healthTableId\n        title\n        read\n        count\n        status\n        nodeId\n        userId\n        description\n        functionOrigin\n        type\n        subType\n        channel\n        updatedAt\n        createdAt\n        link\n        config\n        checkFlag\n        __typename\n      }\n      healthTableId\n      metaConversationId\n      referrer\n      referrerType\n      __typename\n    }\n  }\n", e.updateSession = "\n  mutation UpdateSession(\n    $input: UpdateSessionInput!\n    $condition: ModelSessionConditionInput\n  ) {\n    updateSession(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      workspaceId\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      channel\n      updatedAt\n      conversationByDate {\n        nextToken\n        __typename\n      }\n      createdAt\n      assignment\n      tags\n      currentNodeId\n      currentNode {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextNodeId\n      nextNode {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      variables\n      agent {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      agentId\n      preview\n      nodeId\n      validationCount\n      campaignMessage {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      campaignMessageId\n      active\n      initiatedBy\n      federatedLiveToCustomerId\n      federatedLiveToCustomer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      federatedRole\n      scheduleNode {\n        nextToken\n        __typename\n      }\n      healthTable {\n        enterpriseId\n        mode\n        healthTableId\n        title\n        read\n        count\n        status\n        nodeId\n        userId\n        description\n        functionOrigin\n        type\n        subType\n        channel\n        updatedAt\n        createdAt\n        link\n        config\n        checkFlag\n        __typename\n      }\n      healthTableId\n      metaConversationId\n      referrer\n      referrerType\n      __typename\n    }\n  }\n", e.deleteSession = "\n  mutation DeleteSession(\n    $input: DeleteSessionInput!\n    $condition: ModelSessionConditionInput\n  ) {\n    deleteSession(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      workspaceId\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      channel\n      updatedAt\n      conversationByDate {\n        nextToken\n        __typename\n      }\n      createdAt\n      assignment\n      tags\n      currentNodeId\n      currentNode {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextNodeId\n      nextNode {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      variables\n      agent {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      agentId\n      preview\n      nodeId\n      validationCount\n      campaignMessage {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      campaignMessageId\n      active\n      initiatedBy\n      federatedLiveToCustomerId\n      federatedLiveToCustomer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      federatedRole\n      scheduleNode {\n        nextToken\n        __typename\n      }\n      healthTable {\n        enterpriseId\n        mode\n        healthTableId\n        title\n        read\n        count\n        status\n        nodeId\n        userId\n        description\n        functionOrigin\n        type\n        subType\n        channel\n        updatedAt\n        createdAt\n        link\n        config\n        checkFlag\n        __typename\n      }\n      healthTableId\n      metaConversationId\n      referrer\n      referrerType\n      __typename\n    }\n  }\n", e.createConversation = "\n  mutation CreateConversation(\n    $input: CreateConversationInput!\n    $condition: ModelConversationConditionInput\n  ) {\n    createConversation(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      conversationId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      createdBy\n      content\n      createdAt\n      metadata\n      senderId\n      imagePath\n      agentInfo\n      conversationInfo {\n        enterpriseId\n        mode\n        conversationId\n        channelMessageId\n        deliveredAt\n        readAt\n        submittedAt\n        submittedToPartner\n        analytics\n        errorMessage\n        cumulativeLeadScore\n        leadScoreDiff\n        pricing\n        createdAt\n        updatedAt\n        __typename\n      }\n      updatedAt\n      __typename\n    }\n  }\n", e.updateConversation = "\n  mutation UpdateConversation(\n    $input: UpdateConversationInput!\n    $condition: ModelConversationConditionInput\n  ) {\n    updateConversation(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      conversationId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      createdBy\n      content\n      createdAt\n      metadata\n      senderId\n      imagePath\n      agentInfo\n      conversationInfo {\n        enterpriseId\n        mode\n        conversationId\n        channelMessageId\n        deliveredAt\n        readAt\n        submittedAt\n        submittedToPartner\n        analytics\n        errorMessage\n        cumulativeLeadScore\n        leadScoreDiff\n        pricing\n        createdAt\n        updatedAt\n        __typename\n      }\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteConversation = "\n  mutation DeleteConversation(\n    $input: DeleteConversationInput!\n    $condition: ModelConversationConditionInput\n  ) {\n    deleteConversation(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      conversationId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      createdBy\n      content\n      createdAt\n      metadata\n      senderId\n      imagePath\n      agentInfo\n      conversationInfo {\n        enterpriseId\n        mode\n        conversationId\n        channelMessageId\n        deliveredAt\n        readAt\n        submittedAt\n        submittedToPartner\n        analytics\n        errorMessage\n        cumulativeLeadScore\n        leadScoreDiff\n        pricing\n        createdAt\n        updatedAt\n        __typename\n      }\n      updatedAt\n      __typename\n    }\n  }\n", e.createConversationInfo = "\n  mutation CreateConversationInfo(\n    $input: CreateConversationInfoInput!\n    $condition: ModelConversationInfoConditionInput\n  ) {\n    createConversationInfo(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      conversationId\n      conversation {\n        enterpriseId\n        mode\n        conversationId\n        sessionId\n        customerId\n        createdBy\n        content\n        createdAt\n        metadata\n        senderId\n        imagePath\n        agentInfo\n        updatedAt\n        __typename\n      }\n      channelMessageId\n      deliveredAt\n      readAt\n      submittedAt\n      submittedToPartner\n      analytics\n      errorMessage\n      cumulativeLeadScore\n      leadScoreDiff\n      pricing\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateConversationInfo = "\n  mutation UpdateConversationInfo(\n    $input: UpdateConversationInfoInput!\n    $condition: ModelConversationInfoConditionInput\n  ) {\n    updateConversationInfo(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      conversationId\n      conversation {\n        enterpriseId\n        mode\n        conversationId\n        sessionId\n        customerId\n        createdBy\n        content\n        createdAt\n        metadata\n        senderId\n        imagePath\n        agentInfo\n        updatedAt\n        __typename\n      }\n      channelMessageId\n      deliveredAt\n      readAt\n      submittedAt\n      submittedToPartner\n      analytics\n      errorMessage\n      cumulativeLeadScore\n      leadScoreDiff\n      pricing\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteConversationInfo = "\n  mutation DeleteConversationInfo(\n    $input: DeleteConversationInfoInput!\n    $condition: ModelConversationInfoConditionInput\n  ) {\n    deleteConversationInfo(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      conversationId\n      conversation {\n        enterpriseId\n        mode\n        conversationId\n        sessionId\n        customerId\n        createdBy\n        content\n        createdAt\n        metadata\n        senderId\n        imagePath\n        agentInfo\n        updatedAt\n        __typename\n      }\n      channelMessageId\n      deliveredAt\n      readAt\n      submittedAt\n      submittedToPartner\n      analytics\n      errorMessage\n      cumulativeLeadScore\n      leadScoreDiff\n      pricing\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createUser = "\n  mutation CreateUser(\n    $input: CreateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    createUser(input: $input, condition: $condition) {\n      enterpriseId\n      userId\n      email\n      name\n      number\n      lName\n      avatarUrl\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      lastSignIn\n      active\n      session {\n        nextToken\n        __typename\n      }\n      availability\n      browserToken\n      isLoggedIn\n      updatedAt\n      profileDetails\n      notificationConfig\n      notification {\n        nextToken\n        __typename\n      }\n      job {\n        nextToken\n        __typename\n      }\n      inviterUserIdClerk\n      clerkUserId\n      createdAt\n      __typename\n    }\n  }\n", e.updateUser = "\n  mutation UpdateUser(\n    $input: UpdateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    updateUser(input: $input, condition: $condition) {\n      enterpriseId\n      userId\n      email\n      name\n      number\n      lName\n      avatarUrl\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      lastSignIn\n      active\n      session {\n        nextToken\n        __typename\n      }\n      availability\n      browserToken\n      isLoggedIn\n      updatedAt\n      profileDetails\n      notificationConfig\n      notification {\n        nextToken\n        __typename\n      }\n      job {\n        nextToken\n        __typename\n      }\n      inviterUserIdClerk\n      clerkUserId\n      createdAt\n      __typename\n    }\n  }\n", e.deleteUser = "\n  mutation DeleteUser(\n    $input: DeleteUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    deleteUser(input: $input, condition: $condition) {\n      enterpriseId\n      userId\n      email\n      name\n      number\n      lName\n      avatarUrl\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      lastSignIn\n      active\n      session {\n        nextToken\n        __typename\n      }\n      availability\n      browserToken\n      isLoggedIn\n      updatedAt\n      profileDetails\n      notificationConfig\n      notification {\n        nextToken\n        __typename\n      }\n      job {\n        nextToken\n        __typename\n      }\n      inviterUserIdClerk\n      clerkUserId\n      createdAt\n      __typename\n    }\n  }\n", e.createRole = "\n  mutation CreateRole(\n    $input: CreateRoleInput!\n    $condition: ModelRoleConditionInput\n  ) {\n    createRole(input: $input, condition: $condition) {\n      enterpriseId\n      roleId\n      name\n      module {\n        enterpriseId\n        moduleId\n        name\n        roleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      moduleId\n      permission {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateRole = "\n  mutation UpdateRole(\n    $input: UpdateRoleInput!\n    $condition: ModelRoleConditionInput\n  ) {\n    updateRole(input: $input, condition: $condition) {\n      enterpriseId\n      roleId\n      name\n      module {\n        enterpriseId\n        moduleId\n        name\n        roleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      moduleId\n      permission {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteRole = "\n  mutation DeleteRole(\n    $input: DeleteRoleInput!\n    $condition: ModelRoleConditionInput\n  ) {\n    deleteRole(input: $input, condition: $condition) {\n      enterpriseId\n      roleId\n      name\n      module {\n        enterpriseId\n        moduleId\n        name\n        roleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      moduleId\n      permission {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createPermission = "\n  mutation CreatePermission(\n    $input: CreatePermissionInput!\n    $condition: ModelPermissionConditionInput\n  ) {\n    createPermission(input: $input, condition: $condition) {\n      enterpriseId\n      permissionId\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      create\n      read\n      update\n      delete\n      campaignApproval\n      module {\n        enterpriseId\n        moduleId\n        name\n        roleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      moduleId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updatePermission = "\n  mutation UpdatePermission(\n    $input: UpdatePermissionInput!\n    $condition: ModelPermissionConditionInput\n  ) {\n    updatePermission(input: $input, condition: $condition) {\n      enterpriseId\n      permissionId\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      create\n      read\n      update\n      delete\n      campaignApproval\n      module {\n        enterpriseId\n        moduleId\n        name\n        roleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      moduleId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deletePermission = "\n  mutation DeletePermission(\n    $input: DeletePermissionInput!\n    $condition: ModelPermissionConditionInput\n  ) {\n    deletePermission(input: $input, condition: $condition) {\n      enterpriseId\n      permissionId\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      create\n      read\n      update\n      delete\n      campaignApproval\n      module {\n        enterpriseId\n        moduleId\n        name\n        roleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      moduleId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createModule = "\n  mutation CreateModule(\n    $input: CreateModuleInput!\n    $condition: ModelModuleConditionInput\n  ) {\n    createModule(input: $input, condition: $condition) {\n      enterpriseId\n      moduleId\n      name\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateModule = "\n  mutation UpdateModule(\n    $input: UpdateModuleInput!\n    $condition: ModelModuleConditionInput\n  ) {\n    updateModule(input: $input, condition: $condition) {\n      enterpriseId\n      moduleId\n      name\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteModule = "\n  mutation DeleteModule(\n    $input: DeleteModuleInput!\n    $condition: ModelModuleConditionInput\n  ) {\n    deleteModule(input: $input, condition: $condition) {\n      enterpriseId\n      moduleId\n      name\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createNotification = "\n  mutation CreateNotification(\n    $input: CreateNotificationInput!\n    $condition: ModelNotificationConditionInput\n  ) {\n    createNotification(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      notificationId\n      link\n      title\n      description\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      read\n      type\n      categoryStatus\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.updateNotification = "\n  mutation UpdateNotification(\n    $input: UpdateNotificationInput!\n    $condition: ModelNotificationConditionInput\n  ) {\n    updateNotification(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      notificationId\n      link\n      title\n      description\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      read\n      type\n      categoryStatus\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.deleteNotification = "\n  mutation DeleteNotification(\n    $input: DeleteNotificationInput!\n    $condition: ModelNotificationConditionInput\n  ) {\n    deleteNotification(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      notificationId\n      link\n      title\n      description\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      read\n      type\n      categoryStatus\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.createJob = "\n  mutation CreateJob(\n    $input: CreateJobInput!\n    $condition: ModelJobConditionInput\n  ) {\n    createJob(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      jobId\n      type\n      payload\n      status\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      read\n      description\n      result\n      updatedAt\n      executionArn\n      failureReasons\n      createdAt\n      __typename\n    }\n  }\n", e.updateJob = "\n  mutation UpdateJob(\n    $input: UpdateJobInput!\n    $condition: ModelJobConditionInput\n  ) {\n    updateJob(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      jobId\n      type\n      payload\n      status\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      read\n      description\n      result\n      updatedAt\n      executionArn\n      failureReasons\n      createdAt\n      __typename\n    }\n  }\n", e.deleteJob = "\n  mutation DeleteJob(\n    $input: DeleteJobInput!\n    $condition: ModelJobConditionInput\n  ) {\n    deleteJob(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      jobId\n      type\n      payload\n      status\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      read\n      description\n      result\n      updatedAt\n      executionArn\n      failureReasons\n      createdAt\n      __typename\n    }\n  }\n", e.createWorkspace = "\n  mutation CreateWorkspace(\n    $input: CreateWorkspaceInput!\n    $condition: ModelWorkspaceConditionInput\n  ) {\n    createWorkspace(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      workspaceId\n      name\n      flow {\n        nextToken\n        __typename\n      }\n      integration {\n        nextToken\n        __typename\n      }\n      apis {\n        nextToken\n        __typename\n      }\n      outwardWebhook {\n        nextToken\n        __typename\n      }\n      intent {\n        nextToken\n        __typename\n      }\n      entity {\n        nextToken\n        __typename\n      }\n      cloudFunctions {\n        nextToken\n        __typename\n      }\n      apiGateWay {\n        nextToken\n        __typename\n      }\n      missedUtterance {\n        nextToken\n        __typename\n      }\n      databaseSchema {\n        nextToken\n        __typename\n      }\n      fileManagerFiles {\n        nextToken\n        __typename\n      }\n      variables\n      timeZone\n      language\n      sessionTimeout\n      unSupportedMessages\n      defaultTables\n      botId\n      botAliasId\n      botDraftId\n      tools\n      flowTemplate {\n        enterpriseId\n        mode\n        flowTemplateId\n        templateName\n        industry\n        templateIcon\n        businessGoal\n        channels\n        templateDescription\n        templateData\n        isPrivate\n        flowId\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      whatsappNumber\n      designConfig\n      publishConfig\n      botStatus\n      botFailureReason\n      botLastUpdated\n      publishLastUpdated\n      outwardWebhookUrl\n      isImported\n      trigger {\n        nextToken\n        __typename\n      }\n      saasTrigger {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateWorkspace = "\n  mutation UpdateWorkspace(\n    $input: UpdateWorkspaceInput!\n    $condition: ModelWorkspaceConditionInput\n  ) {\n    updateWorkspace(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      workspaceId\n      name\n      flow {\n        nextToken\n        __typename\n      }\n      integration {\n        nextToken\n        __typename\n      }\n      apis {\n        nextToken\n        __typename\n      }\n      outwardWebhook {\n        nextToken\n        __typename\n      }\n      intent {\n        nextToken\n        __typename\n      }\n      entity {\n        nextToken\n        __typename\n      }\n      cloudFunctions {\n        nextToken\n        __typename\n      }\n      apiGateWay {\n        nextToken\n        __typename\n      }\n      missedUtterance {\n        nextToken\n        __typename\n      }\n      databaseSchema {\n        nextToken\n        __typename\n      }\n      fileManagerFiles {\n        nextToken\n        __typename\n      }\n      variables\n      timeZone\n      language\n      sessionTimeout\n      unSupportedMessages\n      defaultTables\n      botId\n      botAliasId\n      botDraftId\n      tools\n      flowTemplate {\n        enterpriseId\n        mode\n        flowTemplateId\n        templateName\n        industry\n        templateIcon\n        businessGoal\n        channels\n        templateDescription\n        templateData\n        isPrivate\n        flowId\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      whatsappNumber\n      designConfig\n      publishConfig\n      botStatus\n      botFailureReason\n      botLastUpdated\n      publishLastUpdated\n      outwardWebhookUrl\n      isImported\n      trigger {\n        nextToken\n        __typename\n      }\n      saasTrigger {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteWorkspace = "\n  mutation DeleteWorkspace(\n    $input: DeleteWorkspaceInput!\n    $condition: ModelWorkspaceConditionInput\n  ) {\n    deleteWorkspace(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      workspaceId\n      name\n      flow {\n        nextToken\n        __typename\n      }\n      integration {\n        nextToken\n        __typename\n      }\n      apis {\n        nextToken\n        __typename\n      }\n      outwardWebhook {\n        nextToken\n        __typename\n      }\n      intent {\n        nextToken\n        __typename\n      }\n      entity {\n        nextToken\n        __typename\n      }\n      cloudFunctions {\n        nextToken\n        __typename\n      }\n      apiGateWay {\n        nextToken\n        __typename\n      }\n      missedUtterance {\n        nextToken\n        __typename\n      }\n      databaseSchema {\n        nextToken\n        __typename\n      }\n      fileManagerFiles {\n        nextToken\n        __typename\n      }\n      variables\n      timeZone\n      language\n      sessionTimeout\n      unSupportedMessages\n      defaultTables\n      botId\n      botAliasId\n      botDraftId\n      tools\n      flowTemplate {\n        enterpriseId\n        mode\n        flowTemplateId\n        templateName\n        industry\n        templateIcon\n        businessGoal\n        channels\n        templateDescription\n        templateData\n        isPrivate\n        flowId\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      whatsappNumber\n      designConfig\n      publishConfig\n      botStatus\n      botFailureReason\n      botLastUpdated\n      publishLastUpdated\n      outwardWebhookUrl\n      isImported\n      trigger {\n        nextToken\n        __typename\n      }\n      saasTrigger {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createApi = "\n  mutation CreateApi(\n    $input: CreateApiInput!\n    $condition: ModelApiConditionInput\n  ) {\n    createApi(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      apiId\n      name\n      config\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateApi = "\n  mutation UpdateApi(\n    $input: UpdateApiInput!\n    $condition: ModelApiConditionInput\n  ) {\n    updateApi(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      apiId\n      name\n      config\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteApi = "\n  mutation DeleteApi(\n    $input: DeleteApiInput!\n    $condition: ModelApiConditionInput\n  ) {\n    deleteApi(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      apiId\n      name\n      config\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createApiGateWay = "\n  mutation CreateApiGateWay(\n    $input: CreateApiGateWayInput!\n    $condition: ModelApiGateWayConditionInput\n  ) {\n    createApiGateWay(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      name\n      variable\n      payload\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      flow\n      interaction\n      nodeId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateApiGateWay = "\n  mutation UpdateApiGateWay(\n    $input: UpdateApiGateWayInput!\n    $condition: ModelApiGateWayConditionInput\n  ) {\n    updateApiGateWay(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      name\n      variable\n      payload\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      flow\n      interaction\n      nodeId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteApiGateWay = "\n  mutation DeleteApiGateWay(\n    $input: DeleteApiGateWayInput!\n    $condition: ModelApiGateWayConditionInput\n  ) {\n    deleteApiGateWay(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      name\n      variable\n      payload\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      flow\n      interaction\n      nodeId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createOutwardWebhook = "\n  mutation CreateOutwardWebhook(\n    $input: CreateOutwardWebhookInput!\n    $condition: ModelOutwardWebhookConditionInput\n  ) {\n    createOutwardWebhook(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      outwardWebhookId\n      name\n      config\n      description\n      filters\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateOutwardWebhook = "\n  mutation UpdateOutwardWebhook(\n    $input: UpdateOutwardWebhookInput!\n    $condition: ModelOutwardWebhookConditionInput\n  ) {\n    updateOutwardWebhook(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      outwardWebhookId\n      name\n      config\n      description\n      filters\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteOutwardWebhook = "\n  mutation DeleteOutwardWebhook(\n    $input: DeleteOutwardWebhookInput!\n    $condition: ModelOutwardWebhookConditionInput\n  ) {\n    deleteOutwardWebhook(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      outwardWebhookId\n      name\n      config\n      description\n      filters\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createIntent = "\n  mutation CreateIntent(\n    $input: CreateIntentInput!\n    $condition: ModelIntentConditionInput\n  ) {\n    createIntent(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      intentId\n      name\n      utterance\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      lexIntentId\n      nodeId\n      updatedAt\n      slots\n      createdAt\n      __typename\n    }\n  }\n", e.updateIntent = "\n  mutation UpdateIntent(\n    $input: UpdateIntentInput!\n    $condition: ModelIntentConditionInput\n  ) {\n    updateIntent(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      intentId\n      name\n      utterance\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      lexIntentId\n      nodeId\n      updatedAt\n      slots\n      createdAt\n      __typename\n    }\n  }\n", e.deleteIntent = "\n  mutation DeleteIntent(\n    $input: DeleteIntentInput!\n    $condition: ModelIntentConditionInput\n  ) {\n    deleteIntent(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      intentId\n      name\n      utterance\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      lexIntentId\n      nodeId\n      updatedAt\n      slots\n      createdAt\n      __typename\n    }\n  }\n", e.createEntity = "\n  mutation CreateEntity(\n    $input: CreateEntityInput!\n    $condition: ModelEntityConditionInput\n  ) {\n    createEntity(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      entityId\n      name\n      type\n      entityData\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      slotTypeId\n      resolutionStrategy\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateEntity = "\n  mutation UpdateEntity(\n    $input: UpdateEntityInput!\n    $condition: ModelEntityConditionInput\n  ) {\n    updateEntity(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      entityId\n      name\n      type\n      entityData\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      slotTypeId\n      resolutionStrategy\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteEntity = "\n  mutation DeleteEntity(\n    $input: DeleteEntityInput!\n    $condition: ModelEntityConditionInput\n  ) {\n    deleteEntity(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      entityId\n      name\n      type\n      entityData\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      slotTypeId\n      resolutionStrategy\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createDatabaseSchema = "\n  mutation CreateDatabaseSchema(\n    $input: CreateDatabaseSchemaInput!\n    $condition: ModelDatabaseSchemaConditionInput\n  ) {\n    createDatabaseSchema(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      databaseSchemaId\n      key\n      description\n      schema\n      values {\n        nextToken\n        __typename\n      }\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      timeFilterField\n      config\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateDatabaseSchema = "\n  mutation UpdateDatabaseSchema(\n    $input: UpdateDatabaseSchemaInput!\n    $condition: ModelDatabaseSchemaConditionInput\n  ) {\n    updateDatabaseSchema(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      databaseSchemaId\n      key\n      description\n      schema\n      values {\n        nextToken\n        __typename\n      }\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      timeFilterField\n      config\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteDatabaseSchema = "\n  mutation DeleteDatabaseSchema(\n    $input: DeleteDatabaseSchemaInput!\n    $condition: ModelDatabaseSchemaConditionInput\n  ) {\n    deleteDatabaseSchema(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      databaseSchemaId\n      key\n      description\n      schema\n      values {\n        nextToken\n        __typename\n      }\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      timeFilterField\n      config\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createDatabaseValues = "\n  mutation CreateDatabaseValues(\n    $input: CreateDatabaseValuesInput!\n    $condition: ModelDatabaseValuesConditionInput\n  ) {\n    createDatabaseValues(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      databaseValuesId\n      value\n      databaseSchema {\n        enterpriseId\n        mode\n        databaseSchemaId\n        key\n        description\n        schema\n        workspaceId\n        timeFilterField\n        config\n        createdAt\n        updatedAt\n        __typename\n      }\n      databaseSchemaId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateDatabaseValues = "\n  mutation UpdateDatabaseValues(\n    $input: UpdateDatabaseValuesInput!\n    $condition: ModelDatabaseValuesConditionInput\n  ) {\n    updateDatabaseValues(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      databaseValuesId\n      value\n      databaseSchema {\n        enterpriseId\n        mode\n        databaseSchemaId\n        key\n        description\n        schema\n        workspaceId\n        timeFilterField\n        config\n        createdAt\n        updatedAt\n        __typename\n      }\n      databaseSchemaId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteDatabaseValues = "\n  mutation DeleteDatabaseValues(\n    $input: DeleteDatabaseValuesInput!\n    $condition: ModelDatabaseValuesConditionInput\n  ) {\n    deleteDatabaseValues(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      databaseValuesId\n      value\n      databaseSchema {\n        enterpriseId\n        mode\n        databaseSchemaId\n        key\n        description\n        schema\n        workspaceId\n        timeFilterField\n        config\n        createdAt\n        updatedAt\n        __typename\n      }\n      databaseSchemaId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createFileManagerFiles = "\n  mutation CreateFileManagerFiles(\n    $input: CreateFileManagerFilesInput!\n    $condition: ModelFileManagerFilesConditionInput\n  ) {\n    createFileManagerFiles(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      fileManagerFilesId\n      nanoId\n      name\n      isFavorite\n      tags\n      description\n      url\n      size\n      fileType\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateFileManagerFiles = "\n  mutation UpdateFileManagerFiles(\n    $input: UpdateFileManagerFilesInput!\n    $condition: ModelFileManagerFilesConditionInput\n  ) {\n    updateFileManagerFiles(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      fileManagerFilesId\n      nanoId\n      name\n      isFavorite\n      tags\n      description\n      url\n      size\n      fileType\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteFileManagerFiles = "\n  mutation DeleteFileManagerFiles(\n    $input: DeleteFileManagerFilesInput!\n    $condition: ModelFileManagerFilesConditionInput\n  ) {\n    deleteFileManagerFiles(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      fileManagerFilesId\n      nanoId\n      name\n      isFavorite\n      tags\n      description\n      url\n      size\n      fileType\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createCloudFunctions = "\n  mutation CreateCloudFunctions(\n    $input: CreateCloudFunctionsInput!\n    $condition: ModelCloudFunctionsConditionInput\n  ) {\n    createCloudFunctions(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      cloudFunctionsId\n      name\n      type\n      functionName\n      functionARN\n      functionURL\n      code\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateCloudFunctions = "\n  mutation UpdateCloudFunctions(\n    $input: UpdateCloudFunctionsInput!\n    $condition: ModelCloudFunctionsConditionInput\n  ) {\n    updateCloudFunctions(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      cloudFunctionsId\n      name\n      type\n      functionName\n      functionARN\n      functionURL\n      code\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteCloudFunctions = "\n  mutation DeleteCloudFunctions(\n    $input: DeleteCloudFunctionsInput!\n    $condition: ModelCloudFunctionsConditionInput\n  ) {\n    deleteCloudFunctions(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      cloudFunctionsId\n      name\n      type\n      functionName\n      functionARN\n      functionURL\n      code\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createMissedUtterance = "\n  mutation CreateMissedUtterance(\n    $input: CreateMissedUtteranceInput!\n    $condition: ModelMissedUtteranceConditionInput\n  ) {\n    createMissedUtterance(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      missedUtteranceId\n      utterance\n      confidence\n      channel\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      updatedAt\n      nodeId\n      createdAt\n      __typename\n    }\n  }\n", e.updateMissedUtterance = "\n  mutation UpdateMissedUtterance(\n    $input: UpdateMissedUtteranceInput!\n    $condition: ModelMissedUtteranceConditionInput\n  ) {\n    updateMissedUtterance(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      missedUtteranceId\n      utterance\n      confidence\n      channel\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      updatedAt\n      nodeId\n      createdAt\n      __typename\n    }\n  }\n", e.deleteMissedUtterance = "\n  mutation DeleteMissedUtterance(\n    $input: DeleteMissedUtteranceInput!\n    $condition: ModelMissedUtteranceConditionInput\n  ) {\n    deleteMissedUtterance(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      missedUtteranceId\n      utterance\n      confidence\n      channel\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      updatedAt\n      nodeId\n      createdAt\n      __typename\n    }\n  }\n", e.createSaasTrigger = "\n  mutation CreateSaasTrigger(\n    $input: CreateSaasTriggerInput!\n    $condition: ModelSaasTriggerConditionInput\n  ) {\n    createSaasTrigger(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      saasTriggerId\n      name\n      type\n      triggerType\n      incomingPath\n      customerAttrPath\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      channel\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateSaasTrigger = "\n  mutation UpdateSaasTrigger(\n    $input: UpdateSaasTriggerInput!\n    $condition: ModelSaasTriggerConditionInput\n  ) {\n    updateSaasTrigger(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      saasTriggerId\n      name\n      type\n      triggerType\n      incomingPath\n      customerAttrPath\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      channel\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteSaasTrigger = "\n  mutation DeleteSaasTrigger(\n    $input: DeleteSaasTriggerInput!\n    $condition: ModelSaasTriggerConditionInput\n  ) {\n    deleteSaasTrigger(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      saasTriggerId\n      name\n      type\n      triggerType\n      incomingPath\n      customerAttrPath\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      channel\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createTrigger = "\n  mutation CreateTrigger(\n    $input: CreateTriggerInput!\n    $condition: ModelTriggerConditionInput\n  ) {\n    createTrigger(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      triggerId\n      name\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nodeId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.updateTrigger = "\n  mutation UpdateTrigger(\n    $input: UpdateTriggerInput!\n    $condition: ModelTriggerConditionInput\n  ) {\n    updateTrigger(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      triggerId\n      name\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nodeId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteTrigger = "\n  mutation DeleteTrigger(\n    $input: DeleteTriggerInput!\n    $condition: ModelTriggerConditionInput\n  ) {\n    deleteTrigger(input: $input, condition: $condition) {\n      enterpriseId\n      mode\n      triggerId\n      name\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nodeId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.campaignSync = "\n  mutation CampaignSync($input: CampaignSyncInput!) {\n    campaignSync(input: $input) {\n      campaignList\n      contactLists\n      success\n      message\n      __typename\n    }\n  }\n", e.deleteEnterpriseRole = "\n  mutation DeleteEnterpriseRole($id: ID!, $enterpriseId: ID!) {\n    deleteEnterpriseRole(id: $id, enterpriseId: $enterpriseId) {\n      deleted\n      __typename\n    }\n  }\n", e.createNodeTransaction = "\n  mutation CreateNodeTransaction(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $nodeId: ID!\n    $type: AWSJSON\n    $config: AWSJSON\n    $interactionId: ID!\n    $nextId: ID\n    $previousId: ID\n  ) {\n    createNodeTransaction(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      nodeId: $nodeId\n      type: $type\n      config: $config\n      interactionId: $interactionId\n      nextId: $nextId\n      previousId: $previousId\n    ) {\n      enterpriseId\n      mode\n      nodeId\n      type\n      config\n      interaction {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      interactionId\n      nextId\n      previousId\n      intentId\n      scheduleNode {\n        nextToken\n        __typename\n      }\n      healthTable {\n        nextToken\n        __typename\n      }\n      noError\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.deleteNodeTransaction = "\n  mutation DeleteNodeTransaction(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $interactionId: ID!\n    $nodeId: ID!\n    $previousId: ID\n    $nextId: ID\n  ) {\n    deleteNodeTransaction(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      interactionId: $interactionId\n      nodeId: $nodeId\n      previousId: $previousId\n      nextId: $nextId\n    ) {\n      enterpriseId\n      mode\n      nodeId\n      type\n      config\n      interaction {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      interactionId\n      nextId\n      previousId\n      intentId\n      scheduleNode {\n        nextToken\n        __typename\n      }\n      healthTable {\n        nextToken\n        __typename\n      }\n      noError\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.workspaceBuild = "\n  mutation WorkspaceBuild(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $workspaceId: ID!\n    $event: LEX_BUILD!\n  ) {\n    workspaceBuild(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      workspaceId: $workspaceId\n      event: $event\n    ) {\n      enterpriseId\n      mode\n      workspaceId\n      name\n      flow {\n        nextToken\n        __typename\n      }\n      integration {\n        nextToken\n        __typename\n      }\n      apis {\n        nextToken\n        __typename\n      }\n      outwardWebhook {\n        nextToken\n        __typename\n      }\n      intent {\n        nextToken\n        __typename\n      }\n      entity {\n        nextToken\n        __typename\n      }\n      cloudFunctions {\n        nextToken\n        __typename\n      }\n      apiGateWay {\n        nextToken\n        __typename\n      }\n      missedUtterance {\n        nextToken\n        __typename\n      }\n      databaseSchema {\n        nextToken\n        __typename\n      }\n      fileManagerFiles {\n        nextToken\n        __typename\n      }\n      variables\n      timeZone\n      language\n      sessionTimeout\n      unSupportedMessages\n      defaultTables\n      botId\n      botAliasId\n      botDraftId\n      tools\n      flowTemplate {\n        enterpriseId\n        mode\n        flowTemplateId\n        templateName\n        industry\n        templateIcon\n        businessGoal\n        channels\n        templateDescription\n        templateData\n        isPrivate\n        flowId\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      whatsappNumber\n      designConfig\n      publishConfig\n      botStatus\n      botFailureReason\n      botLastUpdated\n      publishLastUpdated\n      outwardWebhookUrl\n      isImported\n      trigger {\n        nextToken\n        __typename\n      }\n      saasTrigger {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.createOrUpdatePermission = "\n  mutation CreateOrUpdatePermission(\n    $enterpriseId: ID!\n    $permissions: AWSJSON!\n  ) {\n    createOrUpdatePermission(\n      enterpriseId: $enterpriseId\n      permissions: $permissions\n    ) {\n      enterpriseId\n      permissionId\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      create\n      read\n      update\n      delete\n      campaignApproval\n      module {\n        enterpriseId\n        moduleId\n        name\n        roleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      moduleId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.importExport = "\n  mutation ImportExport($input: ImportExportInput!) {\n    importExport(input: $input) {\n      success\n      message\n      publishList\n      url\n      __typename\n    }\n  }\n", e.bulkUpload = "\n  mutation BulkUpload(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $fileId: String!\n    $tableId: ID!\n  ) {\n    bulkUpload(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      fileId: $fileId\n      tableId: $tableId\n    ) {\n      success\n      message\n      publishList\n      url\n      __typename\n    }\n  }\n", e.addContactGroup = "\n  mutation AddContactGroup(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $contacts: [String!]!\n    $name: String!\n  ) {\n    addContactGroup(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      contacts: $contacts\n      name: $name\n    ) {\n      success\n      message\n      publishList\n      url\n      __typename\n    }\n  }\n", e.createGbmBot = "\n  mutation CreateGbmBot($input: CreateGbmBotInput!) {\n    createGbmBot(input: $input) {\n      created\n      statusCheckUrl\n      __typename\n    }\n  }\n", e.suggestedIntents = "\n  mutation SuggestedIntents($input: SuggestedIntentsInput!) {\n    suggestedIntents(input: $input) {\n      suggestionArr\n      __typename\n    }\n  }\n", e.checkIntentName = "\n  mutation CheckIntentName($input: CheckIntentNameInput!) {\n    checkIntentName(input: $input) {\n      created\n      __typename\n    }\n  }\n", e.campaignResponse = "\n  mutation CampaignResponse($input: CampaignResponseInput!) {\n    campaignResponse(input: $input) {\n      success\n      message\n      __typename\n    }\n  }\n" }, (n, e) => { Object.defineProperty(e, "__esModule", { value: !0 }), e.listIntegrations = e.getIntegration = e.listTableViews = e.getTableViews = e.orgUnitsByOrganizationId = e.listEnterprises = e.getEnterprise = e.listOrganizations = e.getOrganization = e.searchCustomerContactGroups = e.contactGroupContactByContactGroupId = e.customerContactGroupByCustomerId = e.listCustomerContactGroups = e.getCustomerContactGroup = e.searchContactGroups = e.listContactGroups = e.getContactGroup = e.profileByCustomerId = e.listProfiles = e.getProfile = e.searchCustomers = e.customerByParentId = e.customerByUpdatedAt = e.listCustomers = e.getCustomer = e.searchCampaignApprovers = e.campaignApproverByUser = e.campaignApproverByCampaignId = e.listCampaignApprovers = e.getCampaignApprover = e.searchCampaignAuditTrails = e.campaignAuditTrailByCampaignId = e.listCampaignAuditTrails = e.getCampaignAuditTrail = e.searchCampaignContactGroups = e.contactGroupCampaignByContactGroupId = e.campaignContactGroupByCampaignId = e.listCampaignContactGroups = e.getCampaignContactGroup = e.searchCampaignMessages = e.campaignMessageByStatus = e.campaignMessageByStatusByEnterpriseId = e.campaignMessageByCustomerId = e.campaignMessagesByCampaignId = e.listCampaignMessages = e.getCampaignMessage = e.campaignByStatus = e.campaignsByUser = e.listCampaigns = e.getCampaign = void 0, e.getCatalogue = e.searchLinkedAppMessages = e.linkedAppMessagesByLinkedAppCustomerId = e.listLinkedAppMessages = e.getLinkedAppMessage = e.linkedAppCustomerByCustomerId = e.linkedAppCustomersByLinkedAppId = e.listLinkedAppCustomers = e.getLinkedAppCustomer = e.listLinkedApps = e.getLinkedApp = e.scheduleNodeBySessionId = e.scheduleNodeByStatus = e.scheduleNodeByNodeId = e.listScheduleNodes = e.getScheduleNode = e.nodeByNodeId = e.nodeByInteractionId = e.listNodes = e.getNode = e.interactionByFlowId = e.listInteractions = e.getInteraction = e.flowByWorkspaceId = e.listFlows = e.getFlow = e.searchHealthTables = e.healthTableByNodeId = e.listHealthTables = e.getHealthTable = e.listAnalyticsDashboards = e.getAnalyticsDashboard = e.searchEventLabels = e.eventLabelsByCustomerId = e.listEventLabels = e.getEventLabel = e.listFlowTemplates = e.getFlowTemplate = e.templateByWATemplateId = e.templatesByIntegrationId = e.listTemplates = e.getTemplates = e.listMetaCatalogues = e.getMetaCatalogue = e.whatsappFlowsByIntegrationId = e.listWhatsappFlows = e.getWhatsappFlows = e.integrationsByWorkspaceIdAndChannel = e.integrationByFlowId = e.integrationsByWorkspaceId = void 0, e.listUsers = e.getUser = e.conversationByChannelMessageId = e.listConversationInfos = e.getConversationInfo = e.customerConversationByDate = e.conversationByDate = e.listConversations = e.getConversation = e.searchSessions = e.sessionsByHealthTableId = e.sessionByFederatedLiveToCustomer = e.sessionByAssignment = e.sessionByWorkspace = e.sessionByDate = e.sessionByUser = e.listSessions = e.getSession = e.searchBroadcastMessages = e.broadcastMessageByStatus = e.broadcastMessageByCustomerId = e.broadcastMessageByLinkedAppId = e.broadcastMessageByBroadcastId = e.listBroadcastMessages = e.getBroadcastMessage = e.searchBroadcasts = e.broadcastByStatus = e.listBroadcasts = e.getBroadcast = e.searchLinkedAppCollections = e.linkedAppCollectionByLinkedAppId = e.collectionLinkedAppByCollectionId = e.listLinkedAppCollections = e.getLinkedAppCollection = e.searchLinkedAppCatalogues = e.linkedAppCatalogueByLinkedAppId = e.catalogueLinkedAppByCatalogueId = e.listLinkedAppCatalogues = e.getLinkedAppCatalogue = e.searchCollectionCatalogues = e.catalogueCollectionByCatalogueId = e.catalogueCollectionByCollectionId = e.listCollectionCatalogues = e.getCollectionCatalogue = e.searchCollections = e.listCollections = e.getCollection = e.searchCatalogues = e.catalogueByMetaCatalogueId = e.listCatalogues = void 0, e.missedUtteranceByNodeId = e.missedUtteranceByWorkspaceId = e.listMissedUtterances = e.getMissedUtterance = e.cloudFunctionsByWorkspaceId = e.listCloudFunctions = e.getCloudFunctions = e.fileManagerFilesByWorkspaceId = e.listFileManagerFiles = e.getFileManagerFiles = e.searchDatabaseValues = e.databaseValuesByDatabaseSchemaId = e.listDatabaseValues = e.getDatabaseValues = e.databaseSchemaByWorkspaceId = e.listDatabaseSchemas = e.getDatabaseSchema = e.entityByWorkspaceId = e.listEntities = e.getEntity = e.searchIntents = e.intentByNodeId = e.intentByWorkspaceId = e.listIntents = e.getIntent = e.outwardWebhookByWorkspaceId = e.listOutwardWebhooks = e.getOutwardWebhook = e.apiGateWayByWorkspaceId = e.listApiGateWays = e.getApiGateWay = e.apisByWorkspaceId = e.listApis = e.getApi = e.listWorkspaces = e.getWorkspace = e.jobByUser = e.listJobs = e.getJob = e.notificationByUser = e.listNotifications = e.getNotification = e.listModules = e.getModule = e.permissionByRole = e.listPermissions = e.getPermission = e.listRoles = e.getRole = e.userByClerkUserId = void 0, e.quicksightGenerateAnonUrl = e.requestReportsCsv = e.triggerByWorkspaceId = e.listTriggers = e.getTrigger = e.saasTriggerByWorkspaceId = e.listSaasTriggers = e.getSaasTrigger = e.searchMissedUtterances = void 0, e.getCampaign = "\n  query GetCampaign($enterpriseId: ID!, $mode: MODE!, $campaignId: ID!) {\n    getCampaign(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      campaignId: $campaignId\n    ) {\n      enterpriseId\n      mode\n      campaignId\n      name\n      type\n      createdById\n      createdBy {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      segment\n      contactGroup {\n        nextToken\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      integrationId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      scheduleTime\n      variables\n      lastResponseSyncTime\n      responseSyncStatus\n      status\n      advancedConfig\n      campaignMessages {\n        nextToken\n        __typename\n      }\n      campaignApproverList {\n        nextToken\n        __typename\n      }\n      campaignAuditTrail {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listCampaigns = "\n  query ListCampaigns(\n    $enterpriseId: ID\n    $modeCampaignId: ModelCampaignPrimaryCompositeKeyConditionInput\n    $filter: ModelCampaignFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCampaigns(\n      enterpriseId: $enterpriseId\n      modeCampaignId: $modeCampaignId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        createdBy {\n            enterpriseId\n            userId\n            email\n            name\n            number\n            lName\n            avatarUrl\n            roleId\n            lastSignIn\n            active\n            availability\n            browserToken\n            isLoggedIn\n            updatedAt\n            profileDetails\n            notificationConfig\n            inviterUserIdClerk\n            clerkUserId\n            createdAt\n            __typename\n          }\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.campaignsByUser = "\n  query CampaignsByUser(\n    $enterpriseId: ID!\n    $modeCreatedById: ModelCampaignCampaignsByUserCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    campaignsByUser(\n      enterpriseId: $enterpriseId\n      modeCreatedById: $modeCreatedById\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.campaignByStatus = "\n  query CampaignByStatus(\n    $status: CampaignStatus!\n    $scheduleTime: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    campaignByStatus(\n      status: $status\n      scheduleTime: $scheduleTime\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getCampaignMessage = "\n  query GetCampaignMessage(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $campaignMessageId: ID!\n  ) {\n    getCampaignMessage(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      campaignMessageId: $campaignMessageId\n    ) {\n      enterpriseId\n      mode\n      campaignMessageId\n      scheduleTime\n      campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      integrationId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      createdAt\n      updatedAt\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      status\n      isForApproval\n      meta\n      channel\n      timeToRespond\n      retryCount\n      __typename\n    }\n  }\n", e.listCampaignMessages = "\n  query ListCampaignMessages(\n    $enterpriseId: ID\n    $modeCampaignMessageId: ModelCampaignMessagePrimaryCompositeKeyConditionInput\n    $filter: ModelCampaignMessageFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCampaignMessages(\n      enterpriseId: $enterpriseId\n      modeCampaignMessageId: $modeCampaignMessageId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.campaignMessagesByCampaignId = "\n  query CampaignMessagesByCampaignId(\n    $enterpriseId: ID!\n    $modeCampaignId: ModelCampaignMessageCampaignMessagesByCampaignIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    campaignMessagesByCampaignId(\n      enterpriseId: $enterpriseId\n      modeCampaignId: $modeCampaignId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.campaignMessageByCustomerId = "\n  query CampaignMessageByCustomerId(\n    $enterpriseId: ID!\n    $modeCustomerId: ModelCampaignMessageCampaignMessageByCustomerIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    campaignMessageByCustomerId(\n      enterpriseId: $enterpriseId\n      modeCustomerId: $modeCustomerId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.campaignMessageByStatusByEnterpriseId = "\n  query CampaignMessageByStatusByEnterpriseId(\n    $enterpriseId: ID!\n    $modeCampaignIdStatus: ModelCampaignMessageCampaignMessageByStatusByEnterpriseIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    campaignMessageByStatusByEnterpriseId(\n      enterpriseId: $enterpriseId\n      modeCampaignIdStatus: $modeCampaignIdStatus\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.campaignMessageByStatus = "\n  query CampaignMessageByStatus(\n    $status: CampaignMessageStatus!\n    $scheduleTime: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    campaignMessageByStatus(\n      status: $status\n      scheduleTime: $scheduleTime\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchCampaignMessages = "\n  query SearchCampaignMessages(\n    $filter: SearchableCampaignMessageFilterInput\n    $sort: [SearchableCampaignMessageSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCampaignMessageAggregationInput]\n  ) {\n    searchCampaignMessages(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getCampaignContactGroup = "\n  query GetCampaignContactGroup(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $campaignId: ID!\n    $contactGroupId: ID!\n  ) {\n    getCampaignContactGroup(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      campaignId: $campaignId\n      contactGroupId: $contactGroupId\n    ) {\n      enterpriseId\n      mode\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listCampaignContactGroups = "\n  query ListCampaignContactGroups(\n    $enterpriseId: ID\n    $modeCampaignIdContactGroupId: ModelCampaignContactGroupPrimaryCompositeKeyConditionInput\n    $filter: ModelCampaignContactGroupFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCampaignContactGroups(\n      enterpriseId: $enterpriseId\n      modeCampaignIdContactGroupId: $modeCampaignIdContactGroupId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignId\n        contactGroupId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.campaignContactGroupByCampaignId = "\n  query CampaignContactGroupByCampaignId(\n    $enterpriseId: ID!\n    $modeCampaignId: ModelCampaignContactGroupCampaignContactGroupByCampaignIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignContactGroupFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    campaignContactGroupByCampaignId(\n      enterpriseId: $enterpriseId\n      modeCampaignId: $modeCampaignId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignId\n        contactGroupId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.contactGroupCampaignByContactGroupId = "\n  query ContactGroupCampaignByContactGroupId(\n    $enterpriseId: ID!\n    $modeContactGroupId: ModelCampaignContactGroupContactGroupCampaignByContactGroupIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignContactGroupFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    contactGroupCampaignByContactGroupId(\n      enterpriseId: $enterpriseId\n      modeContactGroupId: $modeContactGroupId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignId\n        contactGroupId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchCampaignContactGroups = "\n  query SearchCampaignContactGroups(\n    $filter: SearchableCampaignContactGroupFilterInput\n    $sort: [SearchableCampaignContactGroupSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCampaignContactGroupAggregationInput]\n  ) {\n    searchCampaignContactGroups(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        campaignId\n        contactGroupId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getCampaignAuditTrail = "\n  query GetCampaignAuditTrail(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $auditTrailId: ID!\n  ) {\n    getCampaignAuditTrail(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      auditTrailId: $auditTrailId\n    ) {\n      enterpriseId\n      auditTrailId\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      approverId\n      senderId\n      mode\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      sender {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      approver {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      status\n      note\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listCampaignAuditTrails = "\n  query ListCampaignAuditTrails(\n    $enterpriseId: ID\n    $modeAuditTrailId: ModelCampaignAuditTrailPrimaryCompositeKeyConditionInput\n    $filter: ModelCampaignAuditTrailFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCampaignAuditTrails(\n      enterpriseId: $enterpriseId\n      modeAuditTrailId: $modeAuditTrailId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        auditTrailId\n        campaignId\n        approverId\n        senderId\n        Campaign {\n            enterpriseId\n            mode\n            campaignId\n            name\n            createdById\n            integrationId\n            integration {\n                enterpriseId\n                mode\n                integrationId\n                name\n                number\n              }\n          }\n        sender {\n            enterpriseId\n            userId\n            email\n            name\n            number\n            lName\n          }\n          approver {\n            enterpriseId\n            userId\n            email\n            name\n            number\n            lName\n          }\n        mode\n        status\n        note\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.campaignAuditTrailByCampaignId = "\n  query CampaignAuditTrailByCampaignId(\n    $enterpriseId: ID!\n    $modeCampaignId: ModelCampaignAuditTrailCampaignAuditTrailByCampaignIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignAuditTrailFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    campaignAuditTrailByCampaignId(\n      enterpriseId: $enterpriseId\n      modeCampaignId: $modeCampaignId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        auditTrailId\n        campaignId\n        approverId\n        senderId\n        mode\n        status\n        note\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchCampaignAuditTrails = "\n  query SearchCampaignAuditTrails(\n    $filter: SearchableCampaignAuditTrailFilterInput\n    $sort: [SearchableCampaignAuditTrailSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCampaignAuditTrailAggregationInput]\n  ) {\n    searchCampaignAuditTrails(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        auditTrailId\n        campaignId\n        approverId\n        senderId\n        mode\n        status\n        note\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getCampaignApprover = "\n  query GetCampaignApprover(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $campaignId: ID!\n    $approverId: ID!\n  ) {\n    getCampaignApprover(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      campaignId: $campaignId\n      approverId: $approverId\n    ) {\n      enterpriseId\n      Campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      approverId\n      approver {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      number\n      mode\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listCampaignApprovers = "\n  query ListCampaignApprovers(\n    $enterpriseId: ID\n    $modeCampaignIdApproverId: ModelCampaignApproverPrimaryCompositeKeyConditionInput\n    $filter: ModelCampaignApproverFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCampaignApprovers(\n      enterpriseId: $enterpriseId\n      modeCampaignIdApproverId: $modeCampaignIdApproverId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        campaignId\n        approverId\n        number\n        mode\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.campaignApproverByCampaignId = "\n  query CampaignApproverByCampaignId(\n    $enterpriseId: ID!\n    $modeCampaignId: ModelCampaignApproverCampaignApproverByCampaignIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignApproverFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    campaignApproverByCampaignId(\n      enterpriseId: $enterpriseId\n      modeCampaignId: $modeCampaignId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        campaignId\n        approverId\n        approver {\n            enterpriseId\n            userId\n            email\n            name\n            number\n            lName\n            avatarUrl\n            roleId\n            lastSignIn\n            active\n            availability\n            browserToken\n            isLoggedIn\n            updatedAt\n            profileDetails\n            notificationConfig\n            inviterUserIdClerk\n            clerkUserId\n            createdAt\n            __typename\n          }\n        Campaign {\n            enterpriseId\n            mode\n            campaignId\n            name\n            type\n            createdById\n            segment\n            flowId\n            integrationId\n            scheduleTime\n            variables\n            lastResponseSyncTime\n            responseSyncStatus\n            status\n            advancedConfig\n            createdAt\n            updatedAt\n            __typename\n          }\n        number\n        mode\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.campaignApproverByUser = "\n  query CampaignApproverByUser(\n    $enterpriseId: ID!\n    $modeApproverId: ModelCampaignApproverCampaignApproverByUserCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCampaignApproverFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    campaignApproverByUser(\n      enterpriseId: $enterpriseId\n      modeApproverId: $modeApproverId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        campaignId\n        Campaign {\n            enterpriseId\n            mode\n            campaignId\n            name\n            type\n            createdById\n            segment\n            flowId\n            integrationId\n            scheduleTime\n            variables\n            lastResponseSyncTime\n            responseSyncStatus\n            status\n            advancedConfig\n            createdAt\n            updatedAt\n            __typename\n          }\n        approverId\n        number\n        mode\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchCampaignApprovers = "\n  query SearchCampaignApprovers(\n    $filter: SearchableCampaignApproverFilterInput\n    $sort: [SearchableCampaignApproverSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCampaignApproverAggregationInput]\n  ) {\n    searchCampaignApprovers(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        campaignId\n        approverId\n        number\n        mode\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getCustomer = "\n  query GetCustomer($enterpriseId: ID!, $mode: MODE!, $customerId: ID!) {\n    getCustomer(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      customerId: $customerId\n    ) {\n      enterpriseId\n      mode\n      customerId\n      name\n      email\n      firstName\n      lastName\n      variables\n      profile {\n        nextToken\n        __typename\n      }\n      tags\n      contactGroup {\n        nextToken\n        __typename\n      }\n      parent\n      parentId\n      sessionsByDate {\n        nextToken\n        __typename\n      }\n      conversationByDate {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      campaignMessage {\n        nextToken\n        __typename\n      }\n      federatedSessions {\n        nextToken\n        __typename\n      }\n      linkedApps {\n        nextToken\n        __typename\n      }\n      broadcastMessage {\n        nextToken\n        __typename\n      }\n      blacklisted\n      blacklistReason\n      blacklistedAt\n      __typename\n    }\n  }\n", e.listCustomers = "\n  query ListCustomers(\n    $enterpriseId: ID\n    $modeCustomerId: ModelCustomerPrimaryCompositeKeyConditionInput\n    $filter: ModelCustomerFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCustomers(\n      enterpriseId: $enterpriseId\n      modeCustomerId: $modeCustomerId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.customerByUpdatedAt = "\n  query CustomerByUpdatedAt(\n    $enterpriseId: ID!\n    $updatedAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCustomerFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    customerByUpdatedAt(\n      enterpriseId: $enterpriseId\n      updatedAt: $updatedAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.customerByParentId = "\n  query CustomerByParentId(\n    $parentId: String!\n    $updatedAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCustomerFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    customerByParentId(\n      parentId: $parentId\n      updatedAt: $updatedAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchCustomers = "\n  query SearchCustomers(\n    $filter: SearchableCustomerFilterInput\n    $sort: [SearchableCustomerSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCustomerAggregationInput]\n  ) {\n    searchCustomers(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getProfile = "\n  query GetProfile(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $channel: CHANNEL!\n    $profileId: ID!\n  ) {\n    getProfile(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      channel: $channel\n      profileId: $profileId\n    ) {\n      enterpriseId\n      mode\n      profileId\n      maskedProfileId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      channel\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listProfiles = "\n  query ListProfiles(\n    $enterpriseId: ID\n    $modeChannelProfileId: ModelProfilePrimaryCompositeKeyConditionInput\n    $filter: ModelProfileFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listProfiles(\n      enterpriseId: $enterpriseId\n      modeChannelProfileId: $modeChannelProfileId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        profileId\n        maskedProfileId\n        customerId\n        channel\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.profileByCustomerId = "\n  query ProfileByCustomerId(\n    $enterpriseId: ID!\n    $modeCustomerId: ModelProfileProfileByCustomerIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelProfileFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    profileByCustomerId(\n      enterpriseId: $enterpriseId\n      modeCustomerId: $modeCustomerId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        profileId\n        maskedProfileId\n        customerId\n        channel\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getContactGroup = "\n  query GetContactGroup(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $contactGroupId: ID!\n  ) {\n    getContactGroup(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      contactGroupId: $contactGroupId\n    ) {\n      enterpriseId\n      mode\n      contactGroupId\n      name\n      campaign {\n        nextToken\n        __typename\n      }\n      contact {\n        nextToken\n        __typename\n      }\n      updatedAt\n      dynamic\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      createdAt\n      __typename\n    }\n  }\n", e.listContactGroups = "\n  query ListContactGroups(\n    $enterpriseId: ID\n    $modeContactGroupId: ModelContactGroupPrimaryCompositeKeyConditionInput\n    $filter: ModelContactGroupFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listContactGroups(\n      enterpriseId: $enterpriseId\n      modeContactGroupId: $modeContactGroupId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchContactGroups = "\n  query SearchContactGroups(\n    $filter: SearchableContactGroupFilterInput\n    $sort: [SearchableContactGroupSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableContactGroupAggregationInput]\n  ) {\n    searchContactGroups(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getCustomerContactGroup = "\n  query GetCustomerContactGroup(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $customerId: ID!\n    $contactGroupId: ID!\n  ) {\n    getCustomerContactGroup(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      customerId: $customerId\n      contactGroupId: $contactGroupId\n    ) {\n      enterpriseId\n      mode\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.listCustomerContactGroups = "\n  query ListCustomerContactGroups(\n    $enterpriseId: ID\n    $modeCustomerIdContactGroupId: ModelCustomerContactGroupPrimaryCompositeKeyConditionInput\n    $filter: ModelCustomerContactGroupFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCustomerContactGroups(\n      enterpriseId: $enterpriseId\n      modeCustomerIdContactGroupId: $modeCustomerIdContactGroupId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerId\n        contactGroupId\n        updatedAt\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.customerContactGroupByCustomerId = "\n  query CustomerContactGroupByCustomerId(\n    $enterpriseId: ID!\n    $modeCustomerId: ModelCustomerContactGroupCustomerContactGroupByCustomerIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCustomerContactGroupFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    customerContactGroupByCustomerId(\n      enterpriseId: $enterpriseId\n      modeCustomerId: $modeCustomerId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerId\n        contactGroupId\n        updatedAt\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.contactGroupContactByContactGroupId = "\n  query ContactGroupContactByContactGroupId(\n    $enterpriseId: ID!\n    $modeContactGroupId: ModelCustomerContactGroupContactGroupContactByContactGroupIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCustomerContactGroupFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    contactGroupContactByContactGroupId(\n      enterpriseId: $enterpriseId\n      modeContactGroupId: $modeContactGroupId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerId\n        contactGroupId\n        updatedAt\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchCustomerContactGroups = "\n  query SearchCustomerContactGroups(\n    $filter: SearchableCustomerContactGroupFilterInput\n    $sort: [SearchableCustomerContactGroupSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCustomerContactGroupAggregationInput]\n  ) {\n    searchCustomerContactGroups(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerId\n        contactGroupId\n        updatedAt\n        createdAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getOrganization = "\n  query GetOrganization($organizationId: ID!, $brandId: String!) {\n    getOrganization(organizationId: $organizationId, brandId: $brandId) {\n      organizationId\n      brandId\n      brandName\n      name\n      orgUnits {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listOrganizations = "\n  query ListOrganizations(\n    $organizationId: ID\n    $brandId: ModelStringKeyConditionInput\n    $filter: ModelOrganizationFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listOrganizations(\n      organizationId: $organizationId\n      brandId: $brandId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        organizationId\n        brandId\n        brandName\n        name\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getEnterprise = "\n  query GetEnterprise($enterpriseId: ID!) {\n    getEnterprise(enterpriseId: $enterpriseId) {\n      enterpriseId\n      name\n      variables\n      onboarding\n      contactAttributes\n      brandId\n      organizationId\n      organization {\n        organizationId\n        brandId\n        brandName\n        name\n        createdAt\n        updatedAt\n        __typename\n      }\n      isActive\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listEnterprises = "\n  query ListEnterprises(\n    $enterpriseId: ID\n    $filter: ModelEnterpriseFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listEnterprises(\n      enterpriseId: $enterpriseId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        name\n        variables\n        onboarding\n        contactAttributes\n        brandId\n        organizationId\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.orgUnitsByOrganizationId = "\n  query OrgUnitsByOrganizationId(\n    $organizationId: ID!\n    $brandId: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelEnterpriseFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    orgUnitsByOrganizationId(\n      organizationId: $organizationId\n      brandId: $brandId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        name\n        variables\n        onboarding\n        contactAttributes\n        brandId\n        organizationId\n        isActive\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getTableViews = "\n  query GetTableViews($enterpriseId: ID!, $mode: MODE!, $tableViewsId: ID!) {\n    getTableViews(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      tableViewsId: $tableViewsId\n    ) {\n      enterpriseId\n      mode\n      tableViewsId\n      name\n      type\n      databaseKey\n      viewConfig\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.listTableViews = "\n  query ListTableViews(\n    $enterpriseId: ID\n    $modeTableViewsId: ModelTableViewsPrimaryCompositeKeyConditionInput\n    $filter: ModelTableViewsFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listTableViews(\n      enterpriseId: $enterpriseId\n      modeTableViewsId: $modeTableViewsId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        tableViewsId\n        name\n        type\n        databaseKey\n        viewConfig\n        updatedAt\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getIntegration = "\n  query GetIntegration($enterpriseId: ID!, $mode: MODE!, $integrationId: ID!) {\n    getIntegration(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      integrationId: $integrationId\n    ) {\n      enterpriseId\n      mode\n      integrationId\n      name\n      number\n      logo\n      details\n      config\n      channel\n      saas\n      primary\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      templates {\n        nextToken\n        __typename\n      }\n      whatsappFlows {\n        nextToken\n        __typename\n      }\n      campaigns {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignMessages {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      metaCatalogueId\n      metaCatalogue {\n        enterpriseId\n        mode\n        integrationId\n        metaCatalogueId\n        name\n        isCartEnabled\n        isCatalogVisible\n        createdAt\n        updatedAt\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listIntegrations = "\n  query ListIntegrations(\n    $enterpriseId: ID\n    $modeIntegrationId: ModelIntegrationPrimaryCompositeKeyConditionInput\n    $filter: ModelIntegrationFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listIntegrations(\n      enterpriseId: $enterpriseId\n      modeIntegrationId: $modeIntegrationId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.integrationsByWorkspaceId = "\n  query IntegrationsByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelIntegrationIntegrationsByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelIntegrationFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    integrationsByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.integrationByFlowId = "\n  query IntegrationByFlowId(\n    $enterpriseId: ID!\n    $modeFlowId: ModelIntegrationIntegrationByFlowIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelIntegrationFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    integrationByFlowId(\n      enterpriseId: $enterpriseId\n      modeFlowId: $modeFlowId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.integrationsByWorkspaceIdAndChannel = "\n  query IntegrationsByWorkspaceIdAndChannel(\n    $workspaceId: ID!\n    $channel: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelIntegrationFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    integrationsByWorkspaceIdAndChannel(\n      workspaceId: $workspaceId\n      channel: $channel\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getWhatsappFlows = "\n  query GetWhatsappFlows(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $whatsappFlowId: ID!\n  ) {\n    getWhatsappFlows(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      whatsappFlowId: $whatsappFlowId\n    ) {\n      enterpriseId\n      mode\n      whatsappFlowId\n      name\n      status\n      config\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listWhatsappFlows = "\n  query ListWhatsappFlows(\n    $enterpriseId: ID\n    $modeWhatsappFlowId: ModelWhatsappFlowsPrimaryCompositeKeyConditionInput\n    $filter: ModelWhatsappFlowsFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listWhatsappFlows(\n      enterpriseId: $enterpriseId\n      modeWhatsappFlowId: $modeWhatsappFlowId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        whatsappFlowId\n        name\n        status\n        config\n        integrationId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.whatsappFlowsByIntegrationId = "\n  query WhatsappFlowsByIntegrationId(\n    $enterpriseId: ID!\n    $modeIntegrationId: ModelWhatsappFlowsWhatsappFlowsByIntegrationIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelWhatsappFlowsFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    whatsappFlowsByIntegrationId(\n      enterpriseId: $enterpriseId\n      modeIntegrationId: $modeIntegrationId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        whatsappFlowId\n        name\n        status\n        config\n        integrationId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getMetaCatalogue = "\n  query GetMetaCatalogue(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $metaCatalogueId: ID!\n  ) {\n    getMetaCatalogue(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      metaCatalogueId: $metaCatalogueId\n    ) {\n      enterpriseId\n      mode\n      integrationId\n      metaCatalogueId\n      name\n      isCartEnabled\n      isCatalogVisible\n      catalogues {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listMetaCatalogues = "\n  query ListMetaCatalogues(\n    $enterpriseId: ID\n    $modeMetaCatalogueId: ModelMetaCataloguePrimaryCompositeKeyConditionInput\n    $filter: ModelMetaCatalogueFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listMetaCatalogues(\n      enterpriseId: $enterpriseId\n      modeMetaCatalogueId: $modeMetaCatalogueId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        integrationId\n        metaCatalogueId\n        name\n        isCartEnabled\n        isCatalogVisible\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getTemplates = "\n  query GetTemplates($enterpriseId: ID!, $mode: MODE!, $templatesId: ID!) {\n    getTemplates(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      templatesId: $templatesId\n    ) {\n      enterpriseId\n      mode\n      templatesId\n      channel\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      title\n      category\n      description\n      descriptionHtml\n      status\n      templateId\n      namespaceId\n      config\n      language\n      statusMessage\n      reSubmit\n      phoneNo\n      templateType\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listTemplates = "\n  query ListTemplates(\n    $enterpriseId: ID\n    $modeTemplatesId: ModelTemplatesPrimaryCompositeKeyConditionInput\n    $filter: ModelTemplatesFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listTemplates(\n      enterpriseId: $enterpriseId\n      modeTemplatesId: $modeTemplatesId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        templatesId\n        channel\n        integrationId\n        title\n        category\n        description\n        descriptionHtml\n        status\n        templateId\n        namespaceId\n        config\n        language\n        statusMessage\n        reSubmit\n        phoneNo\n        templateType\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.templatesByIntegrationId = "\n  query TemplatesByIntegrationId(\n    $enterpriseId: ID!\n    $modeIntegrationId: ModelTemplatesTemplatesByIntegrationIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelTemplatesFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    templatesByIntegrationId(\n      enterpriseId: $enterpriseId\n      modeIntegrationId: $modeIntegrationId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        templatesId\n        channel\n        integrationId\n        title\n        category\n        description\n        descriptionHtml\n        status\n        templateId\n        namespaceId\n        config\n        language\n        statusMessage\n        reSubmit\n        phoneNo\n        templateType\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.templateByWATemplateId = "\n  query TemplateByWATemplateId(\n    $templateId: String!\n    $sortDirection: ModelSortDirection\n    $filter: ModelTemplatesFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    templateByWATemplateId(\n      templateId: $templateId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        templatesId\n        channel\n        integrationId\n        title\n        category\n        description\n        descriptionHtml\n        status\n        templateId\n        namespaceId\n        config\n        language\n        statusMessage\n        reSubmit\n        phoneNo\n        templateType\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getFlowTemplate = "\n  query GetFlowTemplate(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $flowTemplateId: ID!\n  ) {\n    getFlowTemplate(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      flowTemplateId: $flowTemplateId\n    ) {\n      enterpriseId\n      mode\n      flowTemplateId\n      templateName\n      industry\n      templateIcon\n      businessGoal\n      channels\n      templateDescription\n      templateData\n      isPrivate\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listFlowTemplates = "\n  query ListFlowTemplates(\n    $enterpriseId: ID\n    $modeFlowTemplateId: ModelFlowTemplatePrimaryCompositeKeyConditionInput\n    $filter: ModelFlowTemplateFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listFlowTemplates(\n      enterpriseId: $enterpriseId\n      modeFlowTemplateId: $modeFlowTemplateId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        flowTemplateId\n        templateName\n        industry\n        templateIcon\n        businessGoal\n        channels\n        templateDescription\n        templateData\n        isPrivate\n        flowId\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getEventLabel = "\n  query GetEventLabel(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $conversationId: ID!\n    $customerId: ID!\n    $labelId: ID!\n  ) {\n    getEventLabel(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      conversationId: $conversationId\n      customerId: $customerId\n      labelId: $labelId\n    ) {\n      enterpriseId\n      labelId\n      mode\n      createdAt\n      updatedAt\n      conversationId\n      sessionId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      interactionId\n      flowId\n      nodeId\n      campaignId\n      customerId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      workspaceId\n      type\n      label\n      value\n      previousLabel\n      previousValue\n      __typename\n    }\n  }\n", e.listEventLabels = "\n  query ListEventLabels(\n    $enterpriseId: ID\n    $modeConversationIdCustomerIdLabelId: ModelEventLabelPrimaryCompositeKeyConditionInput\n    $filter: ModelEventLabelFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listEventLabels(\n      enterpriseId: $enterpriseId\n      modeConversationIdCustomerIdLabelId: $modeConversationIdCustomerIdLabelId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        labelId\n        mode\n        createdAt\n        updatedAt\n        conversationId\n        sessionId\n        interactionId\n        flowId\n        nodeId\n        campaignId\n        customerId\n        workspaceId\n        type\n        label\n        value\n        previousLabel\n        previousValue\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.eventLabelsByCustomerId = "\n  query EventLabelsByCustomerId(\n    $enterpriseId: ID!\n    $modeCustomerId: ModelEventLabelEventLabelsByCustomerIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelEventLabelFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    eventLabelsByCustomerId(\n      enterpriseId: $enterpriseId\n      modeCustomerId: $modeCustomerId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        labelId\n        mode\n        createdAt\n        updatedAt\n        conversationId\n        sessionId\n        interactionId\n        flowId\n        nodeId\n        campaignId\n        customerId\n        workspaceId\n        type\n        label\n        value\n        previousLabel\n        previousValue\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchEventLabels = "\n  query SearchEventLabels(\n    $filter: SearchableEventLabelFilterInput\n    $sort: [SearchableEventLabelSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableEventLabelAggregationInput]\n  ) {\n    searchEventLabels(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        labelId\n        mode\n        createdAt\n        updatedAt\n        conversationId\n        sessionId\n        interactionId\n        flowId\n        nodeId\n        campaignId\n        customerId\n        workspaceId\n        type\n        label\n        value\n        previousLabel\n        previousValue\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getAnalyticsDashboard = "\n  query GetAnalyticsDashboard(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $analyticsDashboardId: ID!\n  ) {\n    getAnalyticsDashboard(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      analyticsDashboardId: $analyticsDashboardId\n    ) {\n      enterpriseId\n      mode\n      analyticsDashboardId\n      name\n      config\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listAnalyticsDashboards = "\n  query ListAnalyticsDashboards(\n    $enterpriseId: ID\n    $modeAnalyticsDashboardId: ModelAnalyticsDashboardPrimaryCompositeKeyConditionInput\n    $filter: ModelAnalyticsDashboardFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listAnalyticsDashboards(\n      enterpriseId: $enterpriseId\n      modeAnalyticsDashboardId: $modeAnalyticsDashboardId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        analyticsDashboardId\n        name\n        config\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getHealthTable = "\n  query GetHealthTable($enterpriseId: ID!, $mode: MODE!, $healthTableId: ID!) {\n    getHealthTable(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      healthTableId: $healthTableId\n    ) {\n      enterpriseId\n      mode\n      healthTableId\n      title\n      read\n      count\n      status\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      session {\n        nextToken\n        __typename\n      }\n      nodeId\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      description\n      functionOrigin\n      type\n      subType\n      channel\n      updatedAt\n      createdAt\n      link\n      config\n      checkFlag\n      __typename\n    }\n  }\n", e.listHealthTables = "\n  query ListHealthTables(\n    $enterpriseId: ID\n    $modeHealthTableId: ModelHealthTablePrimaryCompositeKeyConditionInput\n    $filter: ModelHealthTableFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listHealthTables(\n      enterpriseId: $enterpriseId\n      modeHealthTableId: $modeHealthTableId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        healthTableId\n        title\n        read\n        count\n        status\n        nodeId\n        userId\n        description\n        functionOrigin\n        type\n        subType\n        channel\n        updatedAt\n        createdAt\n        link\n        config\n        checkFlag\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.healthTableByNodeId = "\n  query HealthTableByNodeId(\n    $nodeId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelHealthTableFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    healthTableByNodeId(\n      nodeId: $nodeId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        healthTableId\n        title\n        read\n        count\n        status\n        nodeId\n        userId\n        description\n        functionOrigin\n        type\n        subType\n        channel\n        updatedAt\n        createdAt\n        link\n        config\n        checkFlag\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchHealthTables = "\n  query SearchHealthTables(\n    $filter: SearchableHealthTableFilterInput\n    $sort: [SearchableHealthTableSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableHealthTableAggregationInput]\n  ) {\n    searchHealthTables(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        healthTableId\n        title\n        read\n        count\n        status\n        nodeId\n        userId\n        description\n        functionOrigin\n        type\n        subType\n        channel\n        updatedAt\n        createdAt\n        link\n        config\n        checkFlag\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getFlow = "\n  query GetFlow($enterpriseId: ID!, $mode: MODE!, $flowId: ID!) {\n    getFlow(enterpriseId: $enterpriseId, mode: $mode, flowId: $flowId) {\n      enterpriseId\n      mode\n      flowId\n      name\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      interaction {\n        nextToken\n        __typename\n      }\n      integration {\n        nextToken\n        __typename\n      }\n      start {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      startId\n      fallback {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      fallbackId\n      idle {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      idleId\n      campaign {\n        enterpriseId\n        mode\n        campaignId\n        name\n        type\n        createdById\n        segment\n        flowId\n        integrationId\n        scheduleTime\n        variables\n        lastResponseSyncTime\n        responseSyncStatus\n        status\n        advancedConfig\n        createdAt\n        updatedAt\n        __typename\n      }\n      campaignId\n      isImported\n      status\n      settings\n      flowTemplate {\n        enterpriseId\n        mode\n        flowTemplateId\n        templateName\n        industry\n        templateIcon\n        businessGoal\n        channels\n        templateDescription\n        templateData\n        isPrivate\n        flowId\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowTemplateId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listFlows = "\n  query ListFlows(\n    $enterpriseId: ID\n    $modeFlowId: ModelFlowPrimaryCompositeKeyConditionInput\n    $filter: ModelFlowFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listFlows(\n      enterpriseId: $enterpriseId\n      modeFlowId: $modeFlowId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.flowByWorkspaceId = "\n  query FlowByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelFlowFlowByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelFlowFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    flowByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getInteraction = "\n  query GetInteraction($enterpriseId: ID!, $mode: MODE!, $interactionId: ID!) {\n    getInteraction(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      interactionId: $interactionId\n    ) {\n      enterpriseId\n      mode\n      interactionId\n      name\n      nodes {\n        nextToken\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listInteractions = "\n  query ListInteractions(\n    $enterpriseId: ID\n    $modeInteractionId: ModelInteractionPrimaryCompositeKeyConditionInput\n    $filter: ModelInteractionFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listInteractions(\n      enterpriseId: $enterpriseId\n      modeInteractionId: $modeInteractionId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.interactionByFlowId = "\n  query InteractionByFlowId(\n    $enterpriseId: ID!\n    $modeFlowId: ModelInteractionInteractionByFlowIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelInteractionFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    interactionByFlowId(\n      enterpriseId: $enterpriseId\n      modeFlowId: $modeFlowId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getNode = "\n  query GetNode($enterpriseId: ID!, $mode: MODE!, $nodeId: ID!) {\n    getNode(enterpriseId: $enterpriseId, mode: $mode, nodeId: $nodeId) {\n      enterpriseId\n      mode\n      nodeId\n      type\n      config\n      interaction {\n        enterpriseId\n        mode\n        interactionId\n        name\n        flowId\n        createdAt\n        updatedAt\n        __typename\n      }\n      interactionId\n      nextId\n      previousId\n      intentId\n      scheduleNode {\n        nextToken\n        __typename\n      }\n      healthTable {\n        nextToken\n        __typename\n      }\n      noError\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listNodes = "\n  query ListNodes(\n    $enterpriseId: ID\n    $modeNodeId: ModelNodePrimaryCompositeKeyConditionInput\n    $filter: ModelNodeFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listNodes(\n      enterpriseId: $enterpriseId\n      modeNodeId: $modeNodeId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.nodeByInteractionId = "\n  query NodeByInteractionId(\n    $enterpriseId: ID!\n    $modeInteractionId: ModelNodeNodeByInteractionIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelNodeFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    nodeByInteractionId(\n      enterpriseId: $enterpriseId\n      modeInteractionId: $modeInteractionId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.nodeByNodeId = "\n  query NodeByNodeId(\n    $nodeId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelNodeFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    nodeByNodeId(\n      nodeId: $nodeId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getScheduleNode = "\n  query GetScheduleNode(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $scheduleNodeId: ID!\n  ) {\n    getScheduleNode(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      scheduleNodeId: $scheduleNodeId\n    ) {\n      enterpriseId\n      mode\n      scheduleNodeId\n      status\n      time\n      updatedAt\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nodeId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      createdAt\n      __typename\n    }\n  }\n", e.listScheduleNodes = "\n  query ListScheduleNodes(\n    $enterpriseId: ID\n    $modeScheduleNodeId: ModelScheduleNodePrimaryCompositeKeyConditionInput\n    $filter: ModelScheduleNodeFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listScheduleNodes(\n      enterpriseId: $enterpriseId\n      modeScheduleNodeId: $modeScheduleNodeId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        scheduleNodeId\n        status\n        time\n        updatedAt\n        nodeId\n        sessionId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.scheduleNodeByNodeId = "\n  query ScheduleNodeByNodeId(\n    $enterpriseId: ID!\n    $modeNodeId: ModelScheduleNodeScheduleNodeByNodeIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelScheduleNodeFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    scheduleNodeByNodeId(\n      enterpriseId: $enterpriseId\n      modeNodeId: $modeNodeId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        scheduleNodeId\n        status\n        time\n        updatedAt\n        nodeId\n        sessionId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.scheduleNodeByStatus = "\n  query ScheduleNodeByStatus(\n    $status: ScheduleNodeStatus!\n    $time: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelScheduleNodeFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    scheduleNodeByStatus(\n      status: $status\n      time: $time\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        scheduleNodeId\n        status\n        time\n        updatedAt\n        nodeId\n        sessionId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.scheduleNodeBySessionId = "\n  query ScheduleNodeBySessionId(\n    $sessionId: ID!\n    $updatedAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelScheduleNodeFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    scheduleNodeBySessionId(\n      sessionId: $sessionId\n      updatedAt: $updatedAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        scheduleNodeId\n        status\n        time\n        updatedAt\n        nodeId\n        sessionId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getLinkedApp = "\n  query GetLinkedApp($enterpriseId: ID!, $mode: MODE!, $linkedAppId: ID!) {\n    getLinkedApp(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      linkedAppId: $linkedAppId\n    ) {\n      enterpriseId\n      mode\n      linkedAppId\n      name\n      role\n      email\n      lastSyncTime\n      status\n      qrCode\n      details\n      config\n      customers {\n        nextToken\n        __typename\n      }\n      collection {\n        nextToken\n        __typename\n      }\n      catalogue {\n        nextToken\n        __typename\n      }\n      broadcastMessage {\n        nextToken\n        __typename\n      }\n      contactGroup {\n        enterpriseId\n        mode\n        contactGroupId\n        name\n        updatedAt\n        dynamic\n        linkedAppId\n        createdAt\n        __typename\n      }\n      contactGroupId\n      isBusinessAccount\n      isCartEnabled\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listLinkedApps = "\n  query ListLinkedApps(\n    $enterpriseId: ID\n    $modeLinkedAppId: ModelLinkedAppPrimaryCompositeKeyConditionInput\n    $filter: ModelLinkedAppFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listLinkedApps(\n      enterpriseId: $enterpriseId\n      modeLinkedAppId: $modeLinkedAppId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getLinkedAppCustomer = "\n  query GetLinkedAppCustomer(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $customerId: ID!\n    $linkedAppId: ID!\n  ) {\n    getLinkedAppCustomer(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      customerId: $customerId\n      linkedAppId: $linkedAppId\n    ) {\n      enterpriseId\n      mode\n      customerDetails\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      updatedAt\n      messages {\n        nextToken\n        __typename\n      }\n      createdAt\n      __typename\n    }\n  }\n", e.listLinkedAppCustomers = "\n  query ListLinkedAppCustomers(\n    $enterpriseId: ID\n    $modeCustomerIdLinkedAppId: ModelLinkedAppCustomerPrimaryCompositeKeyConditionInput\n    $filter: ModelLinkedAppCustomerFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listLinkedAppCustomers(\n      enterpriseId: $enterpriseId\n      modeCustomerIdLinkedAppId: $modeCustomerIdLinkedAppId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerDetails\n        customerId\n        linkedAppId\n        updatedAt\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.linkedAppCustomersByLinkedAppId = "\n  query LinkedAppCustomersByLinkedAppId(\n    $enterpriseId: ID!\n    $modeLinkedAppId: ModelLinkedAppCustomerLinkedAppCustomersByLinkedAppIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelLinkedAppCustomerFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    linkedAppCustomersByLinkedAppId(\n      enterpriseId: $enterpriseId\n      modeLinkedAppId: $modeLinkedAppId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerDetails\n        customerId\n        linkedAppId\n        updatedAt\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.linkedAppCustomerByCustomerId = "\n  query LinkedAppCustomerByCustomerId(\n    $enterpriseId: ID!\n    $modeCustomerId: ModelLinkedAppCustomerLinkedAppCustomerByCustomerIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelLinkedAppCustomerFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    linkedAppCustomerByCustomerId(\n      enterpriseId: $enterpriseId\n      modeCustomerId: $modeCustomerId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerDetails\n        customerId\n        linkedAppId\n        updatedAt\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getLinkedAppMessage = "\n  query GetLinkedAppMessage(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $waMessageId: ID!\n  ) {\n    getLinkedAppMessage(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      waMessageId: $waMessageId\n    ) {\n      enterpriseId\n      mode\n      waMessageId\n      message\n      updatedAt\n      createdAt\n      linkedAppCustomer {\n        enterpriseId\n        mode\n        customerDetails\n        customerId\n        linkedAppId\n        updatedAt\n        createdAt\n        __typename\n      }\n      linkedAppId\n      customerId\n      __typename\n    }\n  }\n", e.listLinkedAppMessages = "\n  query ListLinkedAppMessages(\n    $enterpriseId: ID\n    $modeWaMessageId: ModelLinkedAppMessagePrimaryCompositeKeyConditionInput\n    $filter: ModelLinkedAppMessageFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listLinkedAppMessages(\n      enterpriseId: $enterpriseId\n      modeWaMessageId: $modeWaMessageId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        waMessageId\n        message\n        updatedAt\n        createdAt\n        linkedAppId\n        customerId\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.linkedAppMessagesByLinkedAppCustomerId = "\n  query LinkedAppMessagesByLinkedAppCustomerId(\n    $enterpriseId: ID!\n    $modeLinkedAppIdCustomerId: ModelLinkedAppMessageLinkedAppMessagesByLinkedAppCustomerIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelLinkedAppMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    linkedAppMessagesByLinkedAppCustomerId(\n      enterpriseId: $enterpriseId\n      modeLinkedAppIdCustomerId: $modeLinkedAppIdCustomerId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        waMessageId\n        message\n        updatedAt\n        createdAt\n        linkedAppId\n        customerId\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchLinkedAppMessages = "\n  query SearchLinkedAppMessages(\n    $filter: SearchableLinkedAppMessageFilterInput\n    $sort: [SearchableLinkedAppMessageSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableLinkedAppMessageAggregationInput]\n  ) {\n    searchLinkedAppMessages(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        waMessageId\n        message\n        updatedAt\n        createdAt\n        linkedAppId\n        customerId\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getCatalogue = "\n  query GetCatalogue($enterpriseId: ID!, $mode: MODE!, $catalogueId: ID!) {\n    getCatalogue(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      catalogueId: $catalogueId\n    ) {\n      enterpriseId\n      mode\n      catalogueId\n      images\n      name\n      description\n      price\n      link\n      itemCode\n      hide\n      countryOfOrigin\n      otherAttributes\n      updatedAt\n      integrationId\n      retailerId\n      metaCatalogue {\n        enterpriseId\n        mode\n        integrationId\n        metaCatalogueId\n        name\n        isCartEnabled\n        isCatalogVisible\n        createdAt\n        updatedAt\n        __typename\n      }\n      metaCatalogueId\n      collection {\n        nextToken\n        __typename\n      }\n      linkedApp {\n        nextToken\n        __typename\n      }\n      createdAt\n      __typename\n    }\n  }\n", e.listCatalogues = "\n  query ListCatalogues(\n    $enterpriseId: ID\n    $modeCatalogueId: ModelCataloguePrimaryCompositeKeyConditionInput\n    $filter: ModelCatalogueFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCatalogues(\n      enterpriseId: $enterpriseId\n      modeCatalogueId: $modeCatalogueId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.catalogueByMetaCatalogueId = "\n  query CatalogueByMetaCatalogueId(\n    $enterpriseId: ID!\n    $modeMetaCatalogueId: ModelCatalogueCatalogueByMetaCatalogueIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCatalogueFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    catalogueByMetaCatalogueId(\n      enterpriseId: $enterpriseId\n      modeMetaCatalogueId: $modeMetaCatalogueId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchCatalogues = "\n  query SearchCatalogues(\n    $filter: SearchableCatalogueFilterInput\n    $sort: [SearchableCatalogueSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCatalogueAggregationInput]\n  ) {\n    searchCatalogues(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getCollection = "\n  query GetCollection($enterpriseId: ID!, $mode: MODE!, $collectionId: ID!) {\n    getCollection(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      collectionId: $collectionId\n    ) {\n      enterpriseId\n      mode\n      collectionId\n      title\n      status\n      catalogue {\n        nextToken\n        __typename\n      }\n      linkedApp {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listCollections = "\n  query ListCollections(\n    $enterpriseId: ID\n    $modeCollectionId: ModelCollectionPrimaryCompositeKeyConditionInput\n    $filter: ModelCollectionFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCollections(\n      enterpriseId: $enterpriseId\n      modeCollectionId: $modeCollectionId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        collectionId\n        title\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchCollections = "\n  query SearchCollections(\n    $filter: SearchableCollectionFilterInput\n    $sort: [SearchableCollectionSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCollectionAggregationInput]\n  ) {\n    searchCollections(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        collectionId\n        title\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getCollectionCatalogue = "\n  query GetCollectionCatalogue(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $collectionId: ID!\n    $catalogueId: ID!\n  ) {\n    getCollectionCatalogue(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      collectionId: $collectionId\n      catalogueId: $catalogueId\n    ) {\n      enterpriseId\n      mode\n      collection {\n        enterpriseId\n        mode\n        collectionId\n        title\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      collectionId\n      catalogue {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      catalogueId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listCollectionCatalogues = "\n  query ListCollectionCatalogues(\n    $enterpriseId: ID\n    $modeCollectionIdCatalogueId: ModelCollectionCataloguePrimaryCompositeKeyConditionInput\n    $filter: ModelCollectionCatalogueFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCollectionCatalogues(\n      enterpriseId: $enterpriseId\n      modeCollectionIdCatalogueId: $modeCollectionIdCatalogueId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        collectionId\n        catalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.catalogueCollectionByCollectionId = "\n  query CatalogueCollectionByCollectionId(\n    $enterpriseId: ID!\n    $modeCollectionId: ModelCollectionCatalogueCatalogueCollectionByCollectionIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCollectionCatalogueFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    catalogueCollectionByCollectionId(\n      enterpriseId: $enterpriseId\n      modeCollectionId: $modeCollectionId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        collectionId\n        catalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.catalogueCollectionByCatalogueId = "\n  query CatalogueCollectionByCatalogueId(\n    $enterpriseId: ID!\n    $modeCatalogueId: ModelCollectionCatalogueCatalogueCollectionByCatalogueIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCollectionCatalogueFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    catalogueCollectionByCatalogueId(\n      enterpriseId: $enterpriseId\n      modeCatalogueId: $modeCatalogueId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        collectionId\n        catalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchCollectionCatalogues = "\n  query SearchCollectionCatalogues(\n    $filter: SearchableCollectionCatalogueFilterInput\n    $sort: [SearchableCollectionCatalogueSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCollectionCatalogueAggregationInput]\n  ) {\n    searchCollectionCatalogues(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        collectionId\n        catalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getLinkedAppCatalogue = "\n  query GetLinkedAppCatalogue(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $linkedAppId: ID!\n    $catalogueId: ID!\n  ) {\n    getLinkedAppCatalogue(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      linkedAppId: $linkedAppId\n      catalogueId: $catalogueId\n    ) {\n      enterpriseId\n      mode\n      waLinkedAppCatalogueId\n      hide\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      catalogue {\n        enterpriseId\n        mode\n        catalogueId\n        images\n        name\n        description\n        price\n        link\n        itemCode\n        hide\n        countryOfOrigin\n        otherAttributes\n        updatedAt\n        integrationId\n        retailerId\n        metaCatalogueId\n        createdAt\n        __typename\n      }\n      catalogueId\n      status\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listLinkedAppCatalogues = "\n  query ListLinkedAppCatalogues(\n    $enterpriseId: ID\n    $modeLinkedAppIdCatalogueId: ModelLinkedAppCataloguePrimaryCompositeKeyConditionInput\n    $filter: ModelLinkedAppCatalogueFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listLinkedAppCatalogues(\n      enterpriseId: $enterpriseId\n      modeLinkedAppIdCatalogueId: $modeLinkedAppIdCatalogueId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        waLinkedAppCatalogueId\n        hide\n        linkedAppId\n        catalogueId\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.catalogueLinkedAppByCatalogueId = "\n  query CatalogueLinkedAppByCatalogueId(\n    $enterpriseId: ID!\n    $modeCatalogueId: ModelLinkedAppCatalogueCatalogueLinkedAppByCatalogueIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelLinkedAppCatalogueFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    catalogueLinkedAppByCatalogueId(\n      enterpriseId: $enterpriseId\n      modeCatalogueId: $modeCatalogueId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        waLinkedAppCatalogueId\n        hide\n        linkedAppId\n        catalogueId\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.linkedAppCatalogueByLinkedAppId = "\n  query LinkedAppCatalogueByLinkedAppId(\n    $enterpriseId: ID!\n    $modeLinkedAppId: ModelLinkedAppCatalogueLinkedAppCatalogueByLinkedAppIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelLinkedAppCatalogueFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    linkedAppCatalogueByLinkedAppId(\n      enterpriseId: $enterpriseId\n      modeLinkedAppId: $modeLinkedAppId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        waLinkedAppCatalogueId\n        hide\n        linkedAppId\n        catalogueId\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchLinkedAppCatalogues = "\n  query SearchLinkedAppCatalogues(\n    $filter: SearchableLinkedAppCatalogueFilterInput\n    $sort: [SearchableLinkedAppCatalogueSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableLinkedAppCatalogueAggregationInput]\n  ) {\n    searchLinkedAppCatalogues(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        waLinkedAppCatalogueId\n        hide\n        linkedAppId\n        catalogueId\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getLinkedAppCollection = "\n  query GetLinkedAppCollection(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $linkedAppId: ID!\n    $collectionId: ID!\n  ) {\n    getLinkedAppCollection(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      linkedAppId: $linkedAppId\n      collectionId: $collectionId\n    ) {\n      enterpriseId\n      mode\n      waLinkedAppCollectionId\n      linkedApp {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      collection {\n        enterpriseId\n        mode\n        collectionId\n        title\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      collectionId\n      status\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listLinkedAppCollections = "\n  query ListLinkedAppCollections(\n    $enterpriseId: ID\n    $modeLinkedAppIdCollectionId: ModelLinkedAppCollectionPrimaryCompositeKeyConditionInput\n    $filter: ModelLinkedAppCollectionFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listLinkedAppCollections(\n      enterpriseId: $enterpriseId\n      modeLinkedAppIdCollectionId: $modeLinkedAppIdCollectionId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        waLinkedAppCollectionId\n        linkedAppId\n        collectionId\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.collectionLinkedAppByCollectionId = "\n  query CollectionLinkedAppByCollectionId(\n    $enterpriseId: ID!\n    $modeCollectionId: ModelLinkedAppCollectionCollectionLinkedAppByCollectionIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelLinkedAppCollectionFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    collectionLinkedAppByCollectionId(\n      enterpriseId: $enterpriseId\n      modeCollectionId: $modeCollectionId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        waLinkedAppCollectionId\n        linkedAppId\n        collectionId\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.linkedAppCollectionByLinkedAppId = "\n  query LinkedAppCollectionByLinkedAppId(\n    $enterpriseId: ID!\n    $modeLinkedAppId: ModelLinkedAppCollectionLinkedAppCollectionByLinkedAppIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelLinkedAppCollectionFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    linkedAppCollectionByLinkedAppId(\n      enterpriseId: $enterpriseId\n      modeLinkedAppId: $modeLinkedAppId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        waLinkedAppCollectionId\n        linkedAppId\n        collectionId\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchLinkedAppCollections = "\n  query SearchLinkedAppCollections(\n    $filter: SearchableLinkedAppCollectionFilterInput\n    $sort: [SearchableLinkedAppCollectionSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableLinkedAppCollectionAggregationInput]\n  ) {\n    searchLinkedAppCollections(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        waLinkedAppCollectionId\n        linkedAppId\n        collectionId\n        status\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getBroadcast = "\n  query GetBroadcast($enterpriseId: ID!, $mode: MODE!, $broadcastId: ID!) {\n    getBroadcast(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      broadcastId: $broadcastId\n    ) {\n      enterpriseId\n      mode\n      broadcastId\n      name\n      scheduleTime\n      status\n      senderReceiver\n      advancedConfig\n      message\n      asset\n      isCatalogue\n      catalogItems\n      broadcastMessages {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listBroadcasts = "\n  query ListBroadcasts(\n    $enterpriseId: ID\n    $modeBroadcastId: ModelBroadcastPrimaryCompositeKeyConditionInput\n    $filter: ModelBroadcastFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listBroadcasts(\n      enterpriseId: $enterpriseId\n      modeBroadcastId: $modeBroadcastId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        broadcastId\n        name\n        scheduleTime\n        status\n        senderReceiver\n        advancedConfig\n        message\n        asset\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.broadcastByStatus = "\n  query BroadcastByStatus(\n    $status: BroadcastStatus!\n    $scheduleTime: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelBroadcastFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    broadcastByStatus(\n      status: $status\n      scheduleTime: $scheduleTime\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        broadcastId\n        name\n        scheduleTime\n        status\n        senderReceiver\n        advancedConfig\n        message\n        asset\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchBroadcasts = "\n  query SearchBroadcasts(\n    $filter: SearchableBroadcastFilterInput\n    $sort: [SearchableBroadcastSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableBroadcastAggregationInput]\n  ) {\n    searchBroadcasts(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        broadcastId\n        name\n        scheduleTime\n        status\n        senderReceiver\n        advancedConfig\n        message\n        asset\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getBroadcastMessage = "\n  query GetBroadcastMessage(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $broadcastMessageId: ID!\n  ) {\n    getBroadcastMessage(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      broadcastMessageId: $broadcastMessageId\n    ) {\n      enterpriseId\n      mode\n      broadcastMessageId\n      from {\n        enterpriseId\n        mode\n        linkedAppId\n        name\n        role\n        email\n        lastSyncTime\n        status\n        qrCode\n        details\n        config\n        contactGroupId\n        isBusinessAccount\n        isCartEnabled\n        createdAt\n        updatedAt\n        __typename\n      }\n      linkedAppId\n      to {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      scheduleTime\n      broadcast {\n        enterpriseId\n        mode\n        broadcastId\n        name\n        scheduleTime\n        status\n        senderReceiver\n        advancedConfig\n        message\n        asset\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      broadcastId\n      reference {\n        enterpriseId\n        mode\n        waMessageId\n        message\n        updatedAt\n        createdAt\n        linkedAppId\n        customerId\n        __typename\n      }\n      waMessageId\n      status\n      meta\n      timeToRespond\n      isCatalogue\n      catalogItems\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listBroadcastMessages = "\n  query ListBroadcastMessages(\n    $enterpriseId: ID\n    $modeBroadcastMessageId: ModelBroadcastMessagePrimaryCompositeKeyConditionInput\n    $filter: ModelBroadcastMessageFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listBroadcastMessages(\n      enterpriseId: $enterpriseId\n      modeBroadcastMessageId: $modeBroadcastMessageId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        broadcastMessageId\n        linkedAppId\n        customerId\n        scheduleTime\n        broadcastId\n        waMessageId\n        status\n        meta\n        timeToRespond\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.broadcastMessageByBroadcastId = "\n  query BroadcastMessageByBroadcastId(\n    $enterpriseId: ID!\n    $modeBroadcastId: ModelBroadcastMessageBroadcastMessageByBroadcastIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelBroadcastMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    broadcastMessageByBroadcastId(\n      enterpriseId: $enterpriseId\n      modeBroadcastId: $modeBroadcastId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        broadcastMessageId\n        linkedAppId\n        customerId\n        scheduleTime\n        broadcastId\n        waMessageId\n        status\n        meta\n        timeToRespond\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.broadcastMessageByLinkedAppId = "\n  query BroadcastMessageByLinkedAppId(\n    $enterpriseId: ID!\n    $modeLinkedAppId: ModelBroadcastMessageBroadcastMessageByLinkedAppIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelBroadcastMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    broadcastMessageByLinkedAppId(\n      enterpriseId: $enterpriseId\n      modeLinkedAppId: $modeLinkedAppId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        broadcastMessageId\n        linkedAppId\n        customerId\n        scheduleTime\n        broadcastId\n        waMessageId\n        status\n        meta\n        timeToRespond\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.broadcastMessageByCustomerId = "\n  query BroadcastMessageByCustomerId(\n    $enterpriseId: ID!\n    $modeCustomerId: ModelBroadcastMessageBroadcastMessageByCustomerIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelBroadcastMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    broadcastMessageByCustomerId(\n      enterpriseId: $enterpriseId\n      modeCustomerId: $modeCustomerId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        broadcastMessageId\n        linkedAppId\n        customerId\n        scheduleTime\n        broadcastId\n        waMessageId\n        status\n        meta\n        timeToRespond\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.broadcastMessageByStatus = "\n  query BroadcastMessageByStatus(\n    $status: BroadcastMessageStatus!\n    $scheduleTime: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelBroadcastMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    broadcastMessageByStatus(\n      status: $status\n      scheduleTime: $scheduleTime\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        broadcastMessageId\n        linkedAppId\n        customerId\n        scheduleTime\n        broadcastId\n        waMessageId\n        status\n        meta\n        timeToRespond\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchBroadcastMessages = "\n  query SearchBroadcastMessages(\n    $filter: SearchableBroadcastMessageFilterInput\n    $sort: [SearchableBroadcastMessageSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableBroadcastMessageAggregationInput]\n  ) {\n    searchBroadcastMessages(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        broadcastMessageId\n        linkedAppId\n        customerId\n        scheduleTime\n        broadcastId\n        waMessageId\n        status\n        meta\n        timeToRespond\n        isCatalogue\n        catalogItems\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getSession = "\n  query GetSession($enterpriseId: ID!, $mode: MODE!, $sessionId: ID!) {\n    getSession(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      sessionId: $sessionId\n    ) {\n      enterpriseId\n      mode\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      workspaceId\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      flow {\n        enterpriseId\n        mode\n        flowId\n        name\n        workspaceId\n        startId\n        fallbackId\n        idleId\n        campaignId\n        isImported\n        status\n        settings\n        flowTemplateId\n        createdAt\n        updatedAt\n        __typename\n      }\n      flowId\n      integration {\n        enterpriseId\n        mode\n        integrationId\n        name\n        number\n        logo\n        details\n        config\n        channel\n        saas\n        primary\n        workspaceId\n        flowId\n        metaCatalogueId\n        createdAt\n        updatedAt\n        __typename\n      }\n      integrationId\n      channel\n      updatedAt\n      conversationByDate {\n        nextToken\n        __typename\n      }\n      createdAt\n      assignment\n      tags\n      currentNodeId\n      currentNode {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextNodeId\n      nextNode {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      variables\n      agent {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      agentId\n      preview\n      nodeId\n      validationCount\n      campaignMessage {\n        enterpriseId\n        mode\n        campaignMessageId\n        scheduleTime\n        campaignId\n        integrationId\n        createdAt\n        updatedAt\n        sessionId\n        customerId\n        status\n        isForApproval\n        meta\n        channel\n        timeToRespond\n        retryCount\n        __typename\n      }\n      campaignMessageId\n      active\n      initiatedBy\n      federatedLiveToCustomerId\n      federatedLiveToCustomer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      federatedRole\n      scheduleNode {\n        nextToken\n        __typename\n      }\n      healthTable {\n        enterpriseId\n        mode\n        healthTableId\n        title\n        read\n        count\n        status\n        nodeId\n        userId\n        description\n        functionOrigin\n        type\n        subType\n        channel\n        updatedAt\n        createdAt\n        link\n        config\n        checkFlag\n        __typename\n      }\n      healthTableId\n      metaConversationId\n      referrer\n      referrerType\n      __typename\n    }\n  }\n", e.listSessions = "\n  query ListSessions(\n    $enterpriseId: ID\n    $modeSessionId: ModelSessionPrimaryCompositeKeyConditionInput\n    $filter: ModelSessionFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listSessions(\n      enterpriseId: $enterpriseId\n      modeSessionId: $modeSessionId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.sessionByUser = "\n  query SessionByUser(\n    $enterpriseId: ID!\n    $agentId: ModelIDKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSessionFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    sessionByUser(\n      enterpriseId: $enterpriseId\n      agentId: $agentId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.sessionByDate = "\n  query SessionByDate(\n    $customerId: ID!\n    $updatedAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSessionFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    sessionByDate(\n      customerId: $customerId\n      updatedAt: $updatedAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.sessionByWorkspace = "\n  query SessionByWorkspace(\n    $workspaceId: ID!\n    $assignment: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSessionFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    sessionByWorkspace(\n      workspaceId: $workspaceId\n      assignment: $assignment\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.sessionByAssignment = "\n  query SessionByAssignment(\n    $assignment: ASSIGNMENT!\n    $updatedAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSessionFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    sessionByAssignment(\n      assignment: $assignment\n      updatedAt: $updatedAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.sessionByFederatedLiveToCustomer = "\n  query SessionByFederatedLiveToCustomer(\n    $federatedLiveToCustomerId: ID!\n    $updatedAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSessionFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    sessionByFederatedLiveToCustomer(\n      federatedLiveToCustomerId: $federatedLiveToCustomerId\n      updatedAt: $updatedAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.sessionsByHealthTableId = "\n  query SessionsByHealthTableId(\n    $healthTableId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelSessionFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    sessionsByHealthTableId(\n      healthTableId: $healthTableId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchSessions = "\n  query SearchSessions(\n    $filter: SearchableSessionFilterInput\n    $sort: [SearchableSessionSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableSessionAggregationInput]\n  ) {\n    searchSessions(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getConversation = "\n  query GetConversation(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $conversationId: ID!\n  ) {\n    getConversation(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      conversationId: $conversationId\n    ) {\n      enterpriseId\n      mode\n      conversationId\n      session {\n        enterpriseId\n        mode\n        sessionId\n        customerId\n        workspaceId\n        flowId\n        integrationId\n        channel\n        updatedAt\n        createdAt\n        assignment\n        tags\n        currentNodeId\n        nextNodeId\n        variables\n        agentId\n        preview\n        nodeId\n        validationCount\n        campaignMessageId\n        active\n        initiatedBy\n        federatedLiveToCustomerId\n        federatedRole\n        healthTableId\n        metaConversationId\n        referrer\n        referrerType\n        __typename\n      }\n      sessionId\n      customer {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        parent\n        parentId\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        __typename\n      }\n      customerId\n      createdBy\n      content\n      createdAt\n      metadata\n      senderId\n      imagePath\n      agentInfo\n      conversationInfo {\n        enterpriseId\n        mode\n        conversationId\n        channelMessageId\n        deliveredAt\n        readAt\n        submittedAt\n        submittedToPartner\n        analytics\n        errorMessage\n        cumulativeLeadScore\n        leadScoreDiff\n        pricing\n        createdAt\n        updatedAt\n        __typename\n      }\n      updatedAt\n      __typename\n    }\n  }\n", e.listConversations = "\n  query ListConversations(\n    $enterpriseId: ID\n    $modeConversationId: ModelConversationPrimaryCompositeKeyConditionInput\n    $filter: ModelConversationFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listConversations(\n      enterpriseId: $enterpriseId\n      modeConversationId: $modeConversationId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        conversationId\n        sessionId\n        customerId\n        createdBy\n        content\n        createdAt\n        metadata\n        senderId\n        imagePath\n        agentInfo\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.conversationByDate = "\n  query ConversationByDate(\n    $sessionId: ID!\n    $createdAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelConversationFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    conversationByDate(\n      sessionId: $sessionId\n      createdAt: $createdAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        conversationId\n        sessionId\n        customerId\n        createdBy\n        content\n        createdAt\n        metadata\n        senderId\n        imagePath\n        agentInfo\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.customerConversationByDate = "\n  query CustomerConversationByDate(\n    $customerId: ID!\n    $createdAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelConversationFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    customerConversationByDate(\n      customerId: $customerId\n      createdAt: $createdAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        conversationId\n        sessionId\n        customerId\n        createdBy\n        content\n        createdAt\n        metadata\n        senderId\n        imagePath\n        agentInfo\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getConversationInfo = "\n  query GetConversationInfo(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $conversationId: ID!\n  ) {\n    getConversationInfo(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      conversationId: $conversationId\n    ) {\n      enterpriseId\n      mode\n      conversationId\n      conversation {\n        enterpriseId\n        mode\n        conversationId\n        sessionId\n        customerId\n        createdBy\n        content\n        createdAt\n        metadata\n        senderId\n        imagePath\n        agentInfo\n        updatedAt\n        __typename\n      }\n      channelMessageId\n      deliveredAt\n      readAt\n      submittedAt\n      submittedToPartner\n      analytics\n      errorMessage\n      cumulativeLeadScore\n      leadScoreDiff\n      pricing\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listConversationInfos = "\n  query ListConversationInfos(\n    $enterpriseId: ID\n    $modeConversationId: ModelConversationInfoPrimaryCompositeKeyConditionInput\n    $filter: ModelConversationInfoFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listConversationInfos(\n      enterpriseId: $enterpriseId\n      modeConversationId: $modeConversationId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        conversationId\n        channelMessageId\n        deliveredAt\n        readAt\n        submittedAt\n        submittedToPartner\n        analytics\n        errorMessage\n        cumulativeLeadScore\n        leadScoreDiff\n        pricing\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.conversationByChannelMessageId = "\n  query ConversationByChannelMessageId(\n    $channelMessageId: ID!\n    $sortDirection: ModelSortDirection\n    $filter: ModelConversationInfoFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    conversationByChannelMessageId(\n      channelMessageId: $channelMessageId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        conversationId\n        channelMessageId\n        deliveredAt\n        readAt\n        submittedAt\n        submittedToPartner\n        analytics\n        errorMessage\n        cumulativeLeadScore\n        leadScoreDiff\n        pricing\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getUser = "\n  query GetUser($enterpriseId: ID!, $userId: ID!) {\n    getUser(enterpriseId: $enterpriseId, userId: $userId) {\n      enterpriseId\n      userId\n      email\n      name\n      number\n      lName\n      avatarUrl\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      lastSignIn\n      active\n      session {\n        nextToken\n        __typename\n      }\n      availability\n      browserToken\n      isLoggedIn\n      updatedAt\n      profileDetails\n      notificationConfig\n      notification {\n        nextToken\n        __typename\n      }\n      job {\n        nextToken\n        __typename\n      }\n      inviterUserIdClerk\n      clerkUserId\n      createdAt\n      __typename\n    }\n  }\n", e.listUsers = "\n  query ListUsers(\n    $enterpriseId: ID\n    $userId: ModelIDKeyConditionInput\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listUsers(\n      enterpriseId: $enterpriseId\n      userId: $userId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.userByClerkUserId = "\n  query UserByClerkUserId(\n    $clerkUserId: String!\n    $sortDirection: ModelSortDirection\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    userByClerkUserId(\n      clerkUserId: $clerkUserId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getRole = "\n  query GetRole($enterpriseId: ID!, $roleId: ID!) {\n    getRole(enterpriseId: $enterpriseId, roleId: $roleId) {\n      enterpriseId\n      roleId\n      name\n      module {\n        enterpriseId\n        moduleId\n        name\n        roleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      moduleId\n      permission {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listRoles = "\n  query ListRoles(\n    $enterpriseId: ID\n    $roleId: ModelIDKeyConditionInput\n    $filter: ModelRoleFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listRoles(\n      enterpriseId: $enterpriseId\n      roleId: $roleId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getPermission = "\n  query GetPermission($enterpriseId: ID!, $permissionId: ID!) {\n    getPermission(enterpriseId: $enterpriseId, permissionId: $permissionId) {\n      enterpriseId\n      permissionId\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      create\n      read\n      update\n      delete\n      campaignApproval\n      module {\n        enterpriseId\n        moduleId\n        name\n        roleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      moduleId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listPermissions = "\n  query ListPermissions(\n    $enterpriseId: ID\n    $permissionId: ModelIDKeyConditionInput\n    $filter: ModelPermissionFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listPermissions(\n      enterpriseId: $enterpriseId\n      permissionId: $permissionId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        permissionId\n        roleId\n        create\n        read\n        update\n        delete\n        campaignApproval\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.permissionByRole = "\n  query PermissionByRole(\n    $enterpriseId: ID!\n    $roleId: ModelIDKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelPermissionFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    permissionByRole(\n      enterpriseId: $enterpriseId\n      roleId: $roleId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        permissionId\n        roleId\n        create\n        read\n        update\n        delete\n        campaignApproval\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getModule = "\n  query GetModule($enterpriseId: ID!, $moduleId: ID!) {\n    getModule(enterpriseId: $enterpriseId, moduleId: $moduleId) {\n      enterpriseId\n      moduleId\n      name\n      role {\n        enterpriseId\n        roleId\n        name\n        moduleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      roleId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listModules = "\n  query ListModules(\n    $enterpriseId: ID\n    $moduleId: ModelIDKeyConditionInput\n    $filter: ModelModuleFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listModules(\n      enterpriseId: $enterpriseId\n      moduleId: $moduleId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        moduleId\n        name\n        roleId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getNotification = "\n  query GetNotification(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $notificationId: ID!\n  ) {\n    getNotification(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      notificationId: $notificationId\n    ) {\n      enterpriseId\n      mode\n      notificationId\n      link\n      title\n      description\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      read\n      type\n      categoryStatus\n      updatedAt\n      createdAt\n      __typename\n    }\n  }\n", e.listNotifications = "\n  query ListNotifications(\n    $enterpriseId: ID\n    $modeNotificationId: ModelNotificationPrimaryCompositeKeyConditionInput\n    $filter: ModelNotificationFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listNotifications(\n      enterpriseId: $enterpriseId\n      modeNotificationId: $modeNotificationId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        notificationId\n        link\n        title\n        description\n        userId\n        read\n        type\n        categoryStatus\n        updatedAt\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.notificationByUser = "\n  query NotificationByUser(\n    $enterpriseId: ID!\n    $userId: ModelIDKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelNotificationFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    notificationByUser(\n      enterpriseId: $enterpriseId\n      userId: $userId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        notificationId\n        link\n        title\n        description\n        userId\n        read\n        type\n        categoryStatus\n        updatedAt\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getJob = "\n  query GetJob($enterpriseId: ID!, $mode: MODE!, $jobId: ID!) {\n    getJob(enterpriseId: $enterpriseId, mode: $mode, jobId: $jobId) {\n      enterpriseId\n      mode\n      jobId\n      type\n      payload\n      status\n      user {\n        enterpriseId\n        userId\n        email\n        name\n        number\n        lName\n        avatarUrl\n        roleId\n        lastSignIn\n        active\n        availability\n        browserToken\n        isLoggedIn\n        updatedAt\n        profileDetails\n        notificationConfig\n        inviterUserIdClerk\n        clerkUserId\n        createdAt\n        __typename\n      }\n      userId\n      read\n      description\n      result\n      updatedAt\n      executionArn\n      failureReasons\n      createdAt\n      __typename\n    }\n  }\n", e.listJobs = "\n  query ListJobs(\n    $enterpriseId: ID\n    $modeJobId: ModelJobPrimaryCompositeKeyConditionInput\n    $filter: ModelJobFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listJobs(\n      enterpriseId: $enterpriseId\n      modeJobId: $modeJobId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        jobId\n        type\n        payload\n        status\n        userId\n        read\n        description\n        result\n        updatedAt\n        executionArn\n        failureReasons\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.jobByUser = "\n  query JobByUser(\n    $enterpriseId: ID!\n    $userId: ModelIDKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelJobFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    jobByUser(\n      enterpriseId: $enterpriseId\n      userId: $userId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        jobId\n        type\n        payload\n        status\n        userId\n        read\n        description\n        result\n        updatedAt\n        executionArn\n        failureReasons\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getWorkspace = "\n  query GetWorkspace($enterpriseId: ID!, $mode: MODE!, $workspaceId: ID!) {\n    getWorkspace(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      workspaceId: $workspaceId\n    ) {\n      enterpriseId\n      mode\n      workspaceId\n      name\n      flow {\n        nextToken\n        __typename\n      }\n      integration {\n        nextToken\n        __typename\n      }\n      apis {\n        nextToken\n        __typename\n      }\n      outwardWebhook {\n        nextToken\n        __typename\n      }\n      intent {\n        nextToken\n        __typename\n      }\n      entity {\n        nextToken\n        __typename\n      }\n      cloudFunctions {\n        nextToken\n        __typename\n      }\n      apiGateWay {\n        nextToken\n        __typename\n      }\n      missedUtterance {\n        nextToken\n        __typename\n      }\n      databaseSchema {\n        nextToken\n        __typename\n      }\n      fileManagerFiles {\n        nextToken\n        __typename\n      }\n      variables\n      timeZone\n      language\n      sessionTimeout\n      unSupportedMessages\n      defaultTables\n      botId\n      botAliasId\n      botDraftId\n      tools\n      flowTemplate {\n        enterpriseId\n        mode\n        flowTemplateId\n        templateName\n        industry\n        templateIcon\n        businessGoal\n        channels\n        templateDescription\n        templateData\n        isPrivate\n        flowId\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      whatsappNumber\n      designConfig\n      publishConfig\n      botStatus\n      botFailureReason\n      botLastUpdated\n      publishLastUpdated\n      outwardWebhookUrl\n      isImported\n      trigger {\n        nextToken\n        __typename\n      }\n      saasTrigger {\n        nextToken\n        __typename\n      }\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listWorkspaces = "\n  query ListWorkspaces(\n    $enterpriseId: ID\n    $modeWorkspaceId: ModelWorkspacePrimaryCompositeKeyConditionInput\n    $filter: ModelWorkspaceFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listWorkspaces(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getApi = "\n  query GetApi($enterpriseId: ID!, $mode: MODE!, $apiId: ID!) {\n    getApi(enterpriseId: $enterpriseId, mode: $mode, apiId: $apiId) {\n      enterpriseId\n      mode\n      apiId\n      name\n      config\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listApis = "\n  query ListApis(\n    $enterpriseId: ID\n    $modeApiId: ModelApiPrimaryCompositeKeyConditionInput\n    $filter: ModelApiFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listApis(\n      enterpriseId: $enterpriseId\n      modeApiId: $modeApiId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        apiId\n        name\n        config\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.apisByWorkspaceId = "\n  query ApisByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelApiApisByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelApiFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    apisByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        apiId\n        name\n        config\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getApiGateWay = "\n  query GetApiGateWay(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $workspaceId: ID!\n    $name: String!\n  ) {\n    getApiGateWay(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      workspaceId: $workspaceId\n      name: $name\n    ) {\n      enterpriseId\n      mode\n      name\n      variable\n      payload\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      flow\n      interaction\n      nodeId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listApiGateWays = "\n  query ListApiGateWays(\n    $enterpriseId: ID\n    $modeWorkspaceIdName: ModelApiGateWayPrimaryCompositeKeyConditionInput\n    $filter: ModelApiGateWayFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listApiGateWays(\n      enterpriseId: $enterpriseId\n      modeWorkspaceIdName: $modeWorkspaceIdName\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        name\n        variable\n        payload\n        workspaceId\n        flow\n        interaction\n        nodeId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.apiGateWayByWorkspaceId = "\n  query ApiGateWayByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelApiGateWayApiGateWayByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelApiGateWayFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    apiGateWayByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        name\n        variable\n        payload\n        workspaceId\n        flow\n        interaction\n        nodeId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getOutwardWebhook = "\n  query GetOutwardWebhook(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $outwardWebhookId: ID!\n  ) {\n    getOutwardWebhook(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      outwardWebhookId: $outwardWebhookId\n    ) {\n      enterpriseId\n      mode\n      outwardWebhookId\n      name\n      config\n      description\n      filters\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listOutwardWebhooks = "\n  query ListOutwardWebhooks(\n    $enterpriseId: ID\n    $modeOutwardWebhookId: ModelOutwardWebhookPrimaryCompositeKeyConditionInput\n    $filter: ModelOutwardWebhookFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listOutwardWebhooks(\n      enterpriseId: $enterpriseId\n      modeOutwardWebhookId: $modeOutwardWebhookId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        outwardWebhookId\n        name\n        config\n        description\n        filters\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.outwardWebhookByWorkspaceId = "\n  query OutwardWebhookByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelOutwardWebhookOutwardWebhookByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelOutwardWebhookFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    outwardWebhookByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        outwardWebhookId\n        name\n        config\n        description\n        filters\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getIntent = "\n  query GetIntent($enterpriseId: ID!, $mode: MODE!, $intentId: ID!) {\n    getIntent(enterpriseId: $enterpriseId, mode: $mode, intentId: $intentId) {\n      enterpriseId\n      mode\n      intentId\n      name\n      utterance\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      lexIntentId\n      nodeId\n      updatedAt\n      slots\n      createdAt\n      __typename\n    }\n  }\n", e.listIntents = "\n  query ListIntents(\n    $enterpriseId: ID\n    $modeIntentId: ModelIntentPrimaryCompositeKeyConditionInput\n    $filter: ModelIntentFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listIntents(\n      enterpriseId: $enterpriseId\n      modeIntentId: $modeIntentId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        intentId\n        name\n        utterance\n        workspaceId\n        lexIntentId\n        nodeId\n        updatedAt\n        slots\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.intentByWorkspaceId = "\n  query IntentByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelIntentIntentByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelIntentFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    intentByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        intentId\n        name\n        utterance\n        workspaceId\n        lexIntentId\n        nodeId\n        updatedAt\n        slots\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.intentByNodeId = "\n  query IntentByNodeId(\n    $nodeId: ID!\n    $updatedAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelIntentFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    intentByNodeId(\n      nodeId: $nodeId\n      updatedAt: $updatedAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        intentId\n        name\n        utterance\n        workspaceId\n        lexIntentId\n        nodeId\n        updatedAt\n        slots\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchIntents = "\n  query SearchIntents(\n    $filter: SearchableIntentFilterInput\n    $sort: [SearchableIntentSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableIntentAggregationInput]\n  ) {\n    searchIntents(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        intentId\n        name\n        utterance\n        workspaceId\n        lexIntentId\n        nodeId\n        updatedAt\n        slots\n        createdAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getEntity = "\n  query GetEntity($enterpriseId: ID!, $mode: MODE!, $entityId: ID!) {\n    getEntity(enterpriseId: $enterpriseId, mode: $mode, entityId: $entityId) {\n      enterpriseId\n      mode\n      entityId\n      name\n      type\n      entityData\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      slotTypeId\n      resolutionStrategy\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listEntities = "\n  query ListEntities(\n    $enterpriseId: ID\n    $modeEntityId: ModelEntityPrimaryCompositeKeyConditionInput\n    $filter: ModelEntityFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listEntities(\n      enterpriseId: $enterpriseId\n      modeEntityId: $modeEntityId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        entityId\n        name\n        type\n        entityData\n        workspaceId\n        slotTypeId\n        resolutionStrategy\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.entityByWorkspaceId = "\n  query EntityByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelEntityEntityByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelEntityFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    entityByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        entityId\n        name\n        type\n        entityData\n        workspaceId\n        slotTypeId\n        resolutionStrategy\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getDatabaseSchema = "\n  query GetDatabaseSchema(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $databaseSchemaId: ID!\n  ) {\n    getDatabaseSchema(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      databaseSchemaId: $databaseSchemaId\n    ) {\n      enterpriseId\n      mode\n      databaseSchemaId\n      key\n      description\n      schema\n      values {\n        nextToken\n        __typename\n      }\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      timeFilterField\n      config\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listDatabaseSchemas = "\n  query ListDatabaseSchemas(\n    $enterpriseId: ID\n    $modeDatabaseSchemaId: ModelDatabaseSchemaPrimaryCompositeKeyConditionInput\n    $filter: ModelDatabaseSchemaFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listDatabaseSchemas(\n      enterpriseId: $enterpriseId\n      modeDatabaseSchemaId: $modeDatabaseSchemaId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        databaseSchemaId\n        key\n        description\n        schema\n        workspaceId\n        timeFilterField\n        config\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.databaseSchemaByWorkspaceId = "\n  query DatabaseSchemaByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelDatabaseSchemaDatabaseSchemaByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelDatabaseSchemaFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    databaseSchemaByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        databaseSchemaId\n        key\n        description\n        schema\n        workspaceId\n        timeFilterField\n        config\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getDatabaseValues = "\n  query GetDatabaseValues(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $databaseValuesId: ID!\n  ) {\n    getDatabaseValues(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      databaseValuesId: $databaseValuesId\n    ) {\n      enterpriseId\n      mode\n      databaseValuesId\n      value\n      databaseSchema {\n        enterpriseId\n        mode\n        databaseSchemaId\n        key\n        description\n        schema\n        workspaceId\n        timeFilterField\n        config\n        createdAt\n        updatedAt\n        __typename\n      }\n      databaseSchemaId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listDatabaseValues = "\n  query ListDatabaseValues(\n    $enterpriseId: ID\n    $modeDatabaseValuesId: ModelDatabaseValuesPrimaryCompositeKeyConditionInput\n    $filter: ModelDatabaseValuesFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listDatabaseValues(\n      enterpriseId: $enterpriseId\n      modeDatabaseValuesId: $modeDatabaseValuesId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        databaseValuesId\n        value\n        databaseSchemaId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.databaseValuesByDatabaseSchemaId = "\n  query DatabaseValuesByDatabaseSchemaId(\n    $enterpriseId: ID!\n    $modeDatabaseSchemaId: ModelDatabaseValuesDatabaseValuesByDatabaseSchemaIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelDatabaseValuesFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    databaseValuesByDatabaseSchemaId(\n      enterpriseId: $enterpriseId\n      modeDatabaseSchemaId: $modeDatabaseSchemaId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        databaseValuesId\n        value\n        databaseSchemaId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchDatabaseValues = "\n  query SearchDatabaseValues(\n    $filter: SearchableDatabaseValuesFilterInput\n    $sort: [SearchableDatabaseValuesSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableDatabaseValuesAggregationInput]\n  ) {\n    searchDatabaseValues(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        databaseValuesId\n        value\n        databaseSchemaId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getFileManagerFiles = "\n  query GetFileManagerFiles(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $fileManagerFilesId: ID!\n  ) {\n    getFileManagerFiles(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      fileManagerFilesId: $fileManagerFilesId\n    ) {\n      enterpriseId\n      mode\n      fileManagerFilesId\n      nanoId\n      name\n      isFavorite\n      tags\n      description\n      url\n      size\n      fileType\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listFileManagerFiles = "\n  query ListFileManagerFiles(\n    $enterpriseId: ID\n    $modeFileManagerFilesId: ModelFileManagerFilesPrimaryCompositeKeyConditionInput\n    $filter: ModelFileManagerFilesFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listFileManagerFiles(\n      enterpriseId: $enterpriseId\n      modeFileManagerFilesId: $modeFileManagerFilesId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        fileManagerFilesId\n        nanoId\n        name\n        isFavorite\n        tags\n        description\n        url\n        size\n        fileType\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.fileManagerFilesByWorkspaceId = "\n  query FileManagerFilesByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelFileManagerFilesFileManagerFilesByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelFileManagerFilesFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    fileManagerFilesByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        fileManagerFilesId\n        nanoId\n        name\n        isFavorite\n        tags\n        description\n        url\n        size\n        fileType\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getCloudFunctions = "\n  query GetCloudFunctions(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $cloudFunctionsId: ID!\n  ) {\n    getCloudFunctions(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      cloudFunctionsId: $cloudFunctionsId\n    ) {\n      enterpriseId\n      mode\n      cloudFunctionsId\n      name\n      type\n      functionName\n      functionARN\n      functionURL\n      code\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listCloudFunctions = "\n  query ListCloudFunctions(\n    $enterpriseId: ID\n    $modeCloudFunctionsId: ModelCloudFunctionsPrimaryCompositeKeyConditionInput\n    $filter: ModelCloudFunctionsFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCloudFunctions(\n      enterpriseId: $enterpriseId\n      modeCloudFunctionsId: $modeCloudFunctionsId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        cloudFunctionsId\n        name\n        type\n        functionName\n        functionARN\n        functionURL\n        code\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.cloudFunctionsByWorkspaceId = "\n  query CloudFunctionsByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelCloudFunctionsCloudFunctionsByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCloudFunctionsFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    cloudFunctionsByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        cloudFunctionsId\n        name\n        type\n        functionName\n        functionARN\n        functionURL\n        code\n        workspaceId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getMissedUtterance = "\n  query GetMissedUtterance(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $missedUtteranceId: ID!\n  ) {\n    getMissedUtterance(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      missedUtteranceId: $missedUtteranceId\n    ) {\n      enterpriseId\n      mode\n      missedUtteranceId\n      utterance\n      confidence\n      channel\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      updatedAt\n      nodeId\n      createdAt\n      __typename\n    }\n  }\n", e.listMissedUtterances = "\n  query ListMissedUtterances(\n    $enterpriseId: ID\n    $modeMissedUtteranceId: ModelMissedUtterancePrimaryCompositeKeyConditionInput\n    $filter: ModelMissedUtteranceFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listMissedUtterances(\n      enterpriseId: $enterpriseId\n      modeMissedUtteranceId: $modeMissedUtteranceId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        missedUtteranceId\n        utterance\n        confidence\n        channel\n        workspaceId\n        updatedAt\n        nodeId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.missedUtteranceByWorkspaceId = "\n  query MissedUtteranceByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelMissedUtteranceMissedUtteranceByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelMissedUtteranceFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    missedUtteranceByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        missedUtteranceId\n        utterance\n        confidence\n        channel\n        workspaceId\n        updatedAt\n        nodeId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.missedUtteranceByNodeId = "\n  query MissedUtteranceByNodeId(\n    $nodeId: String!\n    $updatedAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelMissedUtteranceFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    missedUtteranceByNodeId(\n      nodeId: $nodeId\n      updatedAt: $updatedAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        missedUtteranceId\n        utterance\n        confidence\n        channel\n        workspaceId\n        updatedAt\n        nodeId\n        createdAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.searchMissedUtterances = "\n  query SearchMissedUtterances(\n    $filter: SearchableMissedUtteranceFilterInput\n    $sort: [SearchableMissedUtteranceSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableMissedUtteranceAggregationInput]\n  ) {\n    searchMissedUtterances(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        missedUtteranceId\n        utterance\n        confidence\n        channel\n        workspaceId\n        updatedAt\n        nodeId\n        createdAt\n        __typename\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.getSaasTrigger = "\n  query GetSaasTrigger($enterpriseId: ID!, $mode: MODE!, $saasTriggerId: ID!) {\n    getSaasTrigger(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      saasTriggerId: $saasTriggerId\n    ) {\n      enterpriseId\n      mode\n      saasTriggerId\n      name\n      type\n      triggerType\n      incomingPath\n      customerAttrPath\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      channel\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listSaasTriggers = "\n  query ListSaasTriggers(\n    $enterpriseId: ID\n    $modeSaasTriggerId: ModelSaasTriggerPrimaryCompositeKeyConditionInput\n    $filter: ModelSaasTriggerFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listSaasTriggers(\n      enterpriseId: $enterpriseId\n      modeSaasTriggerId: $modeSaasTriggerId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        saasTriggerId\n        name\n        type\n        triggerType\n        incomingPath\n        customerAttrPath\n        workspaceId\n        channel\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.saasTriggerByWorkspaceId = "\n  query SaasTriggerByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelSaasTriggerSaasTriggerByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelSaasTriggerFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    saasTriggerByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        saasTriggerId\n        name\n        type\n        triggerType\n        incomingPath\n        customerAttrPath\n        workspaceId\n        channel\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.getTrigger = "\n  query GetTrigger(\n    $enterpriseId: ID!\n    $mode: MODE!\n    $triggerId: ID!\n    $name: String!\n    $workspaceId: ID!\n  ) {\n    getTrigger(\n      enterpriseId: $enterpriseId\n      mode: $mode\n      triggerId: $triggerId\n      name: $name\n      workspaceId: $workspaceId\n    ) {\n      enterpriseId\n      mode\n      triggerId\n      name\n      workspace {\n        enterpriseId\n        mode\n        workspaceId\n        name\n        variables\n        timeZone\n        language\n        sessionTimeout\n        unSupportedMessages\n        defaultTables\n        botId\n        botAliasId\n        botDraftId\n        tools\n        whatsappNumber\n        designConfig\n        publishConfig\n        botStatus\n        botFailureReason\n        botLastUpdated\n        publishLastUpdated\n        outwardWebhookUrl\n        isImported\n        createdAt\n        updatedAt\n        __typename\n      }\n      workspaceId\n      node {\n        enterpriseId\n        mode\n        nodeId\n        type\n        config\n        interactionId\n        nextId\n        previousId\n        intentId\n        noError\n        createdAt\n        updatedAt\n        __typename\n      }\n      nodeId\n      createdAt\n      updatedAt\n      __typename\n    }\n  }\n", e.listTriggers = "\n  query ListTriggers(\n    $enterpriseId: ID\n    $modeTriggerIdNameWorkspaceId: ModelTriggerPrimaryCompositeKeyConditionInput\n    $filter: ModelTriggerFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listTriggers(\n      enterpriseId: $enterpriseId\n      modeTriggerIdNameWorkspaceId: $modeTriggerIdNameWorkspaceId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        triggerId\n        name\n        workspaceId\n        nodeId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.triggerByWorkspaceId = "\n  query TriggerByWorkspaceId(\n    $enterpriseId: ID!\n    $modeWorkspaceId: ModelTriggerTriggerByWorkspaceIdCompositeKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelTriggerFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    triggerByWorkspaceId(\n      enterpriseId: $enterpriseId\n      modeWorkspaceId: $modeWorkspaceId\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        enterpriseId\n        mode\n        triggerId\n        name\n        workspaceId\n        nodeId\n        createdAt\n        updatedAt\n        __typename\n      }\n      nextToken\n      __typename\n    }\n  }\n", e.requestReportsCsv = "\n  query RequestReportsCsv($input: RequestReportsCsvInput!) {\n    requestReportsCsv(input: $input) {\n      url\n      __typename\n    }\n  }\n", e.quicksightGenerateAnonUrl = "\n  query QuicksightGenerateAnonUrl($input: QuicksightGenerateAnonUrlInput) {\n    quicksightGenerateAnonUrl(input: $input) {\n      url\n      __typename\n    }\n  }\n" }, n => { n.exports = require("@middy/core") }, function (n, e, t) {
        var a = this && this.__createBinding || (Object.create ? function (n, e, t, a) { void 0 === a && (a = t); var i = Object.getOwnPropertyDescriptor(e, t); i && !("get" in i ? !e.__esModule : i.writable || i.configurable) || (i = { enumerable: !0, get: function () { return e[t] } }), Object.defineProperty(n, a, i) } : function (n, e, t, a) { void 0 === a && (a = t), n[a] = e[t] }), i = this && this.__setModuleDefault || (Object.create ? function (n, e) { Object.defineProperty(n, "default", { enumerable: !0, value: e }) } : function (n, e) { n.default = e }), o = this && this.__importStar || function (n) { if (n && n.__esModule) return n; var e = {}; if (null != n) for (var t in n) "default" !== t && Object.prototype.hasOwnProperty.call(n, t) && a(e, n, t); return i(e, n), e }, d = this && this.__importDefault || function (n) { return n && n.__esModule ? n : { default: n } }; Object.defineProperty(e, "__esModule", { value: !0 }); const r = d(t(13)), s = o(t(14)), p = d(t(15)), l = t(1), c = d(t(16)), I = t(5), m = d(t(6)), u = t(8), g = t(17), A = t(10); e.default = async ({ integrationId: n, nextUrl: e, listId: t, contactGroupId: a, listname: i, enterpriseId: o, mode: d, limit: $, nextToken: y, fetchQuery: _ }) => {
            try {
                I.logger.info(`Integration ID: ${n} , listId: ${t} , contactGroupId: ${a} , nextUrl: ${e} , listname: ${i}  , fetchQuery: ${_}`); const { data: { getIntegration: C } } = await m.default.query({
                    query: l.gql`
        ${A.getIntegration}
      `, variables: { enterpriseId: o, mode: d, integrationId: n }
                }); let b = (0, c.default)(null == C ? void 0 : C.config) ? JSON.parse(null == C ? void 0 : C.config) : {}; const k = '{"method":"post","url":"https://login.windows.net/{{integration.tenant_id}}/oauth2/token","data":"resource={{integration.resource}}&grant_type=client_credentials&client_secret={{integration.client_secret}}&client_id={{integration.client_id}}","headers":{"Content-Type":"application/x-www-form-urlencoded","Accept":"*/*","Accept-Encoding":"Accept-Encoding","Connection":"keep-alive"}}', f = s.compile(k)({ integration: b }).replace(/&quot;/g, '"'), T = JSON.parse(f), { data: h } = await (0, r.default)(T); b = { integration: { ...b.integration, ...h } }; const S = `{"method":"get","url":"${"{{integration.resource}}/api/data/v9.0/accounts?$select=accountid,telephone1,telephone2,emailaddress1,name,accountnumber"}","headers":{"Authorization":"Bearer {{integration.access_token}}"},"data":null}`; I.logger.info(`List members config: ${S}`); const D = s.compile(S)(b).replace(/&quot;/g, '"'); I.logger.info(`Rendered request config: ${D}`); const v = JSON.parse(D); _ = (_ = _.replace(/\\/g, "")).replace(/\n/g, ""), I.logger.info(`parsedListMembersConfig: ${JSON.stringify({ ...v, url: v.url + "&fetchXml=" + _ })}`); const { data: M } = await (0, r.default)({ ...v, url: v.url + "&fetchXml=" + _ }); I.logger.info(`List members response: ${JSON.stringify(M)}`); const w = M.value.map((n => ({ name: n.name, accountid: n.accountid, telephone: n.telephone2, email: n.email, accountnumber: n.accountnumber }))); I.logger.info(`Account ids: ${JSON.stringify(w)}`); const x = async n => {
                    var e, t, o, d, r, s, c, A, $, y, _, C, b, k; I.logger.info(`Account ID: ${n.accountid}`); try {
                        const { data: { customerByParentId: f } } = await m.default.query({
                            query: l.gql`
            ${g.customerByParentIdWithProfile}
          `, variables: { id: n.accountid }
                        }); if (I.logger.info(`profileByParentIdResponse: ${JSON.stringify(f)}`), 0 !== (null == f ? void 0 : f.items.length)) return { name: i, phone: null !== (d = null === (o = null === (t = null === (e = null == f ? void 0 : f.items[0]) || void 0 === e ? void 0 : e.profile) || void 0 === t ? void 0 : t.items[0]) || void 0 === o ? void 0 : o.profileId) && void 0 !== d ? d : "", channelId: null !== (A = null === (c = null === (s = null === (r = null == f ? void 0 : f.items[0]) || void 0 === r ? void 0 : r.profile) || void 0 === s ? void 0 : s.items[0]) || void 0 === c ? void 0 : c.profileId) && void 0 !== A ? A : "", channel: u.CHANNEL.WHATSAPP, accountId: n.accountid, contactGroupIds: [{ id: a, name: i }] }; { const e = null !== ($ = n.telephone) && void 0 !== $ ? $ : ""; let t = ""; return "" !== e && null !== e && (t = (0, p.default)(e, { country: "IT" }).phoneNumber, I.logger.info(`channelID: ${t}`), (null == t ? void 0 : t.startsWith("+")) && (t = null !== (y = null == t ? void 0 : t.replace(/\+/g, "")) && void 0 !== y ? y : "")), "" === t || null === t ? null : { name: null !== (_ = n.name) && void 0 !== _ ? _ : "", email: null !== (C = n.email) && void 0 !== C ? C : "", phone: t, channelId: t, channel: u.CHANNEL.WHATSAPP, accountId: n.accountid, accountnumber: null !== (b = n.accountnumber) && void 0 !== b ? b : "", dynamics_account_id: null !== (k = n.accountid) && void 0 !== k ? k : "", contactGroupIds: [{ id: a, name: i }] } }
                    } catch (f) { return I.logger.error(`Error fetching data for Account ID: ${n.accountid}, Error: ${f}`), null }
                }, L = parseInt(null != y ? y : "0"), N = L + $; w.slice(L, N); const U = w.map(x), B = await Promise.all(U), F = B.filter((n => null !== n)); return I.logger.info(`Intermediate rows data: ${JSON.stringify(B)}`), { nextToken: M.value.length > N ? N : null, items: F, isCompleted: !(M.value.length > N) }
            } catch (C) { return I.logger.error(`Error fetching data for Account ID: ${C}`), { nextToken: null, items: [], isCompleted: !0 } }
        }
    }, n => { n.exports = require("axios") }, n => { n.exports = require("handlebars") }, n => { n.exports = require("phone") }, (n, e) => { Object.defineProperty(e, "__esModule", { value: !0 }), e.default = function (n) { if (!n || "string" != typeof n) return !1; try { return JSON.parse(n), !0 } catch (e) { return !1 } } }, (n, e) => { Object.defineProperty(e, "__esModule", { value: !0 }), e.searchCustomersCustomerHub = e.customerByParentIdWithProfile = e.searchCustomersWithProfile = e.deleteCustomerWithDepth0 = e.listCustomerProfiles = e.getCustomerProfile = e.searchCustomersProfileAndSessions = void 0; e.searchCustomersProfileAndSessions = "\n  query SearchCustomersProfileAndSessions(\n    $filter: SearchableCustomerFilterInput\n    $sort: [SearchableCustomerSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCustomerAggregationInput]\n  ) {\n    searchCustomers(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        customerId\n        name\n        email\n        firstName\n        lastName\n        tags\n        variables\n        createdAt\n        updatedAt\n        enterpriseId\n        profile {\n          items {\n            profileId\n            channel\n          }\n        }\n        sessionsByDate(sortDirection: DESC) {\n          items {\n            createdAt\n            updatedAt\n            agent {\n              userId\n              email\n              name\n            }\n            channel\n            sessionId\n          }\n        }\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n            }\n          }\n        }\n      }\n    }\n  }\n", e.getCustomerProfile = "\n  query GetCustomerProfile($enterpriseId: ID!, $mode: MODE!, $customerId: ID, variable: GetCustomerProfileVariables) {\n    getCustomer(enterpriseId: $enterpriseId, mode: $mode, customerId: $customerId, variable: $variable) {\n      customerId\n      name\n      email\n      firstName\n      lastName\n      tags\n      variables\n      blacklisted\n      blacklistReason\n      blacklistedAt\n      profile {\n        items {\n          profileId\n          channel\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n      enterpriseId\n    }\n  }\n", e.listCustomerProfiles = "\n  query ListCustomerProfiles(\n    $enterpriseId: ID\n    $modeCustomerId: ModelCustomerPrimaryCompositeKeyConditionInput\n    $filter: ModelCustomerFilterInput\n    $limit: Int\n    $nextToken: String\n    $sortDirection: ModelSortDirection\n  ) {\n    listCustomers(\n      enterpriseId: $enterpriseId\n      modeCustomerId: $modeCustomerId\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n      sortDirection: $sortDirection\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        tags\n        variables\n        createdAt\n        updatedAt\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        profile {\n          items {\n            profileId\n            channel\n          }\n        }\n        sessionsByDate(sortDirection: DESC) {\n          items {\n            enterpriseId\n            mode\n            createdAt\n            updatedAt\n            agent {\n              userId\n              email\n              name\n            }\n            channel\n            sessionId\n          }\n        }\n      }\n      nextToken\n    }\n  }\n", e.deleteCustomerWithDepth0 = "\n  mutation DeleteCustomerWithDepth0(\n    $input: DeleteCustomerInput!\n    $condition: ModelCustomerConditionInput\n  ) {\n    deleteCustomer(input: $input, condition: $condition) {\n      customerId\n      name\n      email\n      firstName\n      lastName\n      tags\n    }\n  }\n", e.searchCustomersWithProfile = "\n  query SearchCustomersWithProfile(\n    $filter: SearchableCustomerFilterInput\n    $sort: [SearchableCustomerSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCustomerAggregationInput]\n  ) {\n    searchCustomers(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        customerId\n        name\n        email\n        firstName\n        lastName\n        variables\n        tags\n        createdAt\n        updatedAt\n        enterpriseId\n        blacklisted\n        blacklistReason\n        blacklistedAt\n        profile {\n          items {\n            profileId\n            channel\n          }\n        }\n      }\n      nextToken\n      total\n      aggregateItems {\n        name\n        result {\n          ... on SearchableAggregateScalarResult {\n            value\n          }\n          ... on SearchableAggregateBucketResult {\n            buckets {\n              key\n              doc_count\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n", e.customerByParentIdWithProfile = "\n  query customerByParentIdWithProfile($id: String!) {\n    customerByParentId(parentId: $id) {\n      items {\n        customerId\n        name\n        parent\n        parentId\n        variables\n        profile {\n          items {\n            profileId\n            channel\n          }\n        }\n      }\n    }\n  }\n", e.searchCustomersCustomerHub = "\n  \n  fragment CustomerHub on Customer {\n    profile {\n      items {\n        profileId\n        channel\n      }\n    }\n    campaignMessage(sortDirection: DESC, limit: 1) {\n      items {\n        campaignMessageId\n        campaignId\n      }\n    }\n    sessionsByDate(sortDirection: DESC, limit: 1) {\n      items {\n        enterpriseId\n        mode\n        createdAt\n        updatedAt\n      }\n    }\n    federatedSessions(sortDirection: DESC, limit: 1) {\n      items {\n        enterpriseId\n        campaignMessageId\n        flowId\n        integrationId\n        sessionId\n      }\n    }\n    linkedApps(sortDirection: DESC, limit: 5) {\n      items {\n        linkedAppId\n        updatedAt\n        customerDetails\n        linkedApp {\n          name\n          details\n          linkedAppId\n          enterpriseId\n          config\n        }\n        customerId\n        enterpriseId\n      }\n    }\n    conversationByDate(sortDirection: DESC, limit: 1) {\n      items {\n        conversationId\n        agentInfo\n        enterpriseId\n        content\n        imagePath\n        sessionId\n        updatedAt\n      }\n    }\n  }\n\n  query SearchCustomersCustomerHub(\n    $filter: SearchableCustomerFilterInput\n    $sort: [SearchableCustomerSortInput]\n    $limit: Int\n    $nextToken: String\n    $from: Int\n    $aggregates: [SearchableCustomerAggregationInput]\n  ) {\n    searchCustomers(\n      filter: $filter\n      sort: $sort\n      limit: $limit\n      nextToken: $nextToken\n      from: $from\n      aggregates: $aggregates\n    ) {\n      items {\n        enterpriseId\n        mode\n        customerId\n        name\n        email\n        firstName\n        lastName\n        tags\n        variables\n        createdAt\n        updatedAt\n        enterpriseId\n        ...CustomerHub\n      }\n      nextToken\n      total\n    }\n  }\n" }, function (n, e, t) {
        var a = this && this.__createBinding || (Object.create ? function (n, e, t, a) { void 0 === a && (a = t); var i = Object.getOwnPropertyDescriptor(e, t); i && !("get" in i ? !e.__esModule : i.writable || i.configurable) || (i = { enumerable: !0, get: function () { return e[t] } }), Object.defineProperty(n, a, i) } : function (n, e, t, a) { void 0 === a && (a = t), n[a] = e[t] }), i = this && this.__setModuleDefault || (Object.create ? function (n, e) { Object.defineProperty(n, "default", { enumerable: !0, value: e }) } : function (n, e) { n.default = e }), o = this && this.__importStar || function (n) { if (n && n.__esModule) return n; var e = {}; if (null != n) for (var t in n) "default" !== t && Object.prototype.hasOwnProperty.call(n, t) && a(e, n, t); return i(e, n), e }, d = this && this.__importDefault || function (n) { return n && n.__esModule ? n : { default: n } }; Object.defineProperty(e, "__esModule", { value: !0 }); const r = d(t(13)), s = o(t(14)), p = d(t(15)), l = t(1), c = d(t(16)), I = t(5), m = d(t(6)), u = t(8), g = t(17), A = t(10); e.default = async ({ integrationId: n, nextUrl: e, listId: t, contactGroupId: a, listname: i, enterpriseId: o, mode: d }) => {
            I.logger.info(`Integration ID: ${n} , listId: ${t} , contactGroupId: ${a} , nextUrl: ${e} , listname: ${i} `); const { data: { getIntegration: $ } } = await m.default.query({
                query: l.gql`
      ${A.getIntegration}
    `, variables: { enterpriseId: o, mode: d, integrationId: n }
            }); let y = (0, c.default)(null == $ ? void 0 : $.config) ? JSON.parse(null == $ ? void 0 : $.config) : {}; const _ = s.compile('{"method":"post","url":"https://login.windows.net/{{integration.tenant_id}}/oauth2/token","data":"resource={{integration.resource}}&grant_type=client_credentials&client_secret={{integration.client_secret}}&client_id={{integration.client_id}}","headers":{"Content-Type":"application/x-www-form-urlencoded","Accept":"*/*","Accept-Encoding":"Accept-Encoding","Connection":"keep-alive"}}')({ integration: y }).replace(/&quot;/g, '"'), C = JSON.parse(_), { data: b } = await (0, r.default)(C); y = { integration: { ...y.integration, ...b } }; const k = `{"method":"get","url":"${null != e ? e : `{{integration.resource}}/api/data/v9.0/listmembers?$count=true&$select=_entityid_value&$filter=_listid_value eq ${t}`}","headers":{"Authorization":"Bearer {{integration.access_token}}","Prefer":"odata.maxpagesize=100"},"data":null}`, f = s.compile(k)(y).replace(/&quot;/g, '"'); I.logger.info(`Rendered request config: ${f}`); const T = JSON.parse(f); I.logger.info(`Parsed list members config: ${JSON.stringify(T)}`); const { data: h } = await (0, r.default)(T); I.logger.info(`List members response: ${JSON.stringify(h)}`); const S = h.value.map((n => n._entityid_value)); I.logger.info(`Account ids: ${JSON.stringify(S)}`); const D = S.map((async n => {
                var e, t, o, d, c, A, $, _, C, b, k, f, T, h, S; I.logger.info(`Account ID: ${n}`); try {
                    const { data: { customerByParentId: D } } = await m.default.query({
                        query: l.gql`
          ${g.customerByParentIdWithProfile}
        `, variables: { id: n }
                    }); if (I.logger.info(`profileByParentIdResponse: ${JSON.stringify(D)}`), 0 !== (null == D ? void 0 : D.items.length)) return { name: null !== (e = null == D ? void 0 : D.items[0].name) && void 0 !== e ? e : "", phone: null !== (c = null === (d = null === (o = null === (t = null == D ? void 0 : D.items[0]) || void 0 === t ? void 0 : t.profile) || void 0 === o ? void 0 : o.items[0]) || void 0 === d ? void 0 : d.profileId) && void 0 !== c ? c : "", channelId: null !== (C = null === (_ = null === ($ = null === (A = null == D ? void 0 : D.items[0]) || void 0 === A ? void 0 : A.profile) || void 0 === $ ? void 0 : $.items[0]) || void 0 === _ ? void 0 : _.profileId) && void 0 !== C ? C : "", channel: u.CHANNEL.WHATSAPP, accountId: n, contactGroupIds: [{ id: a, name: i }] }; { const e = `{"method":"get","url":"${`{{integration.resource}}/api/data/v9.0/accounts(${n})?$select=accountid,telephone1,telephone2,emailaddress1,name,accountnumber&$count=true`}","headers":{"Authorization":"Bearer {{integration.access_token}}"},"data":null}`, t = s.compile(e)(y).replace(/&quot;/g, '"'), o = JSON.parse(t), { data: d } = await (0, r.default)(o); d ? I.logger.info(`Request response: ${JSON.stringify(d)}`) : I.logger.info("Request response is null"); const l = null !== (b = null == d ? void 0 : d.telephone2) && void 0 !== b ? b : ""; let c = ""; return "" !== l && null !== l && (c = (0, p.default)(l, { country: "IT" }).phoneNumber, I.logger.info(`channelID: ${c}`), (null == c ? void 0 : c.startsWith("+")) && (c = null !== (k = null == c ? void 0 : c.replace(/\+/g, "")) && void 0 !== k ? k : "")), "" === c || null === c ? null : { name: null !== (f = d.name) && void 0 !== f ? f : "", email: null !== (T = d.emailaddress1) && void 0 !== T ? T : "", phone: c, channelId: c, channel: u.CHANNEL.WHATSAPP, accountId: null == d ? void 0 : d.accountid, accountnumber: null !== (h = null == d ? void 0 : d.accountnumber) && void 0 !== h ? h : "", dynamics_account_id: null !== (S = null == d ? void 0 : d.accountid) && void 0 !== S ? S : "", contactGroupIds: [{ id: a, name: i }] } }
                } catch (D) { return I.logger.error(`Error fetching data for Account ID: ${n}, Error: ${D}`), null }
            })), v = await Promise.all(D), M = v.filter((n => null !== n)); return I.logger.info(`Intermediate rows data: ${JSON.stringify(v)}`), { nextToken: h["@odata.nextLink"] ? h["@odata.nextLink"] : null, items: M, isCompleted: !h["@odata.nextLink"] }
        }
    }, function (n, e, t) {
        var a = this && this.__createBinding || (Object.create ? function (n, e, t, a) { void 0 === a && (a = t); var i = Object.getOwnPropertyDescriptor(e, t); i && !("get" in i ? !e.__esModule : i.writable || i.configurable) || (i = { enumerable: !0, get: function () { return e[t] } }), Object.defineProperty(n, a, i) } : function (n, e, t, a) { void 0 === a && (a = t), n[a] = e[t] }), i = this && this.__setModuleDefault || (Object.create ? function (n, e) { Object.defineProperty(n, "default", { enumerable: !0, value: e }) } : function (n, e) { n.default = e }), o = this && this.__importStar || function (n) { if (n && n.__esModule) return n; var e = {}; if (null != n) for (var t in n) "default" !== t && Object.prototype.hasOwnProperty.call(n, t) && a(e, n, t); return i(e, n), e }, d = this && this.__importDefault || function (n) { return n && n.__esModule ? n : { default: n } }; Object.defineProperty(e, "__esModule", { value: !0 }); const r = d(t(13)), s = o(t(14)), p = t(15), l = t(1), c = d(t(16)), I = t(5), m = d(t(6)), u = t(8), g = t(10); e.default = async ({ integrationId: n, nextUrl: e, enterpriseId: t, mode: a }) => {
            var i; I.logger.info("Fetching contacts from Dynamics"); const { data: { getIntegration: o } } = await m.default.query({
                query: l.gql`
      ${g.getIntegration}
    `, variables: { enterpriseId: t, mode: a, integrationId: n }
            }); let d = (0, c.default)(null == o ? void 0 : o.config) ? JSON.parse(null == o ? void 0 : o.config) : {}; I.logger.info(`Parsed config: ${JSON.stringify(d)}`); const A = s.compile('{"method":"post","url":"https://login.windows.net/{{integration.tenant_id}}/oauth2/token","data":"resource={{integration.resource}}&grant_type=client_credentials&client_secret={{integration.client_secret}}&client_id={{integration.client_id}}","headers":{"Content-Type":"application/x-www-form-urlencoded","Accept":"*/*","Accept-Encoding":"Accept-Encoding","Connection":"keep-alive"}}')({ integration: d }).replace(/&quot;/g, '"'), $ = JSON.parse(A), { data: y } = await (0, r.default)($); I.logger.info(`Refresh response: ${JSON.stringify(y)}`), d = { integration: { ...d.integration, ...y } }, I.logger.info(`Parsed config: ${JSON.stringify(d)}`); const _ = null != e ? e : "{{integration.resource}}/api/data/v9.0/accounts?$select=accountid,telephone1,telephone2,emailaddress1,name,accountnumber&$count=true"; I.logger.info(`URL: ${JSON.stringify(_)}`); const C = `{"method":"get","url":"${_}","headers":{"Authorization":"Bearer {{integration.access_token}}","Prefer":"odata.maxpagesize=100"},"data":null}`, b = s.compile(C)(d).replace(/&quot;/g, '"'); I.logger.info(`Rendered request config: ${b}`); const k = JSON.parse(b), { data: f } = await (0, r.default)(k); I.logger.info(`Request response: ${JSON.stringify(f)}`); const T = []; return null === (i = null == f ? void 0 : f.value) || void 0 === i || i.forEach((n => { var e, t, a, i; const o = null !== (e = null == n ? void 0 : n.telephone2) && void 0 !== e ? e : ""; let d = ""; "" !== o && null !== o && (I.logger.info(`phone number: ${o}`), d = null === (a = (0, p.phone)(o, { country: null !== (t = null == n ? void 0 : n.address1_country) && void 0 !== t ? t : "IT" })) || void 0 === a ? void 0 : a.phoneNumber, I.logger.info(`channelID: ${d}`), (null == d ? void 0 : d.startsWith("+")) && (d = null !== (i = null == d ? void 0 : d.replace(/\+/g, "")) && void 0 !== i ? i : "")), T.push({ name: n.name, email: n.emailaddress1, phone: d, channelId: d, channel: u.CHANNEL.WHATSAPP, accountId: n.accountid, parent: u.SAAS.MS_DYNAMICS_CRM, parentId: n.accountid, dynamics_account_id: n.accountid, accountnumber: n.accountnumber }) })), I.logger.info(`Fetched contacts from Dynamics: ${JSON.stringify(T)}`), I.logger.info(`Next URL: ${JSON.stringify(f["@odata.nextLink"])}`), I.logger.info(`count ${JSON.stringify(f["@odata.count"])}`), { nextToken: f["@odata.nextLink"] ? f["@odata.nextLink"] : null, items: T, isCompleted: !f["@odata.nextLink"] }
        }
    }, function (n, e, t) {
        var a = this && this.__importDefault || function (n) { return n && n.__esModule ? n : { default: n } }; Object.defineProperty(e, "__esModule", { value: !0 }), e.UpdateEnterpriseVariables = e.getFileByKey = void 0; const i = a(t(21)), o = t(22), d = t(23), r = t(1), s = t(24), p = t(5), l = a(t(6)), c = t(8), I = t(9), m = t(10), u = new s.S3Client({ region: process.env.REGION }); e.getFileByKey = async n => { const e = { Bucket: process.env.STORAGE_HALO_BUCKETNAME, Key: n }, t = (await u.send(new s.GetObjectCommand(e))).Body; return new Promise(((n, e) => { const a = []; t.on("data", (n => { a.push(n) })), t.on("end", (() => { const e = Buffer.concat(a); n(e) })), t.on("error", (n => { e(n) })) })) }; e.UpdateEnterpriseVariables = async (n, e) => {
            var t; const { data: { getEnterprise: a } } = await l.default.query({
                query: r.gql`
      ${m.getEnterprise}
    `, variables: { enterpriseId: n }
            }), i = e.values, o = JSON.parse(null !== (t = a.contactAttributes) && void 0 !== t ? t : "[]"), d = Object.values(i).map((n => n)), s = o.map((n => n.fieldName)); for (const r of d) if (s.includes(r || void 0 === r || "channelId" === r)) p.logger.info("exists"); else { p.logger.info(`Does not exist, ${r} to be added`); const n = { fieldName: r, type: typeof r, value: `customer.${r}` }; o.push(n) } p.logger.info(`currentAttributes ${JSON.stringify(o)}`), await l.default.mutate({
                mutation: r.gql`
      ${I.updateEnterprise}
    `, variables: { input: { enterpriseId: n, contactAttributes: JSON.stringify(o) } }
            })
        }, e.default = async ({ fileKey: n, enterpriseId: t, mode: a, limit: s, nextToken: u, type: g }) => {
            const A = await (0, e.getFileByKey)(n); p.logger.info("File contents received"); const $ = new i.default.stream.xlsx.WorkbookReader(new o.Readable({ read() { this.push(A), this.push(null) } }), {}), y = []; let _ = []; const C = parseInt(null != u ? u : "2"); for await (const i of $) { p.logger.info(`Fetching row from row number ${C} to ${C + s}`); for await (const n of i) if (1 == n.number) { if (!n.cellCount) return; if (_ = n.values, g === c.JobType.CONTACTS) { if (!1 === _.includes("channelId") || !1 === _.includes("phone")) throw p.logger.info("Invalid template for Contacts"), new Error("Invalid template") } else if (g === c.JobType.CONTACT_LIST) { if (!1 === _.includes("channelId") || !1 === _.includes("list_name")) throw p.logger.info("Invalid template for Contacts List"), new Error("Invalid template") } else if (g === c.JobType.DELETE_CONTACTS && !1 === _.includes("channelId")) throw p.logger.info("Invalid template for Delete contacts"), new Error("Invalid template"); u || g !== c.JobType.CONTACTS || (p.logger.info("First batch of data fetched. Updating enterprise Contact attributes"), await (0, e.UpdateEnterpriseVariables)(t, n)) } else if (n.number >= C && n.number < C + s) { const e = n.values, t = {}; for (let n = 1; n <= _.length; n++)t[`${_[n]}`] = e[n]; n.eachCell(((n, e) => { var a; t[`${_[e]}`] = null !== (a = n.text) && void 0 !== a ? a : "" })), y.push(t) } } if (p.logger.info(`Fetched ${y.length} rows`), g === c.JobType.CONTACT_LIST) {
                p.logger.info("Check for the contact group name already exists, if not create a new one"); const n = []; y.forEach((e => { const t = e.list_name.split(",").map((n => n.trim())); n.push(...t) })); const e = [...new Set(n)], i = []; let o = await l.default.query({
                    query: r.gql`
        ${m.listContactGroups}
      `, variables: { enterpriseId: t, filter: { mode: { eq: a } }, limit: 1e3 }
                }); for (p.logger.info(`Existing contact groups: ${JSON.stringify(o.data.listContactGroups.items)}`), i.push(...o.data.listContactGroups.items); null == o ? void 0 : o.data.listContactGroups.nextToken;) {
                    const n = null == o ? void 0 : o.data.listContactGroups.nextToken; o = await l.default.query({
                        query: r.gql`
          ${m.listContactGroups}
        `, variables: { enterpriseId: t, filter: { mode: { eq: a } }, limit: 1e3, nextToken: n }
                    }), i.push(...o.data.listContactGroups.items)
                } const s = i.map((n => n.name.toLowerCase())), c = e.filter((n => !s.includes(n.toLowerCase()))); p.logger.info(`New contact groups: ${JSON.stringify(c)}`); let u = []; if (c.length > 0) {
                    p.logger.info("Creating new contact groups"); const n = await Promise.all([...new Set(c)].map((n => l.default.mutate({
                        mutation: r.gql`
              ${I.createContactGroup}
            `, variables: { input: { contactGroupId: (0, d.v4)(), name: n.trim(), enterpriseId: t, mode: a } }
                    })))); u = n.map((n => n.data)), p.logger.info("Created new contact groups")
                } p.logger.info("Updating contact group ids"), y.forEach((n => { const e = n.list_name.split(",").map((n => n.trim())), t = []; e.forEach((n => { const e = i.find((e => e.name.toLowerCase() === n.toLowerCase())); if (e) t.push({ id: null == e ? void 0 : e.contactGroupId, name: n }); else { const e = u.find((e => e.createContactGroup.name.toLowerCase() === n.toLowerCase())); e && t.push({ id: null == e ? void 0 : e.createContactGroup.contactGroupId, name: n }) } })), n.contactGroupIds = t }))
            } return { nextToken: y.length < s ? null : u + s, items: y, isCompleted: y.length < s }
        }
    }, n => { n.exports = require("exceljs") }, n => { n.exports = require("stream") }, n => { n.exports = require("uuid") }, n => { n.exports = require("@aws-sdk/client-s3") }], e = {}; var t = function t(a) { var i = e[a]; if (void 0 !== i) return i.exports; var o = e[a] = { exports: {} }; return n[a].call(o.exports, o, o.exports, t), o.exports }(0), a = exports; for (var i in t) a[i] = t[i]; t.__esModule && Object.defineProperty(a, "__esModule", { value: !0 })
})();